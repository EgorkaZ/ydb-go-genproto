// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: protos/ydb_persqueue_v1.proto

package Ydb_PersQueue_V1

import (
	Ydb "github.com/ydb-platform/ydb-go-genproto/protos/Ydb"
	Ydb_Issue "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Issue"
	Ydb_Operations "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Operations"
	Ydb_Scheme "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Scheme"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Codec int32

const (
	Codec_CODEC_UNSPECIFIED Codec = 0
	Codec_CODEC_RAW         Codec = 1
	Codec_CODEC_GZIP        Codec = 2
	Codec_CODEC_LZOP        Codec = 3
	Codec_CODEC_ZSTD        Codec = 4
)

// Enum value maps for Codec.
var (
	Codec_name = map[int32]string{
		0: "CODEC_UNSPECIFIED",
		1: "CODEC_RAW",
		2: "CODEC_GZIP",
		3: "CODEC_LZOP",
		4: "CODEC_ZSTD",
	}
	Codec_value = map[string]int32{
		"CODEC_UNSPECIFIED": 0,
		"CODEC_RAW":         1,
		"CODEC_GZIP":        2,
		"CODEC_LZOP":        3,
		"CODEC_ZSTD":        4,
	}
)

func (x Codec) Enum() *Codec {
	p := new(Codec)
	*p = x
	return p
}

func (x Codec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Codec) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_persqueue_v1_proto_enumTypes[0].Descriptor()
}

func (Codec) Type() protoreflect.EnumType {
	return &file_protos_ydb_persqueue_v1_proto_enumTypes[0]
}

func (x Codec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Codec.Descriptor instead.
func (Codec) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{0}
}

type StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status int32

const (
	// Not used state.
	StreamingReadClientMessage_InitRequest_State_PartitionSessionState_STATUS_UNSPECIFIED StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status = 0
	// Client saw StartPartitionSessionRequest message but not yet responded.
	StreamingReadClientMessage_InitRequest_State_PartitionSessionState_STARTING StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status = 1
	// Client saw StopPartitionSessionRequest message but not yet responded.
	StreamingReadClientMessage_InitRequest_State_PartitionSessionState_STOPPING StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status = 2
	// Client sent StartPartitionSessionResponse or ResumeReadRequest message to server for this partition session.
	StreamingReadClientMessage_InitRequest_State_PartitionSessionState_READING StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status = 3
	// Client sent PauseReadRequest for this partition session.
	StreamingReadClientMessage_InitRequest_State_PartitionSessionState_PAUSED StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status = 4
)

// Enum value maps for StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status.
var (
	StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STARTING",
		2: "STOPPING",
		3: "READING",
		4: "PAUSED",
	}
	StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STARTING":           1,
		"STOPPING":           2,
		"READING":            3,
		"PAUSED":             4,
	}
)

func (x StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status) Enum() *StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status {
	p := new(StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status)
	*p = x
	return p
}

func (x StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_persqueue_v1_proto_enumTypes[1].Descriptor()
}

func (StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status) Type() protoreflect.EnumType {
	return &file_protos_ydb_persqueue_v1_proto_enumTypes[1]
}

func (x StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status.Descriptor instead.
func (StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 0, 0, 0, 0}
}

type MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status int32

const (
	// Not used state.
	MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_STATUS_UNSPECIFIED MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status = 0
	// Client seen Create message but not yet responded to server with Created message.
	MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_CREATING MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status = 1
	// Client seen Destroy message but not yet responded with Released message.
	MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_DESTROYING MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status = 2
	// Client sent Created or ResumeReadRequest message to server for this partition stream.
	MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_READING MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status = 3
	// Client sent StopReadRequest for this partition stream.
	MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_STOPPED MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status = 4
)

// Enum value maps for MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status.
var (
	MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "DESTROYING",
		3: "READING",
		4: "STOPPED",
	}
	MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"CREATING":           1,
		"DESTROYING":         2,
		"READING":            3,
		"STOPPED":            4,
	}
)

func (x MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status) Enum() *MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status {
	p := new(MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status)
	*p = x
	return p
}

func (x MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_persqueue_v1_proto_enumTypes[2].Descriptor()
}

func (MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status) Type() protoreflect.EnumType {
	return &file_protos_ydb_persqueue_v1_proto_enumTypes[2]
}

func (x MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status.Descriptor instead.
func (MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15, 1, 0, 0, 0}
}

type TopicSettings_Format int32

const (
	TopicSettings_FORMAT_UNSPECIFIED TopicSettings_Format = 0
	TopicSettings_FORMAT_BASE        TopicSettings_Format = 1
)

// Enum value maps for TopicSettings_Format.
var (
	TopicSettings_Format_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		1: "FORMAT_BASE",
	}
	TopicSettings_Format_value = map[string]int32{
		"FORMAT_UNSPECIFIED": 0,
		"FORMAT_BASE":        1,
	}
)

func (x TopicSettings_Format) Enum() *TopicSettings_Format {
	p := new(TopicSettings_Format)
	*p = x
	return p
}

func (x TopicSettings_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicSettings_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_persqueue_v1_proto_enumTypes[3].Descriptor()
}

func (TopicSettings_Format) Type() protoreflect.EnumType {
	return &file_protos_ydb_persqueue_v1_proto_enumTypes[3]
}

func (x TopicSettings_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicSettings_Format.Descriptor instead.
func (TopicSettings_Format) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{24, 0}
}

type MetaValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[string]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetaValue) Reset() {
	*x = MetaValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaValue) ProtoMessage() {}

func (x *MetaValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaValue.ProtoReflect.Descriptor instead.
func (*MetaValue) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{0}
}

func (x *MetaValue) GetValue() map[string]string {
	if x != nil {
		return x.Value
	}
	return nil
}

//*
// Represents range [start_offset, end_offset).
type OffsetsRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartOffset int64 `protobuf:"varint,1,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset   int64 `protobuf:"varint,2,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *OffsetsRange) Reset() {
	*x = OffsetsRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetsRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetsRange) ProtoMessage() {}

func (x *OffsetsRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetsRange.ProtoReflect.Descriptor instead.
func (*OffsetsRange) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{1}
}

func (x *OffsetsRange) GetStartOffset() int64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *OffsetsRange) GetEndOffset() int64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

// In-session reauthentication and reauthorization, lets user increase session lifetime. You should wait for 'update_token_response' before sending next 'update_token_request'.
type UpdateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateTokenRequest) Reset() {
	*x = UpdateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenRequest) ProtoMessage() {}

func (x *UpdateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateTokenRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTokenResponse) Reset() {
	*x = UpdateTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenResponse) ProtoMessage() {}

func (x *UpdateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenResponse.ProtoReflect.Descriptor instead.
func (*UpdateTokenResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{3}
}

//*
// Request for write session. Contains one of:
//      InitRequest - handshake request.
//      WriteRequest - portion of data to be written.
//      UpdateTokenRequest - user credentials if update is needed.
type StreamingWriteClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ClientMessage:
	//	*StreamingWriteClientMessage_InitRequest_
	//	*StreamingWriteClientMessage_WriteRequest_
	//	*StreamingWriteClientMessage_UpdateTokenRequest
	ClientMessage isStreamingWriteClientMessage_ClientMessage `protobuf_oneof:"client_message"`
}

func (x *StreamingWriteClientMessage) Reset() {
	*x = StreamingWriteClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteClientMessage) ProtoMessage() {}

func (x *StreamingWriteClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteClientMessage.ProtoReflect.Descriptor instead.
func (*StreamingWriteClientMessage) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{4}
}

func (m *StreamingWriteClientMessage) GetClientMessage() isStreamingWriteClientMessage_ClientMessage {
	if m != nil {
		return m.ClientMessage
	}
	return nil
}

func (x *StreamingWriteClientMessage) GetInitRequest() *StreamingWriteClientMessage_InitRequest {
	if x, ok := x.GetClientMessage().(*StreamingWriteClientMessage_InitRequest_); ok {
		return x.InitRequest
	}
	return nil
}

func (x *StreamingWriteClientMessage) GetWriteRequest() *StreamingWriteClientMessage_WriteRequest {
	if x, ok := x.GetClientMessage().(*StreamingWriteClientMessage_WriteRequest_); ok {
		return x.WriteRequest
	}
	return nil
}

func (x *StreamingWriteClientMessage) GetUpdateTokenRequest() *UpdateTokenRequest {
	if x, ok := x.GetClientMessage().(*StreamingWriteClientMessage_UpdateTokenRequest); ok {
		return x.UpdateTokenRequest
	}
	return nil
}

type isStreamingWriteClientMessage_ClientMessage interface {
	isStreamingWriteClientMessage_ClientMessage()
}

type StreamingWriteClientMessage_InitRequest_ struct {
	InitRequest *StreamingWriteClientMessage_InitRequest `protobuf:"bytes,1,opt,name=init_request,json=initRequest,proto3,oneof"`
}

type StreamingWriteClientMessage_WriteRequest_ struct {
	WriteRequest *StreamingWriteClientMessage_WriteRequest `protobuf:"bytes,2,opt,name=write_request,json=writeRequest,proto3,oneof"`
}

type StreamingWriteClientMessage_UpdateTokenRequest struct {
	UpdateTokenRequest *UpdateTokenRequest `protobuf:"bytes,3,opt,name=update_token_request,json=updateTokenRequest,proto3,oneof"`
}

func (*StreamingWriteClientMessage_InitRequest_) isStreamingWriteClientMessage_ClientMessage() {}

func (*StreamingWriteClientMessage_WriteRequest_) isStreamingWriteClientMessage_ClientMessage() {}

func (*StreamingWriteClientMessage_UpdateTokenRequest) isStreamingWriteClientMessage_ClientMessage() {
}

//*
// Response for write session. Contains one of:
//      InitResponse - correct handshake response.
//      BatchWriteResponse - acknowledgment of storing client messages.
//      UpdateTokenResponse - acknowledgment of reauthentication and reauthorization.
type StreamingWriteServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server status of response.
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Issues if any.
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	// Types that are assignable to ServerMessage:
	//	*StreamingWriteServerMessage_InitResponse_
	//	*StreamingWriteServerMessage_BatchWriteResponse_
	//	*StreamingWriteServerMessage_UpdateTokenResponse
	ServerMessage isStreamingWriteServerMessage_ServerMessage `protobuf_oneof:"server_message"`
}

func (x *StreamingWriteServerMessage) Reset() {
	*x = StreamingWriteServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteServerMessage) ProtoMessage() {}

func (x *StreamingWriteServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteServerMessage.ProtoReflect.Descriptor instead.
func (*StreamingWriteServerMessage) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{5}
}

func (x *StreamingWriteServerMessage) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *StreamingWriteServerMessage) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (m *StreamingWriteServerMessage) GetServerMessage() isStreamingWriteServerMessage_ServerMessage {
	if m != nil {
		return m.ServerMessage
	}
	return nil
}

func (x *StreamingWriteServerMessage) GetInitResponse() *StreamingWriteServerMessage_InitResponse {
	if x, ok := x.GetServerMessage().(*StreamingWriteServerMessage_InitResponse_); ok {
		return x.InitResponse
	}
	return nil
}

func (x *StreamingWriteServerMessage) GetBatchWriteResponse() *StreamingWriteServerMessage_BatchWriteResponse {
	if x, ok := x.GetServerMessage().(*StreamingWriteServerMessage_BatchWriteResponse_); ok {
		return x.BatchWriteResponse
	}
	return nil
}

func (x *StreamingWriteServerMessage) GetUpdateTokenResponse() *UpdateTokenResponse {
	if x, ok := x.GetServerMessage().(*StreamingWriteServerMessage_UpdateTokenResponse); ok {
		return x.UpdateTokenResponse
	}
	return nil
}

type isStreamingWriteServerMessage_ServerMessage interface {
	isStreamingWriteServerMessage_ServerMessage()
}

type StreamingWriteServerMessage_InitResponse_ struct {
	InitResponse *StreamingWriteServerMessage_InitResponse `protobuf:"bytes,3,opt,name=init_response,json=initResponse,proto3,oneof"`
}

type StreamingWriteServerMessage_BatchWriteResponse_ struct {
	BatchWriteResponse *StreamingWriteServerMessage_BatchWriteResponse `protobuf:"bytes,4,opt,name=batch_write_response,json=batchWriteResponse,proto3,oneof"`
}

type StreamingWriteServerMessage_UpdateTokenResponse struct {
	UpdateTokenResponse *UpdateTokenResponse `protobuf:"bytes,5,opt,name=update_token_response,json=updateTokenResponse,proto3,oneof"`
}

func (*StreamingWriteServerMessage_InitResponse_) isStreamingWriteServerMessage_ServerMessage() {}

func (*StreamingWriteServerMessage_BatchWriteResponse_) isStreamingWriteServerMessage_ServerMessage() {
}

func (*StreamingWriteServerMessage_UpdateTokenResponse) isStreamingWriteServerMessage_ServerMessage() {
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of object (topic/consumer).
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{6}
}

func (x *Path) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{7}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//*
// Single read parameters for server.
type ReadParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max messages to give to client in one read request.
	MaxReadMessagesCount uint32 `protobuf:"varint,1,opt,name=max_read_messages_count,json=maxReadMessagesCount,proto3" json:"max_read_messages_count,omitempty"`
	// Max size in bytes to give to client in one read request.
	MaxReadSize uint32 `protobuf:"varint,2,opt,name=max_read_size,json=maxReadSize,proto3" json:"max_read_size,omitempty"`
}

func (x *ReadParams) Reset() {
	*x = ReadParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadParams) ProtoMessage() {}

func (x *ReadParams) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadParams.ProtoReflect.Descriptor instead.
func (*ReadParams) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{8}
}

func (x *ReadParams) GetMaxReadMessagesCount() uint32 {
	if x != nil {
		return x.MaxReadMessagesCount
	}
	return 0
}

func (x *ReadParams) GetMaxReadSize() uint32 {
	if x != nil {
		return x.MaxReadSize
	}
	return 0
}

//*
// Message that is used for addressing read for commiting.
type CommitCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Assign identitifier of assigned partition from which read was done.
	AssignId uint64 `protobuf:"varint,1,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
	// Incremental identifier of concrete partition read batch.
	PartitionCookie uint64 `protobuf:"varint,2,opt,name=partition_cookie,json=partitionCookie,proto3" json:"partition_cookie,omitempty"`
}

func (x *CommitCookie) Reset() {
	*x = CommitCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCookie) ProtoMessage() {}

func (x *CommitCookie) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCookie.ProtoReflect.Descriptor instead.
func (*CommitCookie) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9}
}

func (x *CommitCookie) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

func (x *CommitCookie) GetPartitionCookie() uint64 {
	if x != nil {
		return x.PartitionCookie
	}
	return 0
}

type CommitOffsetRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignId    uint64 `protobuf:"varint,1,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
	StartOffset uint64 `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset   uint64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *CommitOffsetRange) Reset() {
	*x = CommitOffsetRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitOffsetRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOffsetRange) ProtoMessage() {}

func (x *CommitOffsetRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOffsetRange.ProtoReflect.Descriptor instead.
func (*CommitOffsetRange) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10}
}

func (x *CommitOffsetRange) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

func (x *CommitOffsetRange) GetStartOffset() uint64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *CommitOffsetRange) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

//*
// Message that represents concrete partition session.
type PartitionSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path of partition.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Cluster of topic instance.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Partition identifier. Explicit only for debug purposes.
	PartitionId int64 `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Partition group identifier. Explicit only for debug purposes.
	PartitionGroupId int64 `protobuf:"varint,4,opt,name=partition_group_id,json=partitionGroupId,proto3" json:"partition_group_id,omitempty"`
	// Identitifier of partition stream. Unique inside one RPC call.
	PartitionSessionId int64 `protobuf:"varint,6,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Opaque blob. Provide it with partition stream in state for session reconnects.
	ConnectionMeta []byte `protobuf:"bytes,7,opt,name=connection_meta,json=connectionMeta,proto3" json:"connection_meta,omitempty"`
}

func (x *PartitionSession) Reset() {
	*x = PartitionSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSession) ProtoMessage() {}

func (x *PartitionSession) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSession.ProtoReflect.Descriptor instead.
func (*PartitionSession) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{11}
}

func (x *PartitionSession) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PartitionSession) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *PartitionSession) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *PartitionSession) GetPartitionGroupId() int64 {
	if x != nil {
		return x.PartitionGroupId
	}
	return 0
}

func (x *PartitionSession) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *PartitionSession) GetConnectionMeta() []byte {
	if x != nil {
		return x.ConnectionMeta
	}
	return nil
}

//*
// Request for read session. Contains one of:
//      InitRequest - handshake request.
//      ReadRequest - request for data.
//      CommitRequest - request for commit of some read data.
//      StartPartitionSessionResponse - signal for server that client is ready to get data from partition.
//      StopPartitionSessionResponse - signal for server that client finished working with partition. Must be sent only after corresponding request from server.
//      PauseReadRequest - signal for server that client is not ready to get more data from this partition.
//      ResumeReadRequest - signal for server that client is ready to get more data from this partition.
//      PartitionSessionStatusRequest - request for session status
//      AddTopicRequest - request for add topic
//      RemoveTopicRequest - request for topic removal
//      UpdateTokenRequest - request to update auth token
type StreamingReadClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ClientMessage:
	//	*StreamingReadClientMessage_InitRequest_
	//	*StreamingReadClientMessage_ReadRequest_
	//	*StreamingReadClientMessage_StartPartitionSessionResponse_
	//	*StreamingReadClientMessage_CommitRequest_
	//	*StreamingReadClientMessage_StopPartitionSessionResponse_
	//	*StreamingReadClientMessage_PauseReadRequest_
	//	*StreamingReadClientMessage_ResumeReadRequest_
	//	*StreamingReadClientMessage_PartitionSessionStatusRequest_
	//	*StreamingReadClientMessage_AddTopicRequest_
	//	*StreamingReadClientMessage_RemoveTopicRequest_
	//	*StreamingReadClientMessage_UpdateTokenRequest
	ClientMessage isStreamingReadClientMessage_ClientMessage `protobuf_oneof:"client_message"`
}

func (x *StreamingReadClientMessage) Reset() {
	*x = StreamingReadClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage) ProtoMessage() {}

func (x *StreamingReadClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12}
}

func (m *StreamingReadClientMessage) GetClientMessage() isStreamingReadClientMessage_ClientMessage {
	if m != nil {
		return m.ClientMessage
	}
	return nil
}

func (x *StreamingReadClientMessage) GetInitRequest() *StreamingReadClientMessage_InitRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_InitRequest_); ok {
		return x.InitRequest
	}
	return nil
}

func (x *StreamingReadClientMessage) GetReadRequest() *StreamingReadClientMessage_ReadRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_ReadRequest_); ok {
		return x.ReadRequest
	}
	return nil
}

func (x *StreamingReadClientMessage) GetStartPartitionSessionResponse() *StreamingReadClientMessage_StartPartitionSessionResponse {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_StartPartitionSessionResponse_); ok {
		return x.StartPartitionSessionResponse
	}
	return nil
}

func (x *StreamingReadClientMessage) GetCommitRequest() *StreamingReadClientMessage_CommitRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_CommitRequest_); ok {
		return x.CommitRequest
	}
	return nil
}

func (x *StreamingReadClientMessage) GetStopPartitionSessionResponse() *StreamingReadClientMessage_StopPartitionSessionResponse {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_StopPartitionSessionResponse_); ok {
		return x.StopPartitionSessionResponse
	}
	return nil
}

func (x *StreamingReadClientMessage) GetPauseReadRequest() *StreamingReadClientMessage_PauseReadRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_PauseReadRequest_); ok {
		return x.PauseReadRequest
	}
	return nil
}

func (x *StreamingReadClientMessage) GetResumeReadRequest() *StreamingReadClientMessage_ResumeReadRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_ResumeReadRequest_); ok {
		return x.ResumeReadRequest
	}
	return nil
}

func (x *StreamingReadClientMessage) GetPartitionSessionStatusRequest() *StreamingReadClientMessage_PartitionSessionStatusRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_PartitionSessionStatusRequest_); ok {
		return x.PartitionSessionStatusRequest
	}
	return nil
}

func (x *StreamingReadClientMessage) GetAddTopicRequest() *StreamingReadClientMessage_AddTopicRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_AddTopicRequest_); ok {
		return x.AddTopicRequest
	}
	return nil
}

func (x *StreamingReadClientMessage) GetRemoveTopicRequest() *StreamingReadClientMessage_RemoveTopicRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_RemoveTopicRequest_); ok {
		return x.RemoveTopicRequest
	}
	return nil
}

func (x *StreamingReadClientMessage) GetUpdateTokenRequest() *UpdateTokenRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessage_UpdateTokenRequest); ok {
		return x.UpdateTokenRequest
	}
	return nil
}

type isStreamingReadClientMessage_ClientMessage interface {
	isStreamingReadClientMessage_ClientMessage()
}

type StreamingReadClientMessage_InitRequest_ struct {
	InitRequest *StreamingReadClientMessage_InitRequest `protobuf:"bytes,1,opt,name=init_request,json=initRequest,proto3,oneof"`
}

type StreamingReadClientMessage_ReadRequest_ struct {
	ReadRequest *StreamingReadClientMessage_ReadRequest `protobuf:"bytes,2,opt,name=read_request,json=readRequest,proto3,oneof"`
}

type StreamingReadClientMessage_StartPartitionSessionResponse_ struct {
	StartPartitionSessionResponse *StreamingReadClientMessage_StartPartitionSessionResponse `protobuf:"bytes,3,opt,name=start_partition_session_response,json=startPartitionSessionResponse,proto3,oneof"`
}

type StreamingReadClientMessage_CommitRequest_ struct {
	CommitRequest *StreamingReadClientMessage_CommitRequest `protobuf:"bytes,4,opt,name=commit_request,json=commitRequest,proto3,oneof"`
}

type StreamingReadClientMessage_StopPartitionSessionResponse_ struct {
	StopPartitionSessionResponse *StreamingReadClientMessage_StopPartitionSessionResponse `protobuf:"bytes,5,opt,name=stop_partition_session_response,json=stopPartitionSessionResponse,proto3,oneof"`
}

type StreamingReadClientMessage_PauseReadRequest_ struct {
	PauseReadRequest *StreamingReadClientMessage_PauseReadRequest `protobuf:"bytes,6,opt,name=pause_read_request,json=pauseReadRequest,proto3,oneof"`
}

type StreamingReadClientMessage_ResumeReadRequest_ struct {
	ResumeReadRequest *StreamingReadClientMessage_ResumeReadRequest `protobuf:"bytes,7,opt,name=resume_read_request,json=resumeReadRequest,proto3,oneof"`
}

type StreamingReadClientMessage_PartitionSessionStatusRequest_ struct {
	PartitionSessionStatusRequest *StreamingReadClientMessage_PartitionSessionStatusRequest `protobuf:"bytes,8,opt,name=partition_session_status_request,json=partitionSessionStatusRequest,proto3,oneof"`
}

type StreamingReadClientMessage_AddTopicRequest_ struct {
	AddTopicRequest *StreamingReadClientMessage_AddTopicRequest `protobuf:"bytes,9,opt,name=add_topic_request,json=addTopicRequest,proto3,oneof"`
}

type StreamingReadClientMessage_RemoveTopicRequest_ struct {
	RemoveTopicRequest *StreamingReadClientMessage_RemoveTopicRequest `protobuf:"bytes,10,opt,name=remove_topic_request,json=removeTopicRequest,proto3,oneof"`
}

type StreamingReadClientMessage_UpdateTokenRequest struct {
	UpdateTokenRequest *UpdateTokenRequest `protobuf:"bytes,11,opt,name=update_token_request,json=updateTokenRequest,proto3,oneof"`
}

func (*StreamingReadClientMessage_InitRequest_) isStreamingReadClientMessage_ClientMessage() {}

func (*StreamingReadClientMessage_ReadRequest_) isStreamingReadClientMessage_ClientMessage() {}

func (*StreamingReadClientMessage_StartPartitionSessionResponse_) isStreamingReadClientMessage_ClientMessage() {
}

func (*StreamingReadClientMessage_CommitRequest_) isStreamingReadClientMessage_ClientMessage() {}

func (*StreamingReadClientMessage_StopPartitionSessionResponse_) isStreamingReadClientMessage_ClientMessage() {
}

func (*StreamingReadClientMessage_PauseReadRequest_) isStreamingReadClientMessage_ClientMessage() {}

func (*StreamingReadClientMessage_ResumeReadRequest_) isStreamingReadClientMessage_ClientMessage() {}

func (*StreamingReadClientMessage_PartitionSessionStatusRequest_) isStreamingReadClientMessage_ClientMessage() {
}

func (*StreamingReadClientMessage_AddTopicRequest_) isStreamingReadClientMessage_ClientMessage() {}

func (*StreamingReadClientMessage_RemoveTopicRequest_) isStreamingReadClientMessage_ClientMessage() {}

func (*StreamingReadClientMessage_UpdateTokenRequest) isStreamingReadClientMessage_ClientMessage() {}

//*
// Response for read session. Contains one of :
//      InitResponse - handshake response from server.
//      ReadResponse - portion of data.
//      StartPartitionSessionRequest - command from server to create a partition partition session.
//      StopPartitionSessionRequest - command from server to destroy a partition partition session.
//      CommitResponse - acknowledgment for commit.
//      PartitionSessionStatusResponse - server response with partition session status.
//      PauseReadResponse - acknowledgment for pausing read from this partition.
//      ResumeReadResponse - acknowledgment for resuming read from this partition.
//      AddTopicResponse - acknowledgment of topic adding.
//      RemoveTopicResponse - acknowledgment of topic removal.
//      UpdateTokenResponse - acknowledgment of token update.
type StreamingReadServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server status of response.
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Issues if any.
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	// Types that are assignable to ServerMessage:
	//	*StreamingReadServerMessage_InitResponse_
	//	*StreamingReadServerMessage_ReadResponse_
	//	*StreamingReadServerMessage_StartPartitionSessionRequest_
	//	*StreamingReadServerMessage_StopPartitionSessionRequest_
	//	*StreamingReadServerMessage_CommitResponse_
	//	*StreamingReadServerMessage_PartitionSessionStatusResponse_
	//	*StreamingReadServerMessage_PauseReadResponse_
	//	*StreamingReadServerMessage_ResumeReadResponse_
	//	*StreamingReadServerMessage_AddTopicResponse_
	//	*StreamingReadServerMessage_RemoveTopicResponse_
	//	*StreamingReadServerMessage_UpdateTokenResponse
	ServerMessage isStreamingReadServerMessage_ServerMessage `protobuf_oneof:"server_message"`
}

func (x *StreamingReadServerMessage) Reset() {
	*x = StreamingReadServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage) ProtoMessage() {}

func (x *StreamingReadServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13}
}

func (x *StreamingReadServerMessage) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *StreamingReadServerMessage) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (m *StreamingReadServerMessage) GetServerMessage() isStreamingReadServerMessage_ServerMessage {
	if m != nil {
		return m.ServerMessage
	}
	return nil
}

func (x *StreamingReadServerMessage) GetInitResponse() *StreamingReadServerMessage_InitResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_InitResponse_); ok {
		return x.InitResponse
	}
	return nil
}

func (x *StreamingReadServerMessage) GetReadResponse() *StreamingReadServerMessage_ReadResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_ReadResponse_); ok {
		return x.ReadResponse
	}
	return nil
}

func (x *StreamingReadServerMessage) GetStartPartitionSessionRequest() *StreamingReadServerMessage_StartPartitionSessionRequest {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_StartPartitionSessionRequest_); ok {
		return x.StartPartitionSessionRequest
	}
	return nil
}

func (x *StreamingReadServerMessage) GetStopPartitionSessionRequest() *StreamingReadServerMessage_StopPartitionSessionRequest {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_StopPartitionSessionRequest_); ok {
		return x.StopPartitionSessionRequest
	}
	return nil
}

func (x *StreamingReadServerMessage) GetCommitResponse() *StreamingReadServerMessage_CommitResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_CommitResponse_); ok {
		return x.CommitResponse
	}
	return nil
}

func (x *StreamingReadServerMessage) GetPartitionSessionStatusResponse() *StreamingReadServerMessage_PartitionSessionStatusResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_PartitionSessionStatusResponse_); ok {
		return x.PartitionSessionStatusResponse
	}
	return nil
}

func (x *StreamingReadServerMessage) GetPauseReadResponse() *StreamingReadServerMessage_PauseReadResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_PauseReadResponse_); ok {
		return x.PauseReadResponse
	}
	return nil
}

func (x *StreamingReadServerMessage) GetResumeReadResponse() *StreamingReadServerMessage_ResumeReadResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_ResumeReadResponse_); ok {
		return x.ResumeReadResponse
	}
	return nil
}

func (x *StreamingReadServerMessage) GetAddTopicResponse() *StreamingReadServerMessage_AddTopicResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_AddTopicResponse_); ok {
		return x.AddTopicResponse
	}
	return nil
}

func (x *StreamingReadServerMessage) GetRemoveTopicResponse() *StreamingReadServerMessage_RemoveTopicResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_RemoveTopicResponse_); ok {
		return x.RemoveTopicResponse
	}
	return nil
}

func (x *StreamingReadServerMessage) GetUpdateTokenResponse() *UpdateTokenResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessage_UpdateTokenResponse); ok {
		return x.UpdateTokenResponse
	}
	return nil
}

type isStreamingReadServerMessage_ServerMessage interface {
	isStreamingReadServerMessage_ServerMessage()
}

type StreamingReadServerMessage_InitResponse_ struct {
	InitResponse *StreamingReadServerMessage_InitResponse `protobuf:"bytes,3,opt,name=init_response,json=initResponse,proto3,oneof"`
}

type StreamingReadServerMessage_ReadResponse_ struct {
	ReadResponse *StreamingReadServerMessage_ReadResponse `protobuf:"bytes,4,opt,name=read_response,json=readResponse,proto3,oneof"`
}

type StreamingReadServerMessage_StartPartitionSessionRequest_ struct {
	StartPartitionSessionRequest *StreamingReadServerMessage_StartPartitionSessionRequest `protobuf:"bytes,6,opt,name=start_partition_session_request,json=startPartitionSessionRequest,proto3,oneof"`
}

type StreamingReadServerMessage_StopPartitionSessionRequest_ struct {
	StopPartitionSessionRequest *StreamingReadServerMessage_StopPartitionSessionRequest `protobuf:"bytes,7,opt,name=stop_partition_session_request,json=stopPartitionSessionRequest,proto3,oneof"`
}

type StreamingReadServerMessage_CommitResponse_ struct {
	CommitResponse *StreamingReadServerMessage_CommitResponse `protobuf:"bytes,8,opt,name=commit_response,json=commitResponse,proto3,oneof"`
}

type StreamingReadServerMessage_PartitionSessionStatusResponse_ struct {
	PartitionSessionStatusResponse *StreamingReadServerMessage_PartitionSessionStatusResponse `protobuf:"bytes,9,opt,name=partition_session_status_response,json=partitionSessionStatusResponse,proto3,oneof"`
}

type StreamingReadServerMessage_PauseReadResponse_ struct {
	PauseReadResponse *StreamingReadServerMessage_PauseReadResponse `protobuf:"bytes,10,opt,name=pause_read_response,json=pauseReadResponse,proto3,oneof"`
}

type StreamingReadServerMessage_ResumeReadResponse_ struct {
	ResumeReadResponse *StreamingReadServerMessage_ResumeReadResponse `protobuf:"bytes,11,opt,name=resume_read_response,json=resumeReadResponse,proto3,oneof"`
}

type StreamingReadServerMessage_AddTopicResponse_ struct {
	AddTopicResponse *StreamingReadServerMessage_AddTopicResponse `protobuf:"bytes,12,opt,name=add_topic_response,json=addTopicResponse,proto3,oneof"`
}

type StreamingReadServerMessage_RemoveTopicResponse_ struct {
	RemoveTopicResponse *StreamingReadServerMessage_RemoveTopicResponse `protobuf:"bytes,13,opt,name=remove_topic_response,json=removeTopicResponse,proto3,oneof"`
}

type StreamingReadServerMessage_UpdateTokenResponse struct {
	UpdateTokenResponse *UpdateTokenResponse `protobuf:"bytes,14,opt,name=update_token_response,json=updateTokenResponse,proto3,oneof"`
}

func (*StreamingReadServerMessage_InitResponse_) isStreamingReadServerMessage_ServerMessage() {}

func (*StreamingReadServerMessage_ReadResponse_) isStreamingReadServerMessage_ServerMessage() {}

func (*StreamingReadServerMessage_StartPartitionSessionRequest_) isStreamingReadServerMessage_ServerMessage() {
}

func (*StreamingReadServerMessage_StopPartitionSessionRequest_) isStreamingReadServerMessage_ServerMessage() {
}

func (*StreamingReadServerMessage_CommitResponse_) isStreamingReadServerMessage_ServerMessage() {}

func (*StreamingReadServerMessage_PartitionSessionStatusResponse_) isStreamingReadServerMessage_ServerMessage() {
}

func (*StreamingReadServerMessage_PauseReadResponse_) isStreamingReadServerMessage_ServerMessage() {}

func (*StreamingReadServerMessage_ResumeReadResponse_) isStreamingReadServerMessage_ServerMessage() {}

func (*StreamingReadServerMessage_AddTopicResponse_) isStreamingReadServerMessage_ServerMessage() {}

func (*StreamingReadServerMessage_RemoveTopicResponse_) isStreamingReadServerMessage_ServerMessage() {
}

func (*StreamingReadServerMessage_UpdateTokenResponse) isStreamingReadServerMessage_ServerMessage() {}

//*
// Message that represens concrete partition partition stream.
type PartitionStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path of partition.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Cluster of topic instance.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Partition identifier. Explicit only for debug purposes.
	PartitionId int64 `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Partition group identifier. Explicit only for debug purposes.
	PartitionGroupId int64 `protobuf:"varint,4,opt,name=partition_group_id,json=partitionGroupId,proto3" json:"partition_group_id,omitempty"`
	// Identitifier of partition stream. Unique inside one RPC call.
	PartitionStreamId int64 `protobuf:"varint,6,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
	// Opaque blob. Provide it with partition stream in state for session reconnects.
	ConnectionMeta []byte `protobuf:"bytes,7,opt,name=connection_meta,json=connectionMeta,proto3" json:"connection_meta,omitempty"`
}

func (x *PartitionStream) Reset() {
	*x = PartitionStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionStream) ProtoMessage() {}

func (x *PartitionStream) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionStream.ProtoReflect.Descriptor instead.
func (*PartitionStream) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{14}
}

func (x *PartitionStream) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PartitionStream) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *PartitionStream) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *PartitionStream) GetPartitionGroupId() int64 {
	if x != nil {
		return x.PartitionGroupId
	}
	return 0
}

func (x *PartitionStream) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

func (x *PartitionStream) GetConnectionMeta() []byte {
	if x != nil {
		return x.ConnectionMeta
	}
	return nil
}

//*
// Request for read session. Contains one of :
//      Init - handshake request.
//      Read - request for data.
//      Commit - request for commit of some read data.
//      Start_read - signal for server that client is ready to get data from partition.
//      Released - signal for server that client finished working with partition. Must be sent only after corresponding Release request from server.
type MigrationStreamingReadClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*MigrationStreamingReadClientMessage_InitRequest_
	//	*MigrationStreamingReadClientMessage_Read_
	//	*MigrationStreamingReadClientMessage_StartRead_
	//	*MigrationStreamingReadClientMessage_Commit_
	//	*MigrationStreamingReadClientMessage_Released_
	//	*MigrationStreamingReadClientMessage_Status_
	Request isMigrationStreamingReadClientMessage_Request `protobuf_oneof:"request"`
	// User credentials if update is needed or empty string.
	Token []byte `protobuf:"bytes,20,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *MigrationStreamingReadClientMessage) Reset() {
	*x = MigrationStreamingReadClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadClientMessage) ProtoMessage() {}

func (x *MigrationStreamingReadClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadClientMessage) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15}
}

func (m *MigrationStreamingReadClientMessage) GetRequest() isMigrationStreamingReadClientMessage_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage) GetInitRequest() *MigrationStreamingReadClientMessage_InitRequest {
	if x, ok := x.GetRequest().(*MigrationStreamingReadClientMessage_InitRequest_); ok {
		return x.InitRequest
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage) GetRead() *MigrationStreamingReadClientMessage_Read {
	if x, ok := x.GetRequest().(*MigrationStreamingReadClientMessage_Read_); ok {
		return x.Read
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage) GetStartRead() *MigrationStreamingReadClientMessage_StartRead {
	if x, ok := x.GetRequest().(*MigrationStreamingReadClientMessage_StartRead_); ok {
		return x.StartRead
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage) GetCommit() *MigrationStreamingReadClientMessage_Commit {
	if x, ok := x.GetRequest().(*MigrationStreamingReadClientMessage_Commit_); ok {
		return x.Commit
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage) GetReleased() *MigrationStreamingReadClientMessage_Released {
	if x, ok := x.GetRequest().(*MigrationStreamingReadClientMessage_Released_); ok {
		return x.Released
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage) GetStatus() *MigrationStreamingReadClientMessage_Status {
	if x, ok := x.GetRequest().(*MigrationStreamingReadClientMessage_Status_); ok {
		return x.Status
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type isMigrationStreamingReadClientMessage_Request interface {
	isMigrationStreamingReadClientMessage_Request()
}

type MigrationStreamingReadClientMessage_InitRequest_ struct {
	InitRequest *MigrationStreamingReadClientMessage_InitRequest `protobuf:"bytes,1,opt,name=init_request,json=initRequest,proto3,oneof"`
}

type MigrationStreamingReadClientMessage_Read_ struct {
	Read *MigrationStreamingReadClientMessage_Read `protobuf:"bytes,2,opt,name=read,proto3,oneof"`
}

type MigrationStreamingReadClientMessage_StartRead_ struct {
	StartRead *MigrationStreamingReadClientMessage_StartRead `protobuf:"bytes,3,opt,name=start_read,json=startRead,proto3,oneof"`
}

type MigrationStreamingReadClientMessage_Commit_ struct {
	Commit *MigrationStreamingReadClientMessage_Commit `protobuf:"bytes,4,opt,name=commit,proto3,oneof"`
}

type MigrationStreamingReadClientMessage_Released_ struct {
	Released *MigrationStreamingReadClientMessage_Released `protobuf:"bytes,5,opt,name=released,proto3,oneof"`
}

type MigrationStreamingReadClientMessage_Status_ struct {
	Status *MigrationStreamingReadClientMessage_Status `protobuf:"bytes,6,opt,name=status,proto3,oneof"`
}

func (*MigrationStreamingReadClientMessage_InitRequest_) isMigrationStreamingReadClientMessage_Request() {
}

func (*MigrationStreamingReadClientMessage_Read_) isMigrationStreamingReadClientMessage_Request() {}

func (*MigrationStreamingReadClientMessage_StartRead_) isMigrationStreamingReadClientMessage_Request() {
}

func (*MigrationStreamingReadClientMessage_Commit_) isMigrationStreamingReadClientMessage_Request() {}

func (*MigrationStreamingReadClientMessage_Released_) isMigrationStreamingReadClientMessage_Request() {
}

func (*MigrationStreamingReadClientMessage_Status_) isMigrationStreamingReadClientMessage_Request() {}

//*
// Response for read session. Contains one of :
//      Inited - handshake response from server.
//      Batched_data - result of single read.
//      Committed - acknowledgment for commit.
//      Assigned - signal from server for assigning of partition.
//      Release - signal from server for releasing of partition.
type MigrationStreamingReadServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Ydb.StatusIds_StatusCode  `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	// Types that are assignable to Response:
	//	*MigrationStreamingReadServerMessage_InitResponse_
	//	*MigrationStreamingReadServerMessage_DataBatch_
	//	*MigrationStreamingReadServerMessage_Assigned_
	//	*MigrationStreamingReadServerMessage_Release_
	//	*MigrationStreamingReadServerMessage_Committed_
	//	*MigrationStreamingReadServerMessage_PartitionStatus_
	Response isMigrationStreamingReadServerMessage_Response `protobuf_oneof:"response"`
}

func (x *MigrationStreamingReadServerMessage) Reset() {
	*x = MigrationStreamingReadServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadServerMessage) ProtoMessage() {}

func (x *MigrationStreamingReadServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadServerMessage.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadServerMessage) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16}
}

func (x *MigrationStreamingReadServerMessage) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *MigrationStreamingReadServerMessage) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (m *MigrationStreamingReadServerMessage) GetResponse() isMigrationStreamingReadServerMessage_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage) GetInitResponse() *MigrationStreamingReadServerMessage_InitResponse {
	if x, ok := x.GetResponse().(*MigrationStreamingReadServerMessage_InitResponse_); ok {
		return x.InitResponse
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage) GetDataBatch() *MigrationStreamingReadServerMessage_DataBatch {
	if x, ok := x.GetResponse().(*MigrationStreamingReadServerMessage_DataBatch_); ok {
		return x.DataBatch
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage) GetAssigned() *MigrationStreamingReadServerMessage_Assigned {
	if x, ok := x.GetResponse().(*MigrationStreamingReadServerMessage_Assigned_); ok {
		return x.Assigned
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage) GetRelease() *MigrationStreamingReadServerMessage_Release {
	if x, ok := x.GetResponse().(*MigrationStreamingReadServerMessage_Release_); ok {
		return x.Release
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage) GetCommitted() *MigrationStreamingReadServerMessage_Committed {
	if x, ok := x.GetResponse().(*MigrationStreamingReadServerMessage_Committed_); ok {
		return x.Committed
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage) GetPartitionStatus() *MigrationStreamingReadServerMessage_PartitionStatus {
	if x, ok := x.GetResponse().(*MigrationStreamingReadServerMessage_PartitionStatus_); ok {
		return x.PartitionStatus
	}
	return nil
}

type isMigrationStreamingReadServerMessage_Response interface {
	isMigrationStreamingReadServerMessage_Response()
}

type MigrationStreamingReadServerMessage_InitResponse_ struct {
	InitResponse *MigrationStreamingReadServerMessage_InitResponse `protobuf:"bytes,3,opt,name=init_response,json=initResponse,proto3,oneof"`
}

type MigrationStreamingReadServerMessage_DataBatch_ struct {
	DataBatch *MigrationStreamingReadServerMessage_DataBatch `protobuf:"bytes,4,opt,name=data_batch,json=dataBatch,proto3,oneof"`
}

type MigrationStreamingReadServerMessage_Assigned_ struct {
	Assigned *MigrationStreamingReadServerMessage_Assigned `protobuf:"bytes,5,opt,name=assigned,proto3,oneof"`
}

type MigrationStreamingReadServerMessage_Release_ struct {
	Release *MigrationStreamingReadServerMessage_Release `protobuf:"bytes,6,opt,name=release,proto3,oneof"`
}

type MigrationStreamingReadServerMessage_Committed_ struct {
	Committed *MigrationStreamingReadServerMessage_Committed `protobuf:"bytes,7,opt,name=committed,proto3,oneof"`
}

type MigrationStreamingReadServerMessage_PartitionStatus_ struct {
	PartitionStatus *MigrationStreamingReadServerMessage_PartitionStatus `protobuf:"bytes,8,opt,name=partition_status,json=partitionStatus,proto3,oneof"`
}

func (*MigrationStreamingReadServerMessage_InitResponse_) isMigrationStreamingReadServerMessage_Response() {
}

func (*MigrationStreamingReadServerMessage_DataBatch_) isMigrationStreamingReadServerMessage_Response() {
}

func (*MigrationStreamingReadServerMessage_Assigned_) isMigrationStreamingReadServerMessage_Response() {
}

func (*MigrationStreamingReadServerMessage_Release_) isMigrationStreamingReadServerMessage_Response() {
}

func (*MigrationStreamingReadServerMessage_Committed_) isMigrationStreamingReadServerMessage_Response() {
}

func (*MigrationStreamingReadServerMessage_PartitionStatus_) isMigrationStreamingReadServerMessage_Response() {
}

//*
// Reading information request sent from client to server.
type ReadInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// List of topics that are beeing read.
	Topics []*Path `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	// If get_only_original == false then return info about mirrored topics too.
	GetOnlyOriginal bool `protobuf:"varint,3,opt,name=get_only_original,json=getOnlyOriginal,proto3" json:"get_only_original,omitempty"`
	// Consumer path that is reading specified topics.
	Consumer *Path `protobuf:"bytes,4,opt,name=consumer,proto3" json:"consumer,omitempty"`
}

func (x *ReadInfoRequest) Reset() {
	*x = ReadInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInfoRequest) ProtoMessage() {}

func (x *ReadInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInfoRequest.ProtoReflect.Descriptor instead.
func (*ReadInfoRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{17}
}

func (x *ReadInfoRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *ReadInfoRequest) GetTopics() []*Path {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *ReadInfoRequest) GetGetOnlyOriginal() bool {
	if x != nil {
		return x.GetOnlyOriginal
	}
	return false
}

func (x *ReadInfoRequest) GetConsumer() *Path {
	if x != nil {
		return x.Consumer
	}
	return nil
}

//*
// Reading information response sent from server to client.
type ReadInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *ReadInfoResponse) Reset() {
	*x = ReadInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInfoResponse) ProtoMessage() {}

func (x *ReadInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInfoResponse.ProtoReflect.Descriptor instead.
func (*ReadInfoResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{18}
}

func (x *ReadInfoResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

//*
// Reading information message that will be inside ReadInfoResponse.operation.
type ReadInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of topics info.
	Topics []*ReadInfoResult_TopicInfo `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *ReadInfoResult) Reset() {
	*x = ReadInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInfoResult) ProtoMessage() {}

func (x *ReadInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInfoResult.ProtoReflect.Descriptor instead.
func (*ReadInfoResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{19}
}

func (x *ReadInfoResult) GetTopics() []*ReadInfoResult_TopicInfo {
	if x != nil {
		return x.Topics
	}
	return nil
}

//*
// Drop topic request sent from client to server.
type DropTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DropTopicRequest) Reset() {
	*x = DropTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTopicRequest) ProtoMessage() {}

func (x *DropTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTopicRequest.ProtoReflect.Descriptor instead.
func (*DropTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{20}
}

func (x *DropTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *DropTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

//*
// Drop topic response sent from server to client. If topic is not existed then response status will be "SCHEME_ERROR".
type DropTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DropTopicResponse) Reset() {
	*x = DropTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTopicResponse) ProtoMessage() {}

func (x *DropTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTopicResponse.ProtoReflect.Descriptor instead.
func (*DropTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{21}
}

func (x *DropTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

//*
// Drop topic result message that will be inside DropTopicResponse.operation.
type DropTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DropTopicResult) Reset() {
	*x = DropTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTopicResult) ProtoMessage() {}

func (x *DropTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTopicResult.ProtoReflect.Descriptor instead.
func (*DropTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{22}
}

//*
// Credentials settings
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credentials:
	//	*Credentials_OauthToken
	//	*Credentials_JwtParams
	//	*Credentials_Iam_
	Credentials isCredentials_Credentials `protobuf_oneof:"credentials"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{23}
}

func (m *Credentials) GetCredentials() isCredentials_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *Credentials) GetOauthToken() string {
	if x, ok := x.GetCredentials().(*Credentials_OauthToken); ok {
		return x.OauthToken
	}
	return ""
}

func (x *Credentials) GetJwtParams() string {
	if x, ok := x.GetCredentials().(*Credentials_JwtParams); ok {
		return x.JwtParams
	}
	return ""
}

func (x *Credentials) GetIam() *Credentials_Iam {
	if x, ok := x.GetCredentials().(*Credentials_Iam_); ok {
		return x.Iam
	}
	return nil
}

type isCredentials_Credentials interface {
	isCredentials_Credentials()
}

type Credentials_OauthToken struct {
	OauthToken string `protobuf:"bytes,1,opt,name=oauth_token,json=oauthToken,proto3,oneof"`
}

type Credentials_JwtParams struct {
	JwtParams string `protobuf:"bytes,2,opt,name=jwt_params,json=jwtParams,proto3,oneof"`
}

type Credentials_Iam_ struct {
	Iam *Credentials_Iam `protobuf:"bytes,3,opt,name=iam,proto3,oneof"`
}

func (*Credentials_OauthToken) isCredentials_Credentials() {}

func (*Credentials_JwtParams) isCredentials_Credentials() {}

func (*Credentials_Iam_) isCredentials_Credentials() {}

//*
// Message for describing topic internals.
type TopicSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How many partitions in topic. Must less than database limit. Default limit - 10.
	PartitionsCount int32 `protobuf:"varint,1,opt,name=partitions_count,json=partitionsCount,proto3" json:"partitions_count,omitempty"`
	// Types that are assignable to Retention:
	//	*TopicSettings_RetentionPeriodMs
	//	*TopicSettings_RetentionStorageBytes
	Retention isTopicSettings_Retention `protobuf_oneof:"retention"`
	// How long last written seqno for message group should be stored. Must be greater then retention_period_ms and less then limit for this database.  Default limit - 16 days.
	MessageGroupSeqnoRetentionPeriodMs int64 `protobuf:"varint,12,opt,name=message_group_seqno_retention_period_ms,json=messageGroupSeqnoRetentionPeriodMs,proto3" json:"message_group_seqno_retention_period_ms,omitempty"`
	// How many last written seqno for various message groups should be stored per partition. Must be less than limit for this database.  Default limit - 6*10^6 values.
	MaxPartitionMessageGroupsSeqnoStored int64 `protobuf:"varint,13,opt,name=max_partition_message_groups_seqno_stored,json=maxPartitionMessageGroupsSeqnoStored,proto3" json:"max_partition_message_groups_seqno_stored,omitempty"`
	// Max format version that is allowed for writers. Must be value from enum FormatVersion.
	// Writes with greater format version are forbiden.
	SupportedFormat TopicSettings_Format `protobuf:"varint,3,opt,name=supported_format,json=supportedFormat,proto3,enum=Ydb.PersQueue.V1.TopicSettings_Format" json:"supported_format,omitempty"`
	// List of allowed codecs for writers.
	// Writes with codec not from this list are forbiden.
	SupportedCodecs []Codec `protobuf:"varint,4,rep,packed,name=supported_codecs,json=supportedCodecs,proto3,enum=Ydb.PersQueue.V1.Codec" json:"supported_codecs,omitempty"`
	// Max storage usage for each topic's partition. Must be less than database limit. Default limit - 130 GB.
	MaxPartitionStorageSize int64 `protobuf:"varint,5,opt,name=max_partition_storage_size,json=maxPartitionStorageSize,proto3" json:"max_partition_storage_size,omitempty"`
	// Partition write speed in bytes per second. Must be less than database limit. Default limit - 1 MB/s.
	MaxPartitionWriteSpeed int64 `protobuf:"varint,6,opt,name=max_partition_write_speed,json=maxPartitionWriteSpeed,proto3" json:"max_partition_write_speed,omitempty"`
	// Burst size for write in partition, in bytes. Must be less than database limit. Default limit - 1 MB.
	MaxPartitionWriteBurst int64 `protobuf:"varint,7,opt,name=max_partition_write_burst,json=maxPartitionWriteBurst,proto3" json:"max_partition_write_burst,omitempty"`
	// Disallows client writes. Used for mirrored topics in federation.
	ClientWriteDisabled bool `protobuf:"varint,8,opt,name=client_write_disabled,json=clientWriteDisabled,proto3" json:"client_write_disabled,omitempty"`
	// List of consumer read rules for this topic.
	ReadRules []*TopicSettings_ReadRule `protobuf:"bytes,9,rep,name=read_rules,json=readRules,proto3" json:"read_rules,omitempty"`
	// User and server attributes of topic. Server attributes starts from "_" and will be validated by server.
	Attributes map[string]string `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// remote mirror rule for this topic.
	RemoteMirrorRule *TopicSettings_RemoteMirrorRule `protobuf:"bytes,11,opt,name=remote_mirror_rule,json=remoteMirrorRule,proto3" json:"remote_mirror_rule,omitempty"`
}

func (x *TopicSettings) Reset() {
	*x = TopicSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSettings) ProtoMessage() {}

func (x *TopicSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSettings.ProtoReflect.Descriptor instead.
func (*TopicSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{24}
}

func (x *TopicSettings) GetPartitionsCount() int32 {
	if x != nil {
		return x.PartitionsCount
	}
	return 0
}

func (m *TopicSettings) GetRetention() isTopicSettings_Retention {
	if m != nil {
		return m.Retention
	}
	return nil
}

func (x *TopicSettings) GetRetentionPeriodMs() int64 {
	if x, ok := x.GetRetention().(*TopicSettings_RetentionPeriodMs); ok {
		return x.RetentionPeriodMs
	}
	return 0
}

func (x *TopicSettings) GetRetentionStorageBytes() int64 {
	if x, ok := x.GetRetention().(*TopicSettings_RetentionStorageBytes); ok {
		return x.RetentionStorageBytes
	}
	return 0
}

func (x *TopicSettings) GetMessageGroupSeqnoRetentionPeriodMs() int64 {
	if x != nil {
		return x.MessageGroupSeqnoRetentionPeriodMs
	}
	return 0
}

func (x *TopicSettings) GetMaxPartitionMessageGroupsSeqnoStored() int64 {
	if x != nil {
		return x.MaxPartitionMessageGroupsSeqnoStored
	}
	return 0
}

func (x *TopicSettings) GetSupportedFormat() TopicSettings_Format {
	if x != nil {
		return x.SupportedFormat
	}
	return TopicSettings_FORMAT_UNSPECIFIED
}

func (x *TopicSettings) GetSupportedCodecs() []Codec {
	if x != nil {
		return x.SupportedCodecs
	}
	return nil
}

func (x *TopicSettings) GetMaxPartitionStorageSize() int64 {
	if x != nil {
		return x.MaxPartitionStorageSize
	}
	return 0
}

func (x *TopicSettings) GetMaxPartitionWriteSpeed() int64 {
	if x != nil {
		return x.MaxPartitionWriteSpeed
	}
	return 0
}

func (x *TopicSettings) GetMaxPartitionWriteBurst() int64 {
	if x != nil {
		return x.MaxPartitionWriteBurst
	}
	return 0
}

func (x *TopicSettings) GetClientWriteDisabled() bool {
	if x != nil {
		return x.ClientWriteDisabled
	}
	return false
}

func (x *TopicSettings) GetReadRules() []*TopicSettings_ReadRule {
	if x != nil {
		return x.ReadRules
	}
	return nil
}

func (x *TopicSettings) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *TopicSettings) GetRemoteMirrorRule() *TopicSettings_RemoteMirrorRule {
	if x != nil {
		return x.RemoteMirrorRule
	}
	return nil
}

type isTopicSettings_Retention interface {
	isTopicSettings_Retention()
}

type TopicSettings_RetentionPeriodMs struct {
	// How long data in partition should be stored. Must be greater than 0 and less than limit for this database.
	// Default limit - 36 hours.
	RetentionPeriodMs int64 `protobuf:"varint,2,opt,name=retention_period_ms,json=retentionPeriodMs,proto3,oneof"`
}

type TopicSettings_RetentionStorageBytes struct {
	// How much data in partition should be stored. Must be greater than 0 and less than limit for this database.
	RetentionStorageBytes int64 `protobuf:"varint,14,opt,name=retention_storage_bytes,json=retentionStorageBytes,proto3,oneof"`
}

func (*TopicSettings_RetentionPeriodMs) isTopicSettings_Retention() {}

func (*TopicSettings_RetentionStorageBytes) isTopicSettings_Retention() {}

//*
// Create topic request sent from client to server.
type CreateTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Topic settings.
	Settings *TopicSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *CreateTopicRequest) Reset() {
	*x = CreateTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicRequest) ProtoMessage() {}

func (x *CreateTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicRequest.ProtoReflect.Descriptor instead.
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{25}
}

func (x *CreateTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *CreateTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateTopicRequest) GetSettings() *TopicSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

//*
// Create topic response sent from server to client. If topic is already exists then response status will be "ALREADY_EXISTS".
type CreateTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *CreateTopicResponse) Reset() {
	*x = CreateTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicResponse) ProtoMessage() {}

func (x *CreateTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicResponse.ProtoReflect.Descriptor instead.
func (*CreateTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{26}
}

func (x *CreateTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

//*
// Create topic result message that will be inside CreateTopicResponse.operation.
type CreateTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTopicResult) Reset() {
	*x = CreateTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicResult) ProtoMessage() {}

func (x *CreateTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicResult.ProtoReflect.Descriptor instead.
func (*CreateTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{27}
}

//*
// Update existing topic request sent from client to server.
type AlterTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// New topic settings to be set. All options inside should be set despite same value.
	Settings *TopicSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *AlterTopicRequest) Reset() {
	*x = AlterTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTopicRequest) ProtoMessage() {}

func (x *AlterTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTopicRequest.ProtoReflect.Descriptor instead.
func (*AlterTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{28}
}

func (x *AlterTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *AlterTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AlterTopicRequest) GetSettings() *TopicSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

//*
// Update topic response sent from server to client.
type AlterTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *AlterTopicResponse) Reset() {
	*x = AlterTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTopicResponse) ProtoMessage() {}

func (x *AlterTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTopicResponse.ProtoReflect.Descriptor instead.
func (*AlterTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{29}
}

func (x *AlterTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

//*
// Update topic result message that will be inside UpdateTopicResponse.operation.
type AlterTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AlterTopicResult) Reset() {
	*x = AlterTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTopicResult) ProtoMessage() {}

func (x *AlterTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTopicResult.ProtoReflect.Descriptor instead.
func (*AlterTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{30}
}

//*
// Add read rules for existing topic request.
type AddReadRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// read rules to add
	ReadRule *TopicSettings_ReadRule `protobuf:"bytes,3,opt,name=read_rule,json=readRule,proto3" json:"read_rule,omitempty"`
}

func (x *AddReadRuleRequest) Reset() {
	*x = AddReadRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReadRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReadRuleRequest) ProtoMessage() {}

func (x *AddReadRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReadRuleRequest.ProtoReflect.Descriptor instead.
func (*AddReadRuleRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{31}
}

func (x *AddReadRuleRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *AddReadRuleRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddReadRuleRequest) GetReadRule() *TopicSettings_ReadRule {
	if x != nil {
		return x.ReadRule
	}
	return nil
}

//*
// Add read rules for existing topic response.
type AddReadRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *AddReadRuleResponse) Reset() {
	*x = AddReadRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReadRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReadRuleResponse) ProtoMessage() {}

func (x *AddReadRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReadRuleResponse.ProtoReflect.Descriptor instead.
func (*AddReadRuleResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{32}
}

func (x *AddReadRuleResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

//*
// Add read rules result message that will be inside AddReadRuleReponse.operation.
type AddReadRuleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddReadRuleResult) Reset() {
	*x = AddReadRuleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReadRuleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReadRuleResult) ProtoMessage() {}

func (x *AddReadRuleResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReadRuleResult.ProtoReflect.Descriptor instead.
func (*AddReadRuleResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{33}
}

//*
// Remove read rules request for existing topic.
type RemoveReadRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// read rules to remove. Only consumer names
	ConsumerName string `protobuf:"bytes,3,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
}

func (x *RemoveReadRuleRequest) Reset() {
	*x = RemoveReadRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReadRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReadRuleRequest) ProtoMessage() {}

func (x *RemoveReadRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReadRuleRequest.ProtoReflect.Descriptor instead.
func (*RemoveReadRuleRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{34}
}

func (x *RemoveReadRuleRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *RemoveReadRuleRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RemoveReadRuleRequest) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

//*
// Remove read rules response for existing topic.
type RemoveReadRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *RemoveReadRuleResponse) Reset() {
	*x = RemoveReadRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReadRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReadRuleResponse) ProtoMessage() {}

func (x *RemoveReadRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReadRuleResponse.ProtoReflect.Descriptor instead.
func (*RemoveReadRuleResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{35}
}

func (x *RemoveReadRuleResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

//*
// Remove read rules result message that will be inside RemoveReadRuleReponse.operation.
type RemoveReadRuleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveReadRuleResult) Reset() {
	*x = RemoveReadRuleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReadRuleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReadRuleResult) ProtoMessage() {}

func (x *RemoveReadRuleResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReadRuleResult.ProtoReflect.Descriptor instead.
func (*RemoveReadRuleResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{36}
}

//*
// Describe topic request sent from client to server.
type DescribeTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DescribeTopicRequest) Reset() {
	*x = DescribeTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopicRequest) ProtoMessage() {}

func (x *DescribeTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopicRequest.ProtoReflect.Descriptor instead.
func (*DescribeTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{37}
}

func (x *DescribeTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *DescribeTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

//*
// Describe topic response sent from server to client. If topic is not existed then response status will be "SCHEME_ERROR".
type DescribeTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DescribeTopicResponse) Reset() {
	*x = DescribeTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopicResponse) ProtoMessage() {}

func (x *DescribeTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopicResponse.ProtoReflect.Descriptor instead.
func (*DescribeTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{38}
}

func (x *DescribeTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

//*
// Describe topic result message that will be inside DescribeTopicResponse.operation.
type DescribeTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path.
	Self *Ydb_Scheme.Entry `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	// Settings of topic.
	Settings *TopicSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *DescribeTopicResult) Reset() {
	*x = DescribeTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopicResult) ProtoMessage() {}

func (x *DescribeTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopicResult.ProtoReflect.Descriptor instead.
func (*DescribeTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{39}
}

func (x *DescribeTopicResult) GetSelf() *Ydb_Scheme.Entry {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *DescribeTopicResult) GetSettings() *TopicSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// Handshake request that must be sent to server first.
type StreamingWriteClientMessage_InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of topic to write to.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// message group identifier of client data stream a.k.a. sourceId.
	MessageGroupId string `protobuf:"bytes,2,opt,name=message_group_id,json=messageGroupId,proto3" json:"message_group_id,omitempty"`
	// Some user metadata attached to this write session.
	SessionMeta map[string]string `protobuf:"bytes,3,rep,name=session_meta,json=sessionMeta,proto3" json:"session_meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Partition group to write to.
	// Zero means any group.
	PartitionGroupId          int64  `protobuf:"varint,4,opt,name=partition_group_id,json=partitionGroupId,proto3" json:"partition_group_id,omitempty"`
	MaxSupportedFormatVersion int64  `protobuf:"varint,5,opt,name=max_supported_format_version,json=maxSupportedFormatVersion,proto3" json:"max_supported_format_version,omitempty"`
	SessionId                 string `protobuf:"bytes,100,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 0 for first init message and incremental value for connect retries. Used for server logging.
	ConnectionAttempt int64 `protobuf:"varint,101,opt,name=connection_attempt,json=connectionAttempt,proto3" json:"connection_attempt,omitempty"`
	// Opaque blob. Take last one from previous connect.
	ConnectionMeta []byte `protobuf:"bytes,102,opt,name=connection_meta,json=connectionMeta,proto3" json:"connection_meta,omitempty"`
	// Optinal preferred cluster name. Sever will close session If preferred cluster is not server cluster and preferred cluster is enabled after delay TPQConfig::CloseClientSessionWithEnabledRemotePreferredClusterDelaySec
	PreferredCluster string `protobuf:"bytes,103,opt,name=preferred_cluster,json=preferredCluster,proto3" json:"preferred_cluster,omitempty"`
	// Sanity check option. When no writing activity is done in idle_timeout_sec seconds, then session will be destroyed. Zero means infinity.
	IdleTimeoutMs int64 `protobuf:"varint,200,opt,name=idle_timeout_ms,json=idleTimeoutMs,proto3" json:"idle_timeout_ms,omitempty"`
}

func (x *StreamingWriteClientMessage_InitRequest) Reset() {
	*x = StreamingWriteClientMessage_InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteClientMessage_InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteClientMessage_InitRequest) ProtoMessage() {}

func (x *StreamingWriteClientMessage_InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteClientMessage_InitRequest.ProtoReflect.Descriptor instead.
func (*StreamingWriteClientMessage_InitRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{4, 0}
}

func (x *StreamingWriteClientMessage_InitRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StreamingWriteClientMessage_InitRequest) GetMessageGroupId() string {
	if x != nil {
		return x.MessageGroupId
	}
	return ""
}

func (x *StreamingWriteClientMessage_InitRequest) GetSessionMeta() map[string]string {
	if x != nil {
		return x.SessionMeta
	}
	return nil
}

func (x *StreamingWriteClientMessage_InitRequest) GetPartitionGroupId() int64 {
	if x != nil {
		return x.PartitionGroupId
	}
	return 0
}

func (x *StreamingWriteClientMessage_InitRequest) GetMaxSupportedFormatVersion() int64 {
	if x != nil {
		return x.MaxSupportedFormatVersion
	}
	return 0
}

func (x *StreamingWriteClientMessage_InitRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamingWriteClientMessage_InitRequest) GetConnectionAttempt() int64 {
	if x != nil {
		return x.ConnectionAttempt
	}
	return 0
}

func (x *StreamingWriteClientMessage_InitRequest) GetConnectionMeta() []byte {
	if x != nil {
		return x.ConnectionMeta
	}
	return nil
}

func (x *StreamingWriteClientMessage_InitRequest) GetPreferredCluster() string {
	if x != nil {
		return x.PreferredCluster
	}
	return ""
}

func (x *StreamingWriteClientMessage_InitRequest) GetIdleTimeoutMs() int64 {
	if x != nil {
		return x.IdleTimeoutMs
	}
	return 0
}

// Represents portion of client messages.
type StreamingWriteClientMessage_WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence numbers of messages in order that client will provide to server.
	SequenceNumbers []int64 `protobuf:"varint,2,rep,packed,name=sequence_numbers,json=sequenceNumbers,proto3" json:"sequence_numbers,omitempty"`
	// Message creation timestamps for client messages.
	// Same size as sequence_numbers.
	CreatedAtMs []int64 `protobuf:"varint,3,rep,packed,name=created_at_ms,json=createdAtMs,proto3" json:"created_at_ms,omitempty"`
	// Message creation timestamps for client messages.
	// Same size as sequence_numbers.
	SentAtMs []int64 `protobuf:"varint,4,rep,packed,name=sent_at_ms,json=sentAtMs,proto3" json:"sent_at_ms,omitempty"`
	// Client message sizes.
	// Same size as sequence_numbers.
	MessageSizes      []int64 `protobuf:"varint,5,rep,packed,name=message_sizes,json=messageSizes,proto3" json:"message_sizes,omitempty"`
	BlocksOffsets     []int64 `protobuf:"varint,6,rep,packed,name=blocks_offsets,json=blocksOffsets,proto3" json:"blocks_offsets,omitempty"`
	BlocksPartNumbers []int64 `protobuf:"varint,7,rep,packed,name=blocks_part_numbers,json=blocksPartNumbers,proto3" json:"blocks_part_numbers,omitempty"`
	// How many complete messages and imcomplete messages end parts (one at most) this block contains
	BlocksMessageCounts     []int64 `protobuf:"varint,8,rep,packed,name=blocks_message_counts,json=blocksMessageCounts,proto3" json:"blocks_message_counts,omitempty"`
	BlocksUncompressedSizes []int64 `protobuf:"varint,9,rep,packed,name=blocks_uncompressed_sizes,json=blocksUncompressedSizes,proto3" json:"blocks_uncompressed_sizes,omitempty"`
	// In block format version 0 each byte contains only block codec identifier
	BlocksHeaders [][]byte `protobuf:"bytes,10,rep,name=blocks_headers,json=blocksHeaders,proto3" json:"blocks_headers,omitempty"`
	BlocksData    [][]byte `protobuf:"bytes,11,rep,name=blocks_data,json=blocksData,proto3" json:"blocks_data,omitempty"`
}

func (x *StreamingWriteClientMessage_WriteRequest) Reset() {
	*x = StreamingWriteClientMessage_WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteClientMessage_WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteClientMessage_WriteRequest) ProtoMessage() {}

func (x *StreamingWriteClientMessage_WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteClientMessage_WriteRequest.ProtoReflect.Descriptor instead.
func (*StreamingWriteClientMessage_WriteRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{4, 1}
}

func (x *StreamingWriteClientMessage_WriteRequest) GetSequenceNumbers() []int64 {
	if x != nil {
		return x.SequenceNumbers
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetCreatedAtMs() []int64 {
	if x != nil {
		return x.CreatedAtMs
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetSentAtMs() []int64 {
	if x != nil {
		return x.SentAtMs
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetMessageSizes() []int64 {
	if x != nil {
		return x.MessageSizes
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksOffsets() []int64 {
	if x != nil {
		return x.BlocksOffsets
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksPartNumbers() []int64 {
	if x != nil {
		return x.BlocksPartNumbers
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksMessageCounts() []int64 {
	if x != nil {
		return x.BlocksMessageCounts
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksUncompressedSizes() []int64 {
	if x != nil {
		return x.BlocksUncompressedSizes
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksHeaders() [][]byte {
	if x != nil {
		return x.BlocksHeaders
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksData() [][]byte {
	if x != nil {
		return x.BlocksData
	}
	return nil
}

// Response for handshake.
type StreamingWriteServerMessage_InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last persisted message's sequence number for this message group.
	LastSequenceNumber int64 `protobuf:"varint,1,opt,name=last_sequence_number,json=lastSequenceNumber,proto3" json:"last_sequence_number,omitempty"`
	// Unique identifier of write session. Used for debug purposes.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Path of topic that matched for this write session. Used for debug purposes, will be the same as in Init request from client.
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	// Write session is established to this cluster. Client data will be in instance of topic in this cluster.
	Cluster string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Identifier of partition that is matched for this write session.
	PartitionId int64 `protobuf:"varint,5,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Block (see StreamingWriteClientMessage.WriteRequest.blocks_data) format version supported by server or configured for a topic. Client must write data only with them.
	BlockFormatVersion int64 `protobuf:"varint,6,opt,name=block_format_version,json=blockFormatVersion,proto3" json:"block_format_version,omitempty"`
	// Client can only use compression codecs from this set to write messages to topic, session will be closed with BAD_REQUEST otherwise.
	SupportedCodecs []Codec `protobuf:"varint,10,rep,packed,name=supported_codecs,json=supportedCodecs,proto3,enum=Ydb.PersQueue.V1.Codec" json:"supported_codecs,omitempty"`
	// Maximal flush window size choosed by server. Size of uncompressed data not sended to server must not be bigger than flush window size.
	// In other words, this is maximal size of gap inside uncompressed data, which is not sended to server yet.
	MaxFlushWindowSize int64 `protobuf:"varint,7,opt,name=max_flush_window_size,json=maxFlushWindowSize,proto3" json:"max_flush_window_size,omitempty"` // will be 2048kb
	// How big blocks per stream could be(in uncompressed size). When block contains more than max_block_size of uncompressed data - block must be truncated.
	MaxBlockSize int64 `protobuf:"varint,8,opt,name=max_block_size,json=maxBlockSize,proto3" json:"max_block_size,omitempty"` // will be 512kb
	// Opaque blob, used for fast reconnects.
	ConnectionMeta []byte `protobuf:"bytes,9,opt,name=connection_meta,json=connectionMeta,proto3" json:"connection_meta,omitempty"`
}

func (x *StreamingWriteServerMessage_InitResponse) Reset() {
	*x = StreamingWriteServerMessage_InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteServerMessage_InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteServerMessage_InitResponse) ProtoMessage() {}

func (x *StreamingWriteServerMessage_InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteServerMessage_InitResponse.ProtoReflect.Descriptor instead.
func (*StreamingWriteServerMessage_InitResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{5, 0}
}

func (x *StreamingWriteServerMessage_InitResponse) GetLastSequenceNumber() int64 {
	if x != nil {
		return x.LastSequenceNumber
	}
	return 0
}

func (x *StreamingWriteServerMessage_InitResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamingWriteServerMessage_InitResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StreamingWriteServerMessage_InitResponse) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *StreamingWriteServerMessage_InitResponse) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *StreamingWriteServerMessage_InitResponse) GetBlockFormatVersion() int64 {
	if x != nil {
		return x.BlockFormatVersion
	}
	return 0
}

func (x *StreamingWriteServerMessage_InitResponse) GetSupportedCodecs() []Codec {
	if x != nil {
		return x.SupportedCodecs
	}
	return nil
}

func (x *StreamingWriteServerMessage_InitResponse) GetMaxFlushWindowSize() int64 {
	if x != nil {
		return x.MaxFlushWindowSize
	}
	return 0
}

func (x *StreamingWriteServerMessage_InitResponse) GetMaxBlockSize() int64 {
	if x != nil {
		return x.MaxBlockSize
	}
	return 0
}

func (x *StreamingWriteServerMessage_InitResponse) GetConnectionMeta() []byte {
	if x != nil {
		return x.ConnectionMeta
	}
	return nil
}

// Message that represents acknowledgment for sequence of client messages. This sequence is persisted together so write statistics is for messages batch.
type StreamingWriteServerMessage_BatchWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence numbers of persisted client messages.
	SequenceNumbers []int64 `protobuf:"varint,1,rep,packed,name=sequence_numbers,json=sequenceNumbers,proto3" json:"sequence_numbers,omitempty"`
	// Assigned partition offsets.
	// Zero for skipped messages.
	Offsets []int64 `protobuf:"varint,2,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
	// Per message flag. False if message is written for the first time and True otherwise.
	AlreadyWritten []bool `protobuf:"varint,3,rep,packed,name=already_written,json=alreadyWritten,proto3" json:"already_written,omitempty"`
	// Assigned partition for all client messages inside this batch.
	PartitionId int64 `protobuf:"varint,4,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Write statistics for this sequence of client messages.
	WriteStatistics *StreamingWriteServerMessage_WriteStatistics `protobuf:"bytes,5,opt,name=write_statistics,json=writeStatistics,proto3" json:"write_statistics,omitempty"`
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) Reset() {
	*x = StreamingWriteServerMessage_BatchWriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteServerMessage_BatchWriteResponse) ProtoMessage() {}

func (x *StreamingWriteServerMessage_BatchWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteServerMessage_BatchWriteResponse.ProtoReflect.Descriptor instead.
func (*StreamingWriteServerMessage_BatchWriteResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{5, 1}
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) GetSequenceNumbers() []int64 {
	if x != nil {
		return x.SequenceNumbers
	}
	return nil
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) GetOffsets() []int64 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) GetAlreadyWritten() []bool {
	if x != nil {
		return x.AlreadyWritten
	}
	return nil
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) GetWriteStatistics() *StreamingWriteServerMessage_WriteStatistics {
	if x != nil {
		return x.WriteStatistics
	}
	return nil
}

// Message with write statistics.
type StreamingWriteServerMessage_WriteStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time spent in persisting of data.
	PersistDurationMs int64 `protobuf:"varint,1,opt,name=persist_duration_ms,json=persistDurationMs,proto3" json:"persist_duration_ms,omitempty"`
	// Time spent in queue before persisting.
	QueuedInPartitionDurationMs int64 `protobuf:"varint,2,opt,name=queued_in_partition_duration_ms,json=queuedInPartitionDurationMs,proto3" json:"queued_in_partition_duration_ms,omitempty"`
	// Time spent awaiting for partition write quota.
	ThrottledOnPartitionDurationMs int64 `protobuf:"varint,3,opt,name=throttled_on_partition_duration_ms,json=throttledOnPartitionDurationMs,proto3" json:"throttled_on_partition_duration_ms,omitempty"`
	// Time spent awaiting for topic write quota.
	ThrottledOnTopicDurationMs int64 `protobuf:"varint,4,opt,name=throttled_on_topic_duration_ms,json=throttledOnTopicDurationMs,proto3" json:"throttled_on_topic_duration_ms,omitempty"`
}

func (x *StreamingWriteServerMessage_WriteStatistics) Reset() {
	*x = StreamingWriteServerMessage_WriteStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteServerMessage_WriteStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteServerMessage_WriteStatistics) ProtoMessage() {}

func (x *StreamingWriteServerMessage_WriteStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteServerMessage_WriteStatistics.ProtoReflect.Descriptor instead.
func (*StreamingWriteServerMessage_WriteStatistics) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{5, 2}
}

func (x *StreamingWriteServerMessage_WriteStatistics) GetPersistDurationMs() int64 {
	if x != nil {
		return x.PersistDurationMs
	}
	return 0
}

func (x *StreamingWriteServerMessage_WriteStatistics) GetQueuedInPartitionDurationMs() int64 {
	if x != nil {
		return x.QueuedInPartitionDurationMs
	}
	return 0
}

func (x *StreamingWriteServerMessage_WriteStatistics) GetThrottledOnPartitionDurationMs() int64 {
	if x != nil {
		return x.ThrottledOnPartitionDurationMs
	}
	return 0
}

func (x *StreamingWriteServerMessage_WriteStatistics) GetThrottledOnTopicDurationMs() int64 {
	if x != nil {
		return x.ThrottledOnTopicDurationMs
	}
	return 0
}

// Handshake request.
type StreamingReadClientMessage_InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message that describes topic to read.
	// Topics that will be read by this session.
	TopicsReadSettings []*StreamingReadClientMessage_TopicReadSettings `protobuf:"bytes,1,rep,name=topics_read_settings,json=topicsReadSettings,proto3" json:"topics_read_settings,omitempty"`
	// Flag that indicates reading only of original topics in cluster or all including mirrored.
	ReadOnlyOriginal bool `protobuf:"varint,2,opt,name=read_only_original,json=readOnlyOriginal,proto3" json:"read_only_original,omitempty"`
	// Path of consumer that is used for reading by this session.
	Consumer string `protobuf:"bytes,3,opt,name=consumer,proto3" json:"consumer,omitempty"`
	// Skip all messages that has write timestamp smaller than now - max_time_lag_ms.
	MaxLagDurationMs int64 `protobuf:"varint,4,opt,name=max_lag_duration_ms,json=maxLagDurationMs,proto3" json:"max_lag_duration_ms,omitempty"`
	// Read data only after this timestamp from all topics.
	StartFromWrittenAtMs int64 `protobuf:"varint,5,opt,name=start_from_written_at_ms,json=startFromWrittenAtMs,proto3" json:"start_from_written_at_ms,omitempty"`
	// Maximum block format version supported by the client. Server will asses this parameter and return actual data blocks version in
	// StreamingReadServerMessage.InitResponse.block_format_version_by_topic (and StreamingReadServerMessage.AddTopicResponse.block_format_version)
	// or error if client will not be able to read data.
	MaxSupportedFormatVersion int64 `protobuf:"varint,6,opt,name=max_supported_format_version,json=maxSupportedFormatVersion,proto3" json:"max_supported_format_version,omitempty"`
	// Maximal size of client cache for message_group_id, ip and meta, per partition.
	// There are separate caches for each partition partition sessions.
	// There are separate caches for message group identifiers, ip and meta inside one partition session.
	MaxMetaCacheSize int64 `protobuf:"varint,10,opt,name=max_meta_cache_size,json=maxMetaCacheSize,proto3" json:"max_meta_cache_size,omitempty"`
	// Session identifier for retries. Must be the same as session_id from Inited server response. If this is first connect, not retry - do not use this field.
	SessionId string `protobuf:"bytes,100,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 0 for first init message and incremental value for connect retries.
	ConnectionAttempt int64 `protobuf:"varint,101,opt,name=connection_attempt,json=connectionAttempt,proto3" json:"connection_attempt,omitempty"`
	// Formed state for retries. If not retry - do not use this field.
	State         *StreamingReadClientMessage_InitRequest_State `protobuf:"bytes,102,opt,name=state,proto3" json:"state,omitempty"`
	IdleTimeoutMs int64                                         `protobuf:"varint,200,opt,name=idle_timeout_ms,json=idleTimeoutMs,proto3" json:"idle_timeout_ms,omitempty"`
}

func (x *StreamingReadClientMessage_InitRequest) Reset() {
	*x = StreamingReadClientMessage_InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_InitRequest) ProtoMessage() {}

func (x *StreamingReadClientMessage_InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_InitRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_InitRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 0}
}

func (x *StreamingReadClientMessage_InitRequest) GetTopicsReadSettings() []*StreamingReadClientMessage_TopicReadSettings {
	if x != nil {
		return x.TopicsReadSettings
	}
	return nil
}

func (x *StreamingReadClientMessage_InitRequest) GetReadOnlyOriginal() bool {
	if x != nil {
		return x.ReadOnlyOriginal
	}
	return false
}

func (x *StreamingReadClientMessage_InitRequest) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *StreamingReadClientMessage_InitRequest) GetMaxLagDurationMs() int64 {
	if x != nil {
		return x.MaxLagDurationMs
	}
	return 0
}

func (x *StreamingReadClientMessage_InitRequest) GetStartFromWrittenAtMs() int64 {
	if x != nil {
		return x.StartFromWrittenAtMs
	}
	return 0
}

func (x *StreamingReadClientMessage_InitRequest) GetMaxSupportedFormatVersion() int64 {
	if x != nil {
		return x.MaxSupportedFormatVersion
	}
	return 0
}

func (x *StreamingReadClientMessage_InitRequest) GetMaxMetaCacheSize() int64 {
	if x != nil {
		return x.MaxMetaCacheSize
	}
	return 0
}

func (x *StreamingReadClientMessage_InitRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamingReadClientMessage_InitRequest) GetConnectionAttempt() int64 {
	if x != nil {
		return x.ConnectionAttempt
	}
	return 0
}

func (x *StreamingReadClientMessage_InitRequest) GetState() *StreamingReadClientMessage_InitRequest_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *StreamingReadClientMessage_InitRequest) GetIdleTimeoutMs() int64 {
	if x != nil {
		return x.IdleTimeoutMs
	}
	return 0
}

// Message that represents client readiness for receiving more data.
type StreamingReadClientMessage_ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client acquired this amount of free bytes more for buffer. Server can send more data at most of this uncompressed size.
	// Subsequent messages with 5 and 10 request_uncompressed_size are treated by server that it can send messages for at most 15 bytes.
	RequestUncompressedSize int64 `protobuf:"varint,1,opt,name=request_uncompressed_size,json=requestUncompressedSize,proto3" json:"request_uncompressed_size,omitempty"`
}

func (x *StreamingReadClientMessage_ReadRequest) Reset() {
	*x = StreamingReadClientMessage_ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_ReadRequest) ProtoMessage() {}

func (x *StreamingReadClientMessage_ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_ReadRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_ReadRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 1}
}

func (x *StreamingReadClientMessage_ReadRequest) GetRequestUncompressedSize() int64 {
	if x != nil {
		return x.RequestUncompressedSize
	}
	return 0
}

// Signal for server that cient is ready to recive data for partition.
type StreamingReadClientMessage_StartPartitionSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition session identifier of partition to start read.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Start reading from partition offset that is not less than read_offset.
	// Init.max_time_lag_ms and Init.read_timestamp_ms could lead to skip of more messages.
	// The same with actual committed offset. Regardless of set read_offset server will return data from maximal offset from read_offset, actual committed offset
	// and offsets calculated from Init.max_time_lag_ms and Init.read_timestamp_ms.
	ReadOffset int64 `protobuf:"varint,2,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// All messages with offset less than commit_offset are processed by client. Server will commit this position if this is not done yet.
	CommitOffset int64 `protobuf:"varint,3,opt,name=commit_offset,json=commitOffset,proto3" json:"commit_offset,omitempty"`
	// This option will enable sanity check on server for read_offset. Server will verify that read_offset is no less that actual committed offset.
	// If verification will fail then server will kill this read session and client will find out error in reading logic.
	// If client is not setting read_offset, sanity check will fail so do not set verify_read_offset if you not setting correct read_offset.
	VerifyReadOffset bool `protobuf:"varint,4,opt,name=verify_read_offset,json=verifyReadOffset,proto3" json:"verify_read_offset,omitempty"`
}

func (x *StreamingReadClientMessage_StartPartitionSessionResponse) Reset() {
	*x = StreamingReadClientMessage_StartPartitionSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_StartPartitionSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_StartPartitionSessionResponse) ProtoMessage() {}

func (x *StreamingReadClientMessage_StartPartitionSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_StartPartitionSessionResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_StartPartitionSessionResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 2}
}

func (x *StreamingReadClientMessage_StartPartitionSessionResponse) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamingReadClientMessage_StartPartitionSessionResponse) GetReadOffset() int64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *StreamingReadClientMessage_StartPartitionSessionResponse) GetCommitOffset() int64 {
	if x != nil {
		return x.CommitOffset
	}
	return 0
}

func (x *StreamingReadClientMessage_StartPartitionSessionResponse) GetVerifyReadOffset() bool {
	if x != nil {
		return x.VerifyReadOffset
	}
	return false
}

// Signal for server that client finished working with this partition. Must be sent only after corresponding Release request from server.
// Server will give this partition to other read session only after Released signal.
type StreamingReadClientMessage_StopPartitionSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition session identifier of partition session that is released by client.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
}

func (x *StreamingReadClientMessage_StopPartitionSessionResponse) Reset() {
	*x = StreamingReadClientMessage_StopPartitionSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_StopPartitionSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_StopPartitionSessionResponse) ProtoMessage() {}

func (x *StreamingReadClientMessage_StopPartitionSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_StopPartitionSessionResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_StopPartitionSessionResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 3}
}

func (x *StreamingReadClientMessage_StopPartitionSessionResponse) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

// Signal for server that client is not ready to recieve more data from this partition.
type StreamingReadClientMessage_PauseReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionSessionIds []int64 `protobuf:"varint,1,rep,packed,name=partition_session_ids,json=partitionSessionIds,proto3" json:"partition_session_ids,omitempty"`
}

func (x *StreamingReadClientMessage_PauseReadRequest) Reset() {
	*x = StreamingReadClientMessage_PauseReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_PauseReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_PauseReadRequest) ProtoMessage() {}

func (x *StreamingReadClientMessage_PauseReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_PauseReadRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_PauseReadRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 4}
}

func (x *StreamingReadClientMessage_PauseReadRequest) GetPartitionSessionIds() []int64 {
	if x != nil {
		return x.PartitionSessionIds
	}
	return nil
}

// Signal for server that client is ready to receive more data from this partition.
type StreamingReadClientMessage_ResumeReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionSessionIds []int64 `protobuf:"varint,1,rep,packed,name=partition_session_ids,json=partitionSessionIds,proto3" json:"partition_session_ids,omitempty"`
	// Offset to start reading - may be smaller than known one in case of dropping of read-ahead in client lib.
	ReadOffsets []int64 `protobuf:"varint,2,rep,packed,name=read_offsets,json=readOffsets,proto3" json:"read_offsets,omitempty"`
	// Cookie for matching data from PartitionSession after resuming. Must be greater than zero.
	ResumeCookies []int64 `protobuf:"varint,3,rep,packed,name=resume_cookies,json=resumeCookies,proto3" json:"resume_cookies,omitempty"`
}

func (x *StreamingReadClientMessage_ResumeReadRequest) Reset() {
	*x = StreamingReadClientMessage_ResumeReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_ResumeReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_ResumeReadRequest) ProtoMessage() {}

func (x *StreamingReadClientMessage_ResumeReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_ResumeReadRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_ResumeReadRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 5}
}

func (x *StreamingReadClientMessage_ResumeReadRequest) GetPartitionSessionIds() []int64 {
	if x != nil {
		return x.PartitionSessionIds
	}
	return nil
}

func (x *StreamingReadClientMessage_ResumeReadRequest) GetReadOffsets() []int64 {
	if x != nil {
		return x.ReadOffsets
	}
	return nil
}

func (x *StreamingReadClientMessage_ResumeReadRequest) GetResumeCookies() []int64 {
	if x != nil {
		return x.ResumeCookies
	}
	return nil
}

// Signal for server that client processed some read data.
type StreamingReadClientMessage_CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition offsets that indicates processed data.
	Commits []*StreamingReadClientMessage_PartitionCommit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *StreamingReadClientMessage_CommitRequest) Reset() {
	*x = StreamingReadClientMessage_CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_CommitRequest) ProtoMessage() {}

func (x *StreamingReadClientMessage_CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_CommitRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_CommitRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 6}
}

func (x *StreamingReadClientMessage_CommitRequest) GetCommits() []*StreamingReadClientMessage_PartitionCommit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type StreamingReadClientMessage_PartitionSessionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
}

func (x *StreamingReadClientMessage_PartitionSessionStatusRequest) Reset() {
	*x = StreamingReadClientMessage_PartitionSessionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_PartitionSessionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_PartitionSessionStatusRequest) ProtoMessage() {}

func (x *StreamingReadClientMessage_PartitionSessionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_PartitionSessionStatusRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_PartitionSessionStatusRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 7}
}

func (x *StreamingReadClientMessage_PartitionSessionStatusRequest) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

// Add topic to current read session.
type StreamingReadClientMessage_AddTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicReadSettings *StreamingReadClientMessage_TopicReadSettings `protobuf:"bytes,1,opt,name=topic_read_settings,json=topicReadSettings,proto3" json:"topic_read_settings,omitempty"`
}

func (x *StreamingReadClientMessage_AddTopicRequest) Reset() {
	*x = StreamingReadClientMessage_AddTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_AddTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_AddTopicRequest) ProtoMessage() {}

func (x *StreamingReadClientMessage_AddTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_AddTopicRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_AddTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 8}
}

func (x *StreamingReadClientMessage_AddTopicRequest) GetTopicReadSettings() *StreamingReadClientMessage_TopicReadSettings {
	if x != nil {
		return x.TopicReadSettings
	}
	return nil
}

// Remove topic from current read session.
type StreamingReadClientMessage_RemoveTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *StreamingReadClientMessage_RemoveTopicRequest) Reset() {
	*x = StreamingReadClientMessage_RemoveTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_RemoveTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_RemoveTopicRequest) ProtoMessage() {}

func (x *StreamingReadClientMessage_RemoveTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_RemoveTopicRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_RemoveTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 9}
}

func (x *StreamingReadClientMessage_RemoveTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type StreamingReadClientMessage_TopicReadSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Partition groups that will be read by this session.
	// If list is empty - then session will read all partition groups.
	PartitionGroupIds []int64 `protobuf:"varint,2,rep,packed,name=partition_group_ids,json=partitionGroupIds,proto3" json:"partition_group_ids,omitempty"`
	// Read data only after this timestamp from this topic.
	StartFromWrittenAtMs int64 `protobuf:"varint,3,opt,name=start_from_written_at_ms,json=startFromWrittenAtMs,proto3" json:"start_from_written_at_ms,omitempty"`
}

func (x *StreamingReadClientMessage_TopicReadSettings) Reset() {
	*x = StreamingReadClientMessage_TopicReadSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_TopicReadSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_TopicReadSettings) ProtoMessage() {}

func (x *StreamingReadClientMessage_TopicReadSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_TopicReadSettings.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_TopicReadSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 10}
}

func (x *StreamingReadClientMessage_TopicReadSettings) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StreamingReadClientMessage_TopicReadSettings) GetPartitionGroupIds() []int64 {
	if x != nil {
		return x.PartitionGroupIds
	}
	return nil
}

func (x *StreamingReadClientMessage_TopicReadSettings) GetStartFromWrittenAtMs() int64 {
	if x != nil {
		return x.StartFromWrittenAtMs
	}
	return 0
}

//*
// Message that is used for describing commit.
type StreamingReadClientMessage_PartitionCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of partition session with data to commit.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Processed ranges.
	Offsets []*OffsetsRange `protobuf:"bytes,2,rep,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *StreamingReadClientMessage_PartitionCommit) Reset() {
	*x = StreamingReadClientMessage_PartitionCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_PartitionCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_PartitionCommit) ProtoMessage() {}

func (x *StreamingReadClientMessage_PartitionCommit) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_PartitionCommit.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_PartitionCommit) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 11}
}

func (x *StreamingReadClientMessage_PartitionCommit) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamingReadClientMessage_PartitionCommit) GetOffsets() []*OffsetsRange {
	if x != nil {
		return x.Offsets
	}
	return nil
}

// State of client read session. Could be provided to server for retries.
type StreamingReadClientMessage_InitRequest_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionSessionsStates []*StreamingReadClientMessage_InitRequest_State_PartitionSessionState `protobuf:"bytes,1,rep,name=partition_sessions_states,json=partitionSessionsStates,proto3" json:"partition_sessions_states,omitempty"`
}

func (x *StreamingReadClientMessage_InitRequest_State) Reset() {
	*x = StreamingReadClientMessage_InitRequest_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_InitRequest_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_InitRequest_State) ProtoMessage() {}

func (x *StreamingReadClientMessage_InitRequest_State) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_InitRequest_State.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_InitRequest_State) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *StreamingReadClientMessage_InitRequest_State) GetPartitionSessionsStates() []*StreamingReadClientMessage_InitRequest_State_PartitionSessionState {
	if x != nil {
		return x.PartitionSessionsStates
	}
	return nil
}

type StreamingReadClientMessage_InitRequest_State_PartitionSessionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition partition session.
	PartitionSession *PartitionSession `protobuf:"bytes,1,opt,name=partition_session,json=partitionSession,proto3" json:"partition_session,omitempty"`
	// Current read offset if has one. Actual for states DESTROYING, READING and STOPPED.
	ReadOffset int64 `protobuf:"varint,2,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// Ranges of committed by client offsets.
	OffsetsRanges []*OffsetsRange `protobuf:"bytes,3,rep,name=offsets_ranges,json=offsetsRanges,proto3" json:"offsets_ranges,omitempty"`
	// Status of partition session.
	Status StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status `protobuf:"varint,4,opt,name=status,proto3,enum=Ydb.PersQueue.V1.StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status" json:"status,omitempty"`
}

func (x *StreamingReadClientMessage_InitRequest_State_PartitionSessionState) Reset() {
	*x = StreamingReadClientMessage_InitRequest_State_PartitionSessionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessage_InitRequest_State_PartitionSessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessage_InitRequest_State_PartitionSessionState) ProtoMessage() {}

func (x *StreamingReadClientMessage_InitRequest_State_PartitionSessionState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessage_InitRequest_State_PartitionSessionState.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessage_InitRequest_State_PartitionSessionState) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12, 0, 0, 0}
}

func (x *StreamingReadClientMessage_InitRequest_State_PartitionSessionState) GetPartitionSession() *PartitionSession {
	if x != nil {
		return x.PartitionSession
	}
	return nil
}

func (x *StreamingReadClientMessage_InitRequest_State_PartitionSessionState) GetReadOffset() int64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *StreamingReadClientMessage_InitRequest_State_PartitionSessionState) GetOffsetsRanges() []*OffsetsRange {
	if x != nil {
		return x.OffsetsRanges
	}
	return nil
}

func (x *StreamingReadClientMessage_InitRequest_State_PartitionSessionState) GetStatus() StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status {
	if x != nil {
		return x.Status
	}
	return StreamingReadClientMessage_InitRequest_State_PartitionSessionState_STATUS_UNSPECIFIED
}

// Handshake response.
type StreamingReadServerMessage_InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read session identifier for debug purposes.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Block format version of data client will receive from topics.
	BlockFormatVersionByTopic map[string]int64 `protobuf:"bytes,2,rep,name=block_format_version_by_topic,json=blockFormatVersionByTopic,proto3" json:"block_format_version_by_topic,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Chosen maximal cache size by server.
	// Client must use cache of this size. Could change on retries - reduce size of cache in this case.
	MaxMetaCacheSize int64 `protobuf:"varint,10,opt,name=max_meta_cache_size,json=maxMetaCacheSize,proto3" json:"max_meta_cache_size,omitempty"`
}

func (x *StreamingReadServerMessage_InitResponse) Reset() {
	*x = StreamingReadServerMessage_InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_InitResponse) ProtoMessage() {}

func (x *StreamingReadServerMessage_InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_InitResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_InitResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 0}
}

func (x *StreamingReadServerMessage_InitResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamingReadServerMessage_InitResponse) GetBlockFormatVersionByTopic() map[string]int64 {
	if x != nil {
		return x.BlockFormatVersionByTopic
	}
	return nil
}

func (x *StreamingReadServerMessage_InitResponse) GetMaxMetaCacheSize() int64 {
	if x != nil {
		return x.MaxMetaCacheSize
	}
	return 0
}

// Command to create and start a partition session.
// Client must react on this signal by sending StartRead when ready recieve data from this partition.
type StreamingReadServerMessage_StartPartitionSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition partition stream description.
	PartitionSession *PartitionSession `protobuf:"bytes,1,opt,name=partition_session,json=partitionSession,proto3" json:"partition_session,omitempty"`
	// Actual committed offset.
	CommittedOffset int64 `protobuf:"varint,2,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
	// Offset of first not existing message in partition till now.
	EndOffset int64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *StreamingReadServerMessage_StartPartitionSessionRequest) Reset() {
	*x = StreamingReadServerMessage_StartPartitionSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_StartPartitionSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_StartPartitionSessionRequest) ProtoMessage() {}

func (x *StreamingReadServerMessage_StartPartitionSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_StartPartitionSessionRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_StartPartitionSessionRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 1}
}

func (x *StreamingReadServerMessage_StartPartitionSessionRequest) GetPartitionSession() *PartitionSession {
	if x != nil {
		return x.PartitionSession
	}
	return nil
}

func (x *StreamingReadServerMessage_StartPartitionSessionRequest) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

func (x *StreamingReadServerMessage_StartPartitionSessionRequest) GetEndOffset() int64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

// Command to stop and destroy concrete partition session.
type StreamingReadServerMessage_StopPartitionSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of partition partition session that is ready to be closed by server.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Flag of graceful stop.
	// If True then server is waiting for response from client before giving of this partition for other read session.
	// Server will not send more data from this partition.
	// Client can process all received data and wait for commit and only after send response.
	// If False then server gives partition for other session right now.
	// All further commits for this PartitionSession has no effect. Server is not waiting for response.
	Graceful bool `protobuf:"varint,2,opt,name=graceful,proto3" json:"graceful,omitempty"`
	// Last known committed offset.
	CommittedOffset int64 `protobuf:"varint,3,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
}

func (x *StreamingReadServerMessage_StopPartitionSessionRequest) Reset() {
	*x = StreamingReadServerMessage_StopPartitionSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_StopPartitionSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_StopPartitionSessionRequest) ProtoMessage() {}

func (x *StreamingReadServerMessage_StopPartitionSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_StopPartitionSessionRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_StopPartitionSessionRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 2}
}

func (x *StreamingReadServerMessage_StopPartitionSessionRequest) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamingReadServerMessage_StopPartitionSessionRequest) GetGraceful() bool {
	if x != nil {
		return x.Graceful
	}
	return false
}

func (x *StreamingReadServerMessage_StopPartitionSessionRequest) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

// Acknowledgement for commits.
type StreamingReadServerMessage_CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partitions with progress.
	PartitionsCommittedOffsets []*StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset `protobuf:"bytes,1,rep,name=partitions_committed_offsets,json=partitionsCommittedOffsets,proto3" json:"partitions_committed_offsets,omitempty"`
}

func (x *StreamingReadServerMessage_CommitResponse) Reset() {
	*x = StreamingReadServerMessage_CommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_CommitResponse) ProtoMessage() {}

func (x *StreamingReadServerMessage_CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_CommitResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_CommitResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 3}
}

func (x *StreamingReadServerMessage_CommitResponse) GetPartitionsCommittedOffsets() []*StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset {
	if x != nil {
		return x.PartitionsCommittedOffsets
	}
	return nil
}

// Data read.
type StreamingReadServerMessage_ReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client messages, divided by partitions.
	PartitionData []*StreamingReadServerMessage_ReadResponse_PartitionData `protobuf:"bytes,1,rep,name=partition_data,json=partitionData,proto3" json:"partition_data,omitempty"`
}

func (x *StreamingReadServerMessage_ReadResponse) Reset() {
	*x = StreamingReadServerMessage_ReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_ReadResponse) ProtoMessage() {}

func (x *StreamingReadServerMessage_ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_ReadResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_ReadResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 4}
}

func (x *StreamingReadServerMessage_ReadResponse) GetPartitionData() []*StreamingReadServerMessage_ReadResponse_PartitionData {
	if x != nil {
		return x.PartitionData
	}
	return nil
}

// Response for status request.
type StreamingReadServerMessage_PartitionSessionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of partition partition session that is ready to be closed by server.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	CommittedOffset    int64 `protobuf:"varint,2,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
	EndOffset          int64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// WriteTimestamp of next message (and end_offset) will be not less that WriteWatermarkMs.
	WrittenAtWatermarkMs int64 `protobuf:"varint,4,opt,name=written_at_watermark_ms,json=writtenAtWatermarkMs,proto3" json:"written_at_watermark_ms,omitempty"`
}

func (x *StreamingReadServerMessage_PartitionSessionStatusResponse) Reset() {
	*x = StreamingReadServerMessage_PartitionSessionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_PartitionSessionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_PartitionSessionStatusResponse) ProtoMessage() {}

func (x *StreamingReadServerMessage_PartitionSessionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_PartitionSessionStatusResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_PartitionSessionStatusResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 5}
}

func (x *StreamingReadServerMessage_PartitionSessionStatusResponse) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamingReadServerMessage_PartitionSessionStatusResponse) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

func (x *StreamingReadServerMessage_PartitionSessionStatusResponse) GetEndOffset() int64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *StreamingReadServerMessage_PartitionSessionStatusResponse) GetWrittenAtWatermarkMs() int64 {
	if x != nil {
		return x.WrittenAtWatermarkMs
	}
	return 0
}

type StreamingReadServerMessage_PauseReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamingReadServerMessage_PauseReadResponse) Reset() {
	*x = StreamingReadServerMessage_PauseReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_PauseReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_PauseReadResponse) ProtoMessage() {}

func (x *StreamingReadServerMessage_PauseReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_PauseReadResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_PauseReadResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 6}
}

type StreamingReadServerMessage_ResumeReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamingReadServerMessage_ResumeReadResponse) Reset() {
	*x = StreamingReadServerMessage_ResumeReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_ResumeReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_ResumeReadResponse) ProtoMessage() {}

func (x *StreamingReadServerMessage_ResumeReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_ResumeReadResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_ResumeReadResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 7}
}

type StreamingReadServerMessage_AddTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block format version of data client will receive from the topic.
	BlockFormatVersion int64 `protobuf:"varint,1,opt,name=block_format_version,json=blockFormatVersion,proto3" json:"block_format_version,omitempty"`
}

func (x *StreamingReadServerMessage_AddTopicResponse) Reset() {
	*x = StreamingReadServerMessage_AddTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_AddTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_AddTopicResponse) ProtoMessage() {}

func (x *StreamingReadServerMessage_AddTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_AddTopicResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_AddTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 8}
}

func (x *StreamingReadServerMessage_AddTopicResponse) GetBlockFormatVersion() int64 {
	if x != nil {
		return x.BlockFormatVersion
	}
	return 0
}

type StreamingReadServerMessage_RemoveTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamingReadServerMessage_RemoveTopicResponse) Reset() {
	*x = StreamingReadServerMessage_RemoveTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_RemoveTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_RemoveTopicResponse) ProtoMessage() {}

func (x *StreamingReadServerMessage_RemoveTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_RemoveTopicResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_RemoveTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 9}
}

// Per-partition commit representation.
type StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition partition session identifier.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Last committed offset.
	CommittedOffset int64 `protobuf:"varint,2,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
}

func (x *StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset) Reset() {
	*x = StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset) ProtoMessage() {}

func (x *StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 3, 0}
}

func (x *StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

// One client message representation.
type StreamingReadServerMessage_ReadResponse_MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition offset in partition that assigned for message.
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"` //unique value for clientside deduplication - Topic:Cluster:Partition:Offset
	// Sequence number that provided with message on write from client.
	SeqNo int64 `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	// Timestamp of creation of message provided on write from client.
	CreateTimestampMs int64 `protobuf:"varint,3,opt,name=create_timestamp_ms,json=createTimestampMs,proto3" json:"create_timestamp_ms,omitempty"`
	// Codec that is used for data compressing.
	Codec Codec `protobuf:"varint,4,opt,name=codec,proto3,enum=Ydb.PersQueue.V1.Codec" json:"codec,omitempty"`
	// Compressed client message body.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Uncompressed size of client message body.
	UncompressedSize int64 `protobuf:"varint,6,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// kinesis data
	PartitionKey string `protobuf:"bytes,7,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	ExplicitHash []byte `protobuf:"bytes,8,opt,name=explicit_hash,json=explicitHash,proto3" json:"explicit_hash,omitempty"`
}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) Reset() {
	*x = StreamingReadServerMessage_ReadResponse_MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_ReadResponse_MessageData) ProtoMessage() {}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_ReadResponse_MessageData.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_ReadResponse_MessageData) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 4, 0}
}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) GetSeqNo() int64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) GetCreateTimestampMs() int64 {
	if x != nil {
		return x.CreateTimestampMs
	}
	return 0
}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) GetCodec() Codec {
	if x != nil {
		return x.Codec
	}
	return Codec_CODEC_UNSPECIFIED
}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) GetUncompressedSize() int64 {
	if x != nil {
		return x.UncompressedSize
	}
	return 0
}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *StreamingReadServerMessage_ReadResponse_MessageData) GetExplicitHash() []byte {
	if x != nil {
		return x.ExplicitHash
	}
	return nil
}

// Representation of sequence of client messages from one write session.
type StreamingReadServerMessage_ReadResponse_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source identifier provided by client for this batch of client messages.
	MessageGroupId []byte `protobuf:"bytes,2,opt,name=message_group_id,json=messageGroupId,proto3" json:"message_group_id,omitempty"`
	// Client metadata attached to write session, the same for all messages in batch.
	SessionMeta *MetaValue `protobuf:"bytes,3,opt,name=session_meta,json=sessionMeta,proto3" json:"session_meta,omitempty"`
	// Persist timestamp on server for batch.
	WriteTimestampMs int64 `protobuf:"varint,4,opt,name=write_timestamp_ms,json=writeTimestampMs,proto3" json:"write_timestamp_ms,omitempty"`
	// Peer address of node that created write session.
	Ip string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	// List of client messages.
	MessageData []*StreamingReadServerMessage_ReadResponse_MessageData `protobuf:"bytes,1,rep,name=message_data,json=messageData,proto3" json:"message_data,omitempty"`
}

func (x *StreamingReadServerMessage_ReadResponse_Batch) Reset() {
	*x = StreamingReadServerMessage_ReadResponse_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_ReadResponse_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_ReadResponse_Batch) ProtoMessage() {}

func (x *StreamingReadServerMessage_ReadResponse_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_ReadResponse_Batch.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_ReadResponse_Batch) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 4, 1}
}

func (x *StreamingReadServerMessage_ReadResponse_Batch) GetMessageGroupId() []byte {
	if x != nil {
		return x.MessageGroupId
	}
	return nil
}

func (x *StreamingReadServerMessage_ReadResponse_Batch) GetSessionMeta() *MetaValue {
	if x != nil {
		return x.SessionMeta
	}
	return nil
}

func (x *StreamingReadServerMessage_ReadResponse_Batch) GetWriteTimestampMs() int64 {
	if x != nil {
		return x.WriteTimestampMs
	}
	return 0
}

func (x *StreamingReadServerMessage_ReadResponse_Batch) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *StreamingReadServerMessage_ReadResponse_Batch) GetMessageData() []*StreamingReadServerMessage_ReadResponse_MessageData {
	if x != nil {
		return x.MessageData
	}
	return nil
}

// Representation of sequence of messages from one partition.
type StreamingReadServerMessage_ReadResponse_PartitionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Client messages, divided by write sessions.
	Batches []*StreamingReadServerMessage_ReadResponse_Batch `protobuf:"bytes,2,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (x *StreamingReadServerMessage_ReadResponse_PartitionData) Reset() {
	*x = StreamingReadServerMessage_ReadResponse_PartitionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessage_ReadResponse_PartitionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessage_ReadResponse_PartitionData) ProtoMessage() {}

func (x *StreamingReadServerMessage_ReadResponse_PartitionData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessage_ReadResponse_PartitionData.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessage_ReadResponse_PartitionData) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13, 4, 2}
}

func (x *StreamingReadServerMessage_ReadResponse_PartitionData) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamingReadServerMessage_ReadResponse_PartitionData) GetBatches() []*StreamingReadServerMessage_ReadResponse_Batch {
	if x != nil {
		return x.Batches
	}
	return nil
}

type MigrationStreamingReadClientMessage_TopicReadSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Partition groups that will be read by this session.
	// If list is empty - then session will read all partition groups.
	PartitionGroupIds []int64 `protobuf:"varint,2,rep,packed,name=partition_group_ids,json=partitionGroupIds,proto3" json:"partition_group_ids,omitempty"`
	// Read data only after this timestamp from this topic.
	StartFromWrittenAtMs int64 `protobuf:"varint,3,opt,name=start_from_written_at_ms,json=startFromWrittenAtMs,proto3" json:"start_from_written_at_ms,omitempty"`
}

func (x *MigrationStreamingReadClientMessage_TopicReadSettings) Reset() {
	*x = MigrationStreamingReadClientMessage_TopicReadSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadClientMessage_TopicReadSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadClientMessage_TopicReadSettings) ProtoMessage() {}

func (x *MigrationStreamingReadClientMessage_TopicReadSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage_TopicReadSettings.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadClientMessage_TopicReadSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15, 0}
}

func (x *MigrationStreamingReadClientMessage_TopicReadSettings) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MigrationStreamingReadClientMessage_TopicReadSettings) GetPartitionGroupIds() []int64 {
	if x != nil {
		return x.PartitionGroupIds
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage_TopicReadSettings) GetStartFromWrittenAtMs() int64 {
	if x != nil {
		return x.StartFromWrittenAtMs
	}
	return 0
}

// Handshake request.
type MigrationStreamingReadClientMessage_InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message that describes topic to read.
	// Topics that will be read by this session.
	TopicsReadSettings []*MigrationStreamingReadClientMessage_TopicReadSettings `protobuf:"bytes,1,rep,name=topics_read_settings,json=topicsReadSettings,proto3" json:"topics_read_settings,omitempty"`
	// Flag that indicates reading only of original topics in cluster or all including mirrored.
	ReadOnlyOriginal bool `protobuf:"varint,2,opt,name=read_only_original,json=readOnlyOriginal,proto3" json:"read_only_original,omitempty"`
	// Path of consumer that is used for reading by this session.
	Consumer string `protobuf:"bytes,3,opt,name=consumer,proto3" json:"consumer,omitempty"`
	// Skip all messages that has write timestamp smaller than now - max_time_lag_ms.
	MaxLagDurationMs int64 `protobuf:"varint,4,opt,name=max_lag_duration_ms,json=maxLagDurationMs,proto3" json:"max_lag_duration_ms,omitempty"`
	// Read data only after this timestamp from all topics.
	StartFromWrittenAtMs int64 `protobuf:"varint,5,opt,name=start_from_written_at_ms,json=startFromWrittenAtMs,proto3" json:"start_from_written_at_ms,omitempty"`
	// Maximum block format version supported by the client. Server will asses this parameter and return actual data blocks version in
	// StreamingReadServerMessage.InitResponse.block_format_version_by_topic (and StreamingReadServerMessage.AddTopicResponse.block_format_version)
	// or error if client will not be able to read data.
	MaxSupportedBlockFormatVersion int64 `protobuf:"varint,6,opt,name=max_supported_block_format_version,json=maxSupportedBlockFormatVersion,proto3" json:"max_supported_block_format_version,omitempty"`
	// Maximal size of client cache for message_group_id, ip and meta, per partition.
	// There is separate caches for each partition partition streams.
	// There is separate caches for message group identifiers, ip and meta inside one partition partition stream.
	MaxMetaCacheSize int64 `protobuf:"varint,10,opt,name=max_meta_cache_size,json=maxMetaCacheSize,proto3" json:"max_meta_cache_size,omitempty"`
	// Session identifier for retries. Must be the same as session_id from Inited server response. If this is first connect, not retry - do not use this field.
	SessionId string `protobuf:"bytes,100,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 0 for first init message and incremental value for connect retries.
	ConnectionAttempt int64 `protobuf:"varint,101,opt,name=connection_attempt,json=connectionAttempt,proto3" json:"connection_attempt,omitempty"`
	// Formed state for retries. If not retry - do not use this field.
	State         *MigrationStreamingReadClientMessage_InitRequest_State `protobuf:"bytes,102,opt,name=state,proto3" json:"state,omitempty"`
	IdleTimeoutMs int64                                                  `protobuf:"varint,200,opt,name=idle_timeout_ms,json=idleTimeoutMs,proto3" json:"idle_timeout_ms,omitempty"`
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// TODO: remove after refactoring
	// Single read request params.
	ReadParams *ReadParams `protobuf:"bytes,42,opt,name=read_params,json=readParams,proto3" json:"read_params,omitempty"`
	RangesMode bool        `protobuf:"varint,442,opt,name=ranges_mode,json=rangesMode,proto3" json:"ranges_mode,omitempty"` ////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

func (x *MigrationStreamingReadClientMessage_InitRequest) Reset() {
	*x = MigrationStreamingReadClientMessage_InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadClientMessage_InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadClientMessage_InitRequest) ProtoMessage() {}

func (x *MigrationStreamingReadClientMessage_InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage_InitRequest.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadClientMessage_InitRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15, 1}
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetTopicsReadSettings() []*MigrationStreamingReadClientMessage_TopicReadSettings {
	if x != nil {
		return x.TopicsReadSettings
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetReadOnlyOriginal() bool {
	if x != nil {
		return x.ReadOnlyOriginal
	}
	return false
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetMaxLagDurationMs() int64 {
	if x != nil {
		return x.MaxLagDurationMs
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetStartFromWrittenAtMs() int64 {
	if x != nil {
		return x.StartFromWrittenAtMs
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetMaxSupportedBlockFormatVersion() int64 {
	if x != nil {
		return x.MaxSupportedBlockFormatVersion
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetMaxMetaCacheSize() int64 {
	if x != nil {
		return x.MaxMetaCacheSize
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetConnectionAttempt() int64 {
	if x != nil {
		return x.ConnectionAttempt
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetState() *MigrationStreamingReadClientMessage_InitRequest_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetIdleTimeoutMs() int64 {
	if x != nil {
		return x.IdleTimeoutMs
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetReadParams() *ReadParams {
	if x != nil {
		return x.ReadParams
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage_InitRequest) GetRangesMode() bool {
	if x != nil {
		return x.RangesMode
	}
	return false
}

// Request of single read.
type MigrationStreamingReadClientMessage_Read struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MigrationStreamingReadClientMessage_Read) Reset() {
	*x = MigrationStreamingReadClientMessage_Read{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadClientMessage_Read) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadClientMessage_Read) ProtoMessage() {}

func (x *MigrationStreamingReadClientMessage_Read) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage_Read.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadClientMessage_Read) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15, 2}
}

type MigrationStreamingReadClientMessage_StartRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path of partition.
	Topic *Path `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Cluster of topic instance.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Partition identifier. Explicit only for debug purposes.
	Partition uint64 `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	// Assign identifier of Assign request from server. Used for mathing Assign requests from server with StartRead responses from client.
	AssignId uint64 `protobuf:"varint,5,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
	// Start reading from partition offset that is not less than read_offset.
	// ReadParams.max_time_lag_ms and ReadParams.read_timestamp_ms could lead to skip of more messages.
	// The same with actual committed offset. Regardless of set read_offset server will return data from maximal offset from read_offset, actual committed offset
	// and offsets calculated from ReadParams.max_time_lag_ms and ReadParams.read_timestamp_ms.
	ReadOffset uint64 `protobuf:"varint,6,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// All messages with offset less than commit_offset are processed by client. Server will commit this position if this is not done yet.
	CommitOffset uint64 `protobuf:"varint,7,opt,name=commit_offset,json=commitOffset,proto3" json:"commit_offset,omitempty"`
	// This option will enable sanity check on server for read_offset. Server will verify that read_offset is no less that actual committed offset.
	// If verification will fail then server will kill this read session and client will find out error in reading logic.
	// If client is not setting read_offset, sanity check will fail so do not set verify_read_offset if you not setting correct read_offset.
	VerifyReadOffset bool `protobuf:"varint,8,opt,name=verify_read_offset,json=verifyReadOffset,proto3" json:"verify_read_offset,omitempty"` //if true then check that committed position is <= ReadOffset; otherwise it means error in client logic
}

func (x *MigrationStreamingReadClientMessage_StartRead) Reset() {
	*x = MigrationStreamingReadClientMessage_StartRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadClientMessage_StartRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadClientMessage_StartRead) ProtoMessage() {}

func (x *MigrationStreamingReadClientMessage_StartRead) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage_StartRead.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadClientMessage_StartRead) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15, 3}
}

func (x *MigrationStreamingReadClientMessage_StartRead) GetTopic() *Path {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage_StartRead) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MigrationStreamingReadClientMessage_StartRead) GetPartition() uint64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_StartRead) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_StartRead) GetReadOffset() uint64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_StartRead) GetCommitOffset() uint64 {
	if x != nil {
		return x.CommitOffset
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_StartRead) GetVerifyReadOffset() bool {
	if x != nil {
		return x.VerifyReadOffset
	}
	return false
}

// Signal for server that client finished working with this partition. Must be sent only after corresponding Release request from server.
// Server will give this partition to other read session only after Released signal.
type MigrationStreamingReadClientMessage_Released struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path of partition.
	Topic *Path `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Cluster of topic instance.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Partition identifier. Explicit only for debug purposes.
	Partition uint64 `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	// Assign identifier of Assign request from server. Used for mathing Assign requests from server with Released responses from client.
	AssignId uint64 `protobuf:"varint,5,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
}

func (x *MigrationStreamingReadClientMessage_Released) Reset() {
	*x = MigrationStreamingReadClientMessage_Released{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadClientMessage_Released) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadClientMessage_Released) ProtoMessage() {}

func (x *MigrationStreamingReadClientMessage_Released) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage_Released.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadClientMessage_Released) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15, 4}
}

func (x *MigrationStreamingReadClientMessage_Released) GetTopic() *Path {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage_Released) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MigrationStreamingReadClientMessage_Released) GetPartition() uint64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_Released) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

// Signal for server that client processed some read data.
type MigrationStreamingReadClientMessage_Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition read cookies that indicates processed data.
	Cookies      []*CommitCookie      `protobuf:"bytes,1,rep,name=cookies,proto3" json:"cookies,omitempty"`
	OffsetRanges []*CommitOffsetRange `protobuf:"bytes,2,rep,name=offset_ranges,json=offsetRanges,proto3" json:"offset_ranges,omitempty"`
}

func (x *MigrationStreamingReadClientMessage_Commit) Reset() {
	*x = MigrationStreamingReadClientMessage_Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadClientMessage_Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadClientMessage_Commit) ProtoMessage() {}

func (x *MigrationStreamingReadClientMessage_Commit) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage_Commit.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadClientMessage_Commit) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15, 5}
}

func (x *MigrationStreamingReadClientMessage_Commit) GetCookies() []*CommitCookie {
	if x != nil {
		return x.Cookies
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage_Commit) GetOffsetRanges() []*CommitOffsetRange {
	if x != nil {
		return x.OffsetRanges
	}
	return nil
}

type MigrationStreamingReadClientMessage_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path of partition.
	Topic *Path `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Cluster of topic instance.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Partition identifier. Explicit only for debug purposes.
	Partition uint64 `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	// Assign identifier of Assign request from server. Used for mathing Assign requests from server with Released responses from client.
	AssignId uint64 `protobuf:"varint,5,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
}

func (x *MigrationStreamingReadClientMessage_Status) Reset() {
	*x = MigrationStreamingReadClientMessage_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadClientMessage_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadClientMessage_Status) ProtoMessage() {}

func (x *MigrationStreamingReadClientMessage_Status) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage_Status.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadClientMessage_Status) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15, 6}
}

func (x *MigrationStreamingReadClientMessage_Status) GetTopic() *Path {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage_Status) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MigrationStreamingReadClientMessage_Status) GetPartition() uint64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_Status) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

// State of client read session. Could be provided to server for retries.
type MigrationStreamingReadClientMessage_InitRequest_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionStreamsStates []*MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState `protobuf:"bytes,1,rep,name=partition_streams_states,json=partitionStreamsStates,proto3" json:"partition_streams_states,omitempty"`
}

func (x *MigrationStreamingReadClientMessage_InitRequest_State) Reset() {
	*x = MigrationStreamingReadClientMessage_InitRequest_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadClientMessage_InitRequest_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadClientMessage_InitRequest_State) ProtoMessage() {}

func (x *MigrationStreamingReadClientMessage_InitRequest_State) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage_InitRequest_State.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadClientMessage_InitRequest_State) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15, 1, 0}
}

func (x *MigrationStreamingReadClientMessage_InitRequest_State) GetPartitionStreamsStates() []*MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState {
	if x != nil {
		return x.PartitionStreamsStates
	}
	return nil
}

type MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition partition stream.
	PartitionStream *PartitionStream `protobuf:"bytes,1,opt,name=partition_stream,json=partitionStream,proto3" json:"partition_stream,omitempty"`
	// Current read offset if has one. Actual for states DESTROYING, READING and STOPPED.
	ReadOffset int64 `protobuf:"varint,2,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// Ranges of committed by client offsets.
	OffsetRanges []*OffsetsRange `protobuf:"bytes,3,rep,name=offset_ranges,json=offsetRanges,proto3" json:"offset_ranges,omitempty"`
	// Status of partition stream.
	Status MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status `protobuf:"varint,4,opt,name=status,proto3,enum=Ydb.PersQueue.V1.MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status" json:"status,omitempty"`
}

func (x *MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState) Reset() {
	*x = MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState) ProtoMessage() {}

func (x *MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15, 1, 0, 0}
}

func (x *MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState) GetPartitionStream() *PartitionStream {
	if x != nil {
		return x.PartitionStream
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState) GetReadOffset() int64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState) GetOffsetRanges() []*OffsetsRange {
	if x != nil {
		return x.OffsetRanges
	}
	return nil
}

func (x *MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState) GetStatus() MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status {
	if x != nil {
		return x.Status
	}
	return MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_STATUS_UNSPECIFIED
}

// Handshake response.
type MigrationStreamingReadServerMessage_InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read session identifier for debug purposes.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Block format version of data client will receive from topics.
	BlockFormatVersionByTopic map[string]int64 `protobuf:"bytes,2,rep,name=block_format_version_by_topic,json=blockFormatVersionByTopic,proto3" json:"block_format_version_by_topic,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Choosed maximan cache size by server.
	// Client must use cache of this size. Could change on retries - reduce size of cache in this case.
	MaxMetaCacheSize int64 `protobuf:"varint,10,opt,name=max_meta_cache_size,json=maxMetaCacheSize,proto3" json:"max_meta_cache_size,omitempty"`
}

func (x *MigrationStreamingReadServerMessage_InitResponse) Reset() {
	*x = MigrationStreamingReadServerMessage_InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadServerMessage_InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadServerMessage_InitResponse) ProtoMessage() {}

func (x *MigrationStreamingReadServerMessage_InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadServerMessage_InitResponse.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadServerMessage_InitResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16, 0}
}

func (x *MigrationStreamingReadServerMessage_InitResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *MigrationStreamingReadServerMessage_InitResponse) GetBlockFormatVersionByTopic() map[string]int64 {
	if x != nil {
		return x.BlockFormatVersionByTopic
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_InitResponse) GetMaxMetaCacheSize() int64 {
	if x != nil {
		return x.MaxMetaCacheSize
	}
	return 0
}

// Signal that partition is assigned to this read session. Client must react on this signal by sending StartRead when ready.
type MigrationStreamingReadServerMessage_Assigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition's topic path.
	Topic *Path `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Topic's instance cluster name.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Partition identifier. topic:cluster:partition is unique addressing of partition.
	Partition uint64 `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	// Assign idenfier. Is not unique between diffrent partitions. Used for matching Assigned request from server and StartRead response from client.
	AssignId uint64 `protobuf:"varint,5,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
	// Actual read offset. Equeal to last committed offset.
	ReadOffset uint64 `protobuf:"varint,6,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// Offset of first not existing message in partition at this time.
	EndOffset uint64 `protobuf:"varint,7,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *MigrationStreamingReadServerMessage_Assigned) Reset() {
	*x = MigrationStreamingReadServerMessage_Assigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadServerMessage_Assigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadServerMessage_Assigned) ProtoMessage() {}

func (x *MigrationStreamingReadServerMessage_Assigned) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadServerMessage_Assigned.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadServerMessage_Assigned) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16, 1}
}

func (x *MigrationStreamingReadServerMessage_Assigned) GetTopic() *Path {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_Assigned) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MigrationStreamingReadServerMessage_Assigned) GetPartition() uint64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_Assigned) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_Assigned) GetReadOffset() uint64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_Assigned) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

// Partition release request from server.
type MigrationStreamingReadServerMessage_Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition's topic path.
	Topic *Path `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Topic's instance cluster name.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Partition identifier. topic:cluster:partition is unique addressing of partition.
	Partition uint64 `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	// Assign idenfier. Used for matching Assigned and Release requests from server.
	AssignId uint64 `protobuf:"varint,5,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
	// If False then server is waiting for Released signal from client before giving of this partition for other read session.
	// If True then server gives partition for other session right now. All futher commits for this partition has no effect. Server is not waiting for Released signal.
	ForcefulRelease bool `protobuf:"varint,6,opt,name=forceful_release,json=forcefulRelease,proto3" json:"forceful_release,omitempty"`
	// Last known committed offset.
	CommitOffset uint64 `protobuf:"varint,7,opt,name=commit_offset,json=commitOffset,proto3" json:"commit_offset,omitempty"`
}

func (x *MigrationStreamingReadServerMessage_Release) Reset() {
	*x = MigrationStreamingReadServerMessage_Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadServerMessage_Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadServerMessage_Release) ProtoMessage() {}

func (x *MigrationStreamingReadServerMessage_Release) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadServerMessage_Release.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadServerMessage_Release) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16, 2}
}

func (x *MigrationStreamingReadServerMessage_Release) GetTopic() *Path {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_Release) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MigrationStreamingReadServerMessage_Release) GetPartition() uint64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_Release) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_Release) GetForcefulRelease() bool {
	if x != nil {
		return x.ForcefulRelease
	}
	return false
}

func (x *MigrationStreamingReadServerMessage_Release) GetCommitOffset() uint64 {
	if x != nil {
		return x.CommitOffset
	}
	return 0
}

// Acknowledgement for commits.
type MigrationStreamingReadServerMessage_Committed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of cookies that correspond to commit of processing read data.
	Cookies      []*CommitCookie      `protobuf:"bytes,1,rep,name=cookies,proto3" json:"cookies,omitempty"`
	OffsetRanges []*CommitOffsetRange `protobuf:"bytes,2,rep,name=offset_ranges,json=offsetRanges,proto3" json:"offset_ranges,omitempty"`
}

func (x *MigrationStreamingReadServerMessage_Committed) Reset() {
	*x = MigrationStreamingReadServerMessage_Committed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadServerMessage_Committed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadServerMessage_Committed) ProtoMessage() {}

func (x *MigrationStreamingReadServerMessage_Committed) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadServerMessage_Committed.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadServerMessage_Committed) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16, 3}
}

func (x *MigrationStreamingReadServerMessage_Committed) GetCookies() []*CommitCookie {
	if x != nil {
		return x.Cookies
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_Committed) GetOffsetRanges() []*CommitOffsetRange {
	if x != nil {
		return x.OffsetRanges
	}
	return nil
}

// Readed data.
type MigrationStreamingReadServerMessage_DataBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client messages, divided by partitions.
	PartitionData []*MigrationStreamingReadServerMessage_DataBatch_PartitionData `protobuf:"bytes,1,rep,name=partition_data,json=partitionData,proto3" json:"partition_data,omitempty"`
}

func (x *MigrationStreamingReadServerMessage_DataBatch) Reset() {
	*x = MigrationStreamingReadServerMessage_DataBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadServerMessage_DataBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadServerMessage_DataBatch) ProtoMessage() {}

func (x *MigrationStreamingReadServerMessage_DataBatch) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadServerMessage_DataBatch.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadServerMessage_DataBatch) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16, 4}
}

func (x *MigrationStreamingReadServerMessage_DataBatch) GetPartitionData() []*MigrationStreamingReadServerMessage_DataBatch_PartitionData {
	if x != nil {
		return x.PartitionData
	}
	return nil
}

// Response for status requst.
type MigrationStreamingReadServerMessage_PartitionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition's topic path.
	Topic *Path `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Topic's instance cluster name.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Partition identifier. topic:cluster:partition is unique addressing of partition.
	Partition uint64 `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	// Assign idenfier. Used for matching Assigned and Release requests from server.
	AssignId         uint64 `protobuf:"varint,5,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
	CommittedOffset  uint64 `protobuf:"varint,6,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
	EndOffset        uint64 `protobuf:"varint,7,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	WriteWatermarkMs uint64 `protobuf:"varint,8,opt,name=write_watermark_ms,json=writeWatermarkMs,proto3" json:"write_watermark_ms,omitempty"`
}

func (x *MigrationStreamingReadServerMessage_PartitionStatus) Reset() {
	*x = MigrationStreamingReadServerMessage_PartitionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadServerMessage_PartitionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadServerMessage_PartitionStatus) ProtoMessage() {}

func (x *MigrationStreamingReadServerMessage_PartitionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadServerMessage_PartitionStatus.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadServerMessage_PartitionStatus) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16, 5}
}

func (x *MigrationStreamingReadServerMessage_PartitionStatus) GetTopic() *Path {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_PartitionStatus) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MigrationStreamingReadServerMessage_PartitionStatus) GetPartition() uint64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_PartitionStatus) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_PartitionStatus) GetCommittedOffset() uint64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_PartitionStatus) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_PartitionStatus) GetWriteWatermarkMs() uint64 {
	if x != nil {
		return x.WriteWatermarkMs
	}
	return 0
}

// One client message representation.
type MigrationStreamingReadServerMessage_DataBatch_MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition offset in partition that assigned for message.
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"` //unique value for clientside deduplication - Topic:Cluster:Partition:Offset
	// Sequence number that provided with message on write from client.
	SeqNo uint64 `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	// Timestamp of creation of message provided on write from client.
	CreateTimestampMs uint64 `protobuf:"varint,3,opt,name=create_timestamp_ms,json=createTimestampMs,proto3" json:"create_timestamp_ms,omitempty"`
	// Codec that is used for data compressing.
	Codec Codec `protobuf:"varint,4,opt,name=codec,proto3,enum=Ydb.PersQueue.V1.Codec" json:"codec,omitempty"`
	// Compressed client message body.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Uncompressed size of client message body.
	UncompressedSize uint64 `protobuf:"varint,6,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// kinesis data
	PartitionKey string `protobuf:"bytes,7,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	ExplicitHash []byte `protobuf:"bytes,8,opt,name=explicit_hash,json=explicitHash,proto3" json:"explicit_hash,omitempty"`
}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) Reset() {
	*x = MigrationStreamingReadServerMessage_DataBatch_MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadServerMessage_DataBatch_MessageData) ProtoMessage() {}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadServerMessage_DataBatch_MessageData.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadServerMessage_DataBatch_MessageData) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16, 4, 0}
}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) GetCreateTimestampMs() uint64 {
	if x != nil {
		return x.CreateTimestampMs
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) GetCodec() Codec {
	if x != nil {
		return x.Codec
	}
	return Codec_CODEC_UNSPECIFIED
}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) GetUncompressedSize() uint64 {
	if x != nil {
		return x.UncompressedSize
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *MigrationStreamingReadServerMessage_DataBatch_MessageData) GetExplicitHash() []byte {
	if x != nil {
		return x.ExplicitHash
	}
	return nil
}

// Representation of sequence of client messages from one write session.
type MigrationStreamingReadServerMessage_DataBatch_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source identifier provided by client for this batch of client messages.
	SourceId []byte `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// Client metadata attached to write session, the same for all messages in batch.
	ExtraFields []*KeyValue `protobuf:"bytes,3,rep,name=extra_fields,json=extraFields,proto3" json:"extra_fields,omitempty"`
	// Persist timestamp on server for batch.
	WriteTimestampMs uint64 `protobuf:"varint,4,opt,name=write_timestamp_ms,json=writeTimestampMs,proto3" json:"write_timestamp_ms,omitempty"`
	// Peer address of node that created write session.
	Ip string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	// List of client messages.
	MessageData []*MigrationStreamingReadServerMessage_DataBatch_MessageData `protobuf:"bytes,1,rep,name=message_data,json=messageData,proto3" json:"message_data,omitempty"`
}

func (x *MigrationStreamingReadServerMessage_DataBatch_Batch) Reset() {
	*x = MigrationStreamingReadServerMessage_DataBatch_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadServerMessage_DataBatch_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadServerMessage_DataBatch_Batch) ProtoMessage() {}

func (x *MigrationStreamingReadServerMessage_DataBatch_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadServerMessage_DataBatch_Batch.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadServerMessage_DataBatch_Batch) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16, 4, 1}
}

func (x *MigrationStreamingReadServerMessage_DataBatch_Batch) GetSourceId() []byte {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_DataBatch_Batch) GetExtraFields() []*KeyValue {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_DataBatch_Batch) GetWriteTimestampMs() uint64 {
	if x != nil {
		return x.WriteTimestampMs
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_DataBatch_Batch) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *MigrationStreamingReadServerMessage_DataBatch_Batch) GetMessageData() []*MigrationStreamingReadServerMessage_DataBatch_MessageData {
	if x != nil {
		return x.MessageData
	}
	return nil
}

// Representation of sequence of messages from one partition.
type MigrationStreamingReadServerMessage_DataBatch_PartitionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition's topic path.
	Topic *Path `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Topic's instance cluster name.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Partition identifier. topic:cluster:partition is unique addressing for partition.
	Partition uint64 `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	// Client messages, divided by write sessions.
	Batches []*MigrationStreamingReadServerMessage_DataBatch_Batch `protobuf:"bytes,4,rep,name=batches,proto3" json:"batches,omitempty"`
	// Cookie for addressing this partition messages batch for committing.
	Cookie *CommitCookie `protobuf:"bytes,5,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// Old formatted topic name with cluster inside.
	DeprecatedTopic string `protobuf:"bytes,10,opt,name=deprecated_topic,json=deprecatedTopic,proto3" json:"deprecated_topic,omitempty"`
}

func (x *MigrationStreamingReadServerMessage_DataBatch_PartitionData) Reset() {
	*x = MigrationStreamingReadServerMessage_DataBatch_PartitionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationStreamingReadServerMessage_DataBatch_PartitionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationStreamingReadServerMessage_DataBatch_PartitionData) ProtoMessage() {}

func (x *MigrationStreamingReadServerMessage_DataBatch_PartitionData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationStreamingReadServerMessage_DataBatch_PartitionData.ProtoReflect.Descriptor instead.
func (*MigrationStreamingReadServerMessage_DataBatch_PartitionData) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16, 4, 2}
}

func (x *MigrationStreamingReadServerMessage_DataBatch_PartitionData) GetTopic() *Path {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_DataBatch_PartitionData) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MigrationStreamingReadServerMessage_DataBatch_PartitionData) GetPartition() uint64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *MigrationStreamingReadServerMessage_DataBatch_PartitionData) GetBatches() []*MigrationStreamingReadServerMessage_DataBatch_Batch {
	if x != nil {
		return x.Batches
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_DataBatch_PartitionData) GetCookie() *CommitCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *MigrationStreamingReadServerMessage_DataBatch_PartitionData) GetDeprecatedTopic() string {
	if x != nil {
		return x.DeprecatedTopic
	}
	return ""
}

// Message containing information about concrete topic reading.
type ReadInfoResult_TopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path.
	Topic *Path `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Topic original cluster.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Status of whole topic.
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,3,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Issues if any.
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,4,rep,name=issues,proto3" json:"issues,omitempty"`
	// Reading info for partitions of this topic.
	Partitions []*ReadInfoResult_TopicInfo_PartitionInfo `protobuf:"bytes,5,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *ReadInfoResult_TopicInfo) Reset() {
	*x = ReadInfoResult_TopicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInfoResult_TopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInfoResult_TopicInfo) ProtoMessage() {}

func (x *ReadInfoResult_TopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInfoResult_TopicInfo.ProtoReflect.Descriptor instead.
func (*ReadInfoResult_TopicInfo) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ReadInfoResult_TopicInfo) GetTopic() *Path {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ReadInfoResult_TopicInfo) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ReadInfoResult_TopicInfo) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *ReadInfoResult_TopicInfo) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ReadInfoResult_TopicInfo) GetPartitions() []*ReadInfoResult_TopicInfo_PartitionInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

// Message containing information about concrete topic's partition reading.
type ReadInfoResult_TopicInfo_PartitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Patition identifier inside topic.
	Partition uint64 `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	// Request status of partition.
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,2,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Issues if any.
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
	// Offset of first message in partition.
	StartOffset uint64 `protobuf:"varint,4,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	// Offset of next not yet existing message in partition.
	EndOffset uint64 `protobuf:"varint,5,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// Offset of consumer committed message a.k.a. first not processed message.
	// If commit_offset == end_offset then all messages from partition are processed.
	CommitOffset uint64 `protobuf:"varint,6,opt,name=commit_offset,json=commitOffset,proto3" json:"commit_offset,omitempty"`
	// Consumer lag in time between committed and last messages in partition.
	CommitTimeLagMs uint64 `protobuf:"varint,7,opt,name=commit_time_lag_ms,json=commitTimeLagMs,proto3" json:"commit_time_lag_ms,omitempty"`
	// Offset of first not read message by consumer from this partition.
	// read_offset can be bigger that committed_offset - consumer could read some messages but not yet commit them.
	ReadOffset uint64 `protobuf:"varint,8,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// Consumer lag in time between read and last messages in partition.
	ReadTimeLagMs uint64 `protobuf:"varint,9,opt,name=read_time_lag_ms,json=readTimeLagMs,proto3" json:"read_time_lag_ms,omitempty"`
	// Session identifier that locked and reading this partition right now.
	SessionId string `protobuf:"bytes,10,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Ip if node that created reading this session.
	ClientNode string `protobuf:"bytes,11,opt,name=client_node,json=clientNode,proto3" json:"client_node,omitempty"`
	// Host name of proxy node that processing this reading session.
	ProxyNode string `protobuf:"bytes,12,opt,name=proxy_node,json=proxyNode,proto3" json:"proxy_node,omitempty"`
	// Host name of node where partition leader is running.
	TabletNode string `protobuf:"bytes,13,opt,name=tablet_node,json=tabletNode,proto3" json:"tablet_node,omitempty"`
	// Assign identifier of actual partition assignment.
	AssignId uint64 `protobuf:"varint,14,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
	// Timestamp of assignment.
	AssignTimestampMs uint64 `protobuf:"varint,15,opt,name=assign_timestamp_ms,json=assignTimestampMs,proto3" json:"assign_timestamp_ms,omitempty"`
	// Cookie of last performed read in session.
	LastReadCookie uint64 `protobuf:"varint,16,opt,name=last_read_cookie,json=lastReadCookie,proto3" json:"last_read_cookie,omitempty"`
	// Cookie upto whitch commits done.
	CommittedReadCookie uint64 `protobuf:"varint,17,opt,name=committed_read_cookie,json=committedReadCookie,proto3" json:"committed_read_cookie,omitempty"`
	// Cookie that client wants to commit, but server is waiting for committed_read_cookie + 1.
	OutOfOrderReadCookiesToCommit []uint64 `protobuf:"varint,18,rep,packed,name=out_of_order_read_cookies_to_commit,json=outOfOrderReadCookiesToCommit,proto3" json:"out_of_order_read_cookies_to_commit,omitempty"`
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) Reset() {
	*x = ReadInfoResult_TopicInfo_PartitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInfoResult_TopicInfo_PartitionInfo) ProtoMessage() {}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInfoResult_TopicInfo_PartitionInfo.ProtoReflect.Descriptor instead.
func (*ReadInfoResult_TopicInfo_PartitionInfo) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{19, 0, 0}
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetPartition() uint64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetStartOffset() uint64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetCommitOffset() uint64 {
	if x != nil {
		return x.CommitOffset
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetCommitTimeLagMs() uint64 {
	if x != nil {
		return x.CommitTimeLagMs
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetReadOffset() uint64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetReadTimeLagMs() uint64 {
	if x != nil {
		return x.ReadTimeLagMs
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetClientNode() string {
	if x != nil {
		return x.ClientNode
	}
	return ""
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetProxyNode() string {
	if x != nil {
		return x.ProxyNode
	}
	return ""
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetTabletNode() string {
	if x != nil {
		return x.TabletNode
	}
	return ""
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetAssignTimestampMs() uint64 {
	if x != nil {
		return x.AssignTimestampMs
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetLastReadCookie() uint64 {
	if x != nil {
		return x.LastReadCookie
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetCommittedReadCookie() uint64 {
	if x != nil {
		return x.CommittedReadCookie
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetOutOfOrderReadCookiesToCommit() []uint64 {
	if x != nil {
		return x.OutOfOrderReadCookiesToCommit
	}
	return nil
}

type Credentials_Iam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint          string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ServiceAccountKey string `protobuf:"bytes,2,opt,name=service_account_key,json=serviceAccountKey,proto3" json:"service_account_key,omitempty"`
}

func (x *Credentials_Iam) Reset() {
	*x = Credentials_Iam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials_Iam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials_Iam) ProtoMessage() {}

func (x *Credentials_Iam) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials_Iam.ProtoReflect.Descriptor instead.
func (*Credentials_Iam) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{23, 0}
}

func (x *Credentials_Iam) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Credentials_Iam) GetServiceAccountKey() string {
	if x != nil {
		return x.ServiceAccountKey
	}
	return ""
}

// Message for read rules description.
type TopicSettings_ReadRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For what consumer this read rule is. Must be valid not empty consumer name.
	// Is key for read rules. There could be only one read rule with corresponding consumer name.
	ConsumerName string `protobuf:"bytes,1,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	// Flag that this consumer is important.
	Important bool `protobuf:"varint,2,opt,name=important,proto3" json:"important,omitempty"`
	// All messages with smaller timestamp of write will be skipped.
	StartingMessageTimestampMs int64 `protobuf:"varint,3,opt,name=starting_message_timestamp_ms,json=startingMessageTimestampMs,proto3" json:"starting_message_timestamp_ms,omitempty"`
	// Max format version that is supported by this consumer.
	// supported_format on topic must not be greater.
	SupportedFormat TopicSettings_Format `protobuf:"varint,4,opt,name=supported_format,json=supportedFormat,proto3,enum=Ydb.PersQueue.V1.TopicSettings_Format" json:"supported_format,omitempty"`
	// List of supported codecs by this consumer.
	// supported_codecs on topic must be contained inside this list.
	SupportedCodecs []Codec `protobuf:"varint,5,rep,packed,name=supported_codecs,json=supportedCodecs,proto3,enum=Ydb.PersQueue.V1.Codec" json:"supported_codecs,omitempty"`
	// Read rule version. Any non-negative integer.
	Version int64 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	// Client service type.
	ServiceType string `protobuf:"bytes,7,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
}

func (x *TopicSettings_ReadRule) Reset() {
	*x = TopicSettings_ReadRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicSettings_ReadRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSettings_ReadRule) ProtoMessage() {}

func (x *TopicSettings_ReadRule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSettings_ReadRule.ProtoReflect.Descriptor instead.
func (*TopicSettings_ReadRule) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{24, 0}
}

func (x *TopicSettings_ReadRule) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

func (x *TopicSettings_ReadRule) GetImportant() bool {
	if x != nil {
		return x.Important
	}
	return false
}

func (x *TopicSettings_ReadRule) GetStartingMessageTimestampMs() int64 {
	if x != nil {
		return x.StartingMessageTimestampMs
	}
	return 0
}

func (x *TopicSettings_ReadRule) GetSupportedFormat() TopicSettings_Format {
	if x != nil {
		return x.SupportedFormat
	}
	return TopicSettings_FORMAT_UNSPECIFIED
}

func (x *TopicSettings_ReadRule) GetSupportedCodecs() []Codec {
	if x != nil {
		return x.SupportedCodecs
	}
	return nil
}

func (x *TopicSettings_ReadRule) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TopicSettings_ReadRule) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

// Message for remote mirror rule description.
type TopicSettings_RemoteMirrorRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source cluster endpoint in format server:port.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Source topic that we want to mirror.
	TopicPath string `protobuf:"bytes,2,opt,name=topic_path,json=topicPath,proto3" json:"topic_path,omitempty"`
	// Source consumer for reading source topic.
	ConsumerName string `protobuf:"bytes,3,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	// Credentials for reading source topic by source consumer.
	Credentials *Credentials `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// All messages with smaller timestamp of write will be skipped.
	StartingMessageTimestampMs int64 `protobuf:"varint,5,opt,name=starting_message_timestamp_ms,json=startingMessageTimestampMs,proto3" json:"starting_message_timestamp_ms,omitempty"`
	// Database
	Database string `protobuf:"bytes,6,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *TopicSettings_RemoteMirrorRule) Reset() {
	*x = TopicSettings_RemoteMirrorRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicSettings_RemoteMirrorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSettings_RemoteMirrorRule) ProtoMessage() {}

func (x *TopicSettings_RemoteMirrorRule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSettings_RemoteMirrorRule.ProtoReflect.Descriptor instead.
func (*TopicSettings_RemoteMirrorRule) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{24, 2}
}

func (x *TopicSettings_RemoteMirrorRule) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TopicSettings_RemoteMirrorRule) GetTopicPath() string {
	if x != nil {
		return x.TopicPath
	}
	return ""
}

func (x *TopicSettings_RemoteMirrorRule) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

func (x *TopicSettings_RemoteMirrorRule) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *TopicSettings_RemoteMirrorRule) GetStartingMessageTimestampMs() int64 {
	if x != nil {
		return x.StartingMessageTimestampMs
	}
	return 0
}

func (x *TopicSettings_RemoteMirrorRule) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

var File_protos_ydb_persqueue_v1_proto protoreflect.FileDescriptor

var file_protos_ydb_persqueue_v1_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79,
	0x64, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64,
	0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x09, 0x4d,
	0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x50, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x2a, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x15,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x0a, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0xb8, 0x04, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x6d, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x1a, 0x3e, 0x0a,
	0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xaf, 0x03,
	0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a,
	0x0a, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x61, 0x72, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x17,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x10, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xa2, 0x0b, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xaa, 0x03, 0x0a, 0x0c,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x8f, 0x02, 0x0a, 0x12, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x68, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x97, 0x02, 0x0a, 0x0f, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x44,
	0x0a, 0x1f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x49,
	0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1e, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x12, 0x42, 0x0a, 0x1e, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1a, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x56, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x72, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xee, 0x01, 0x0a, 0x10,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x9e, 0x1d, 0x0a,
	0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0c, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x20, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x63, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x1f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x61, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x13, 0x72, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x95, 0x01, 0x0a,
	0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x61, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x73, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0xa9, 0x09, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x70, 0x0a, 0x14, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x67,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x41, 0x74,
	0x4d, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x12, 0x54, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x1a,
	0xb9, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x19, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x17, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x9c, 0x03, 0x0a,
	0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x73, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x5b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x49, 0x0a, 0x0b, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xc5, 0x01, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x50,
	0x0a, 0x1c, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x1a, 0x46, 0x0a, 0x10, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x1a, 0x67, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x81, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6e, 0x0a, 0x13,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x2a, 0x0a, 0x12,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x91, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x41, 0x74, 0x4d, 0x73, 0x1a, 0x7d, 0x0a, 0x0f,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x1c,
	0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0x60, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x1e, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b,
	0x73, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x21, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70,
	0x0a, 0x13, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x73, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x61, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x15,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xc7, 0x02, 0x0a, 0x0c, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x1d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x58, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x4c, 0x0a, 0x1e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xb9, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x56, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a,
	0x96, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0xa2, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x1c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x54, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x1a, 0x77, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0xe2, 0x06,
	0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e,
	0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xa6,
	0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x2d, 0x0a,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x6e, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x99, 0x02, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x68, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x9c, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x1a, 0xd3, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x5f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x41, 0x74, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x1a, 0x13, 0x0a, 0x11, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x14, 0x0a,
	0x12, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x1a, 0x44, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x22, 0xf3, 0x15, 0x0a, 0x23, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x50, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x60, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x56, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x5c, 0x0a, 0x08,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x91, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x41, 0x74, 0x4d, 0x73, 0x1a, 0xb2, 0x0a, 0x0a,
	0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x14,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x12, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x4c, 0x61, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73,
	0x12, 0x36, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x12, 0x5d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x64, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xba, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xc4, 0x04, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xa1, 0x03,
	0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x54, 0x52,
	0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x41, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x04, 0x1a, 0x06, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x82, 0x02, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x8d,
	0x01, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x1a, 0x8c,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x8b, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x90, 0x17, 0x0a, 0x23, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x12, 0x69, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x5c, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x59, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xd0, 0x02,
	0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0xa3, 0x01,
	0x0a, 0x1d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x61, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x1a, 0x4c, 0x0a, 0x1e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xcd, 0x01, 0x0a, 0x08, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x1a, 0xdc, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a,
	0x8f, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x1a, 0xfa, 0x07, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x74, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xa6, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x65, 0x71, 0x4e, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x91,
	0x02, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x6e, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0xb9, 0x02, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x8c,
	0x02, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x10, 0x52, 0x65, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x08, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0xfa, 0x07,
	0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0xe6, 0x05, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x67, 0x5f,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x67, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x61,
	0x67, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x4a,
	0x0a, 0x23, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x04, 0x52, 0x1d, 0x6f, 0x75, 0x74,
	0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x72, 0x0a, 0x10, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x4c,
	0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xea, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x21, 0x0a, 0x0b, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x6a, 0x77, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6a, 0x77, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e,
	0x49, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x69, 0x61, 0x6d, 0x1a, 0x51, 0x0a, 0x03, 0x49, 0x61,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x0d, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xd2, 0x0e, 0x0a,
	0x0d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xb2, 0xe6, 0x2a, 0x03, 0x3e, 0x20,
	0x30, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xb2, 0xe6, 0x2a, 0x03, 0x3e, 0x20, 0x30, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x12, 0x42, 0x0a,
	0x17, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08,
	0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x5d, 0x0a, 0x27, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x22, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73,
	0x12, 0x61, 0x0a, 0x29, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x24, 0x6d,
	0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x42, 0x06, 0x9a, 0xe6, 0x2a, 0x02, 0x18,
	0x64, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x73, 0x12, 0x45, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30,
	0x52, 0x17, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x19, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6,
	0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x43,
	0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x16, 0x6d, 0x61, 0x78,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x07, 0x9a, 0xe6, 0x2a, 0x03, 0x18, 0xb8, 0x17, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x86, 0x03, 0x0a, 0x08, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0x90, 0xe6, 0x2a, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x4b, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20,
	0x30, 0x52, 0x1a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x51, 0x0a,
	0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x4a, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x42, 0x06, 0x9a, 0xe6, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x0f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2,
	0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x9c, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x1a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x22, 0x31, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x10, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0x90, 0xe6, 0x2a, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3b,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xb6, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0x90, 0xe6, 0x2a, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4d, 0x0a, 0x12, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc1, 0x01, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x18, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90,
	0xe6, 0x2a, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0x4e, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x13, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xe6, 0x2a, 0x01, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x16, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a,
	0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xe6, 0x2a, 0x01, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x50, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x04,
	0x73, 0x65, 0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x73,
	0x65, 0x6c, 0x66, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2a, 0x5d, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x44,
	0x45, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x4c, 0x5a, 0x4f, 0x50, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x04, 0x42,
	0x58, 0x0a, 0x12, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x79, 0x64, 0x62, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x79,
	0x64, 0x62, 0x2d, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x59, 0x64, 0x62, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x56, 0x31, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protos_ydb_persqueue_v1_proto_rawDescOnce sync.Once
	file_protos_ydb_persqueue_v1_proto_rawDescData = file_protos_ydb_persqueue_v1_proto_rawDesc
)

func file_protos_ydb_persqueue_v1_proto_rawDescGZIP() []byte {
	file_protos_ydb_persqueue_v1_proto_rawDescOnce.Do(func() {
		file_protos_ydb_persqueue_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_ydb_persqueue_v1_proto_rawDescData)
	})
	return file_protos_ydb_persqueue_v1_proto_rawDescData
}

var file_protos_ydb_persqueue_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_protos_ydb_persqueue_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 101)
var file_protos_ydb_persqueue_v1_proto_goTypes = []interface{}{
	(Codec)(0), // 0: Ydb.PersQueue.V1.Codec
	(StreamingReadClientMessage_InitRequest_State_PartitionSessionState_Status)(0),         // 1: Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.State.PartitionSessionState.Status
	(MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState_Status)(0), // 2: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.State.PartitionStreamState.Status
	(TopicSettings_Format)(0),                        // 3: Ydb.PersQueue.V1.TopicSettings.Format
	(*MetaValue)(nil),                                // 4: Ydb.PersQueue.V1.MetaValue
	(*OffsetsRange)(nil),                             // 5: Ydb.PersQueue.V1.OffsetsRange
	(*UpdateTokenRequest)(nil),                       // 6: Ydb.PersQueue.V1.UpdateTokenRequest
	(*UpdateTokenResponse)(nil),                      // 7: Ydb.PersQueue.V1.UpdateTokenResponse
	(*StreamingWriteClientMessage)(nil),              // 8: Ydb.PersQueue.V1.StreamingWriteClientMessage
	(*StreamingWriteServerMessage)(nil),              // 9: Ydb.PersQueue.V1.StreamingWriteServerMessage
	(*Path)(nil),                                     // 10: Ydb.PersQueue.V1.Path
	(*KeyValue)(nil),                                 // 11: Ydb.PersQueue.V1.KeyValue
	(*ReadParams)(nil),                               // 12: Ydb.PersQueue.V1.ReadParams
	(*CommitCookie)(nil),                             // 13: Ydb.PersQueue.V1.CommitCookie
	(*CommitOffsetRange)(nil),                        // 14: Ydb.PersQueue.V1.CommitOffsetRange
	(*PartitionSession)(nil),                         // 15: Ydb.PersQueue.V1.PartitionSession
	(*StreamingReadClientMessage)(nil),               // 16: Ydb.PersQueue.V1.StreamingReadClientMessage
	(*StreamingReadServerMessage)(nil),               // 17: Ydb.PersQueue.V1.StreamingReadServerMessage
	(*PartitionStream)(nil),                          // 18: Ydb.PersQueue.V1.PartitionStream
	(*MigrationStreamingReadClientMessage)(nil),      // 19: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage
	(*MigrationStreamingReadServerMessage)(nil),      // 20: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage
	(*ReadInfoRequest)(nil),                          // 21: Ydb.PersQueue.V1.ReadInfoRequest
	(*ReadInfoResponse)(nil),                         // 22: Ydb.PersQueue.V1.ReadInfoResponse
	(*ReadInfoResult)(nil),                           // 23: Ydb.PersQueue.V1.ReadInfoResult
	(*DropTopicRequest)(nil),                         // 24: Ydb.PersQueue.V1.DropTopicRequest
	(*DropTopicResponse)(nil),                        // 25: Ydb.PersQueue.V1.DropTopicResponse
	(*DropTopicResult)(nil),                          // 26: Ydb.PersQueue.V1.DropTopicResult
	(*Credentials)(nil),                              // 27: Ydb.PersQueue.V1.Credentials
	(*TopicSettings)(nil),                            // 28: Ydb.PersQueue.V1.TopicSettings
	(*CreateTopicRequest)(nil),                       // 29: Ydb.PersQueue.V1.CreateTopicRequest
	(*CreateTopicResponse)(nil),                      // 30: Ydb.PersQueue.V1.CreateTopicResponse
	(*CreateTopicResult)(nil),                        // 31: Ydb.PersQueue.V1.CreateTopicResult
	(*AlterTopicRequest)(nil),                        // 32: Ydb.PersQueue.V1.AlterTopicRequest
	(*AlterTopicResponse)(nil),                       // 33: Ydb.PersQueue.V1.AlterTopicResponse
	(*AlterTopicResult)(nil),                         // 34: Ydb.PersQueue.V1.AlterTopicResult
	(*AddReadRuleRequest)(nil),                       // 35: Ydb.PersQueue.V1.AddReadRuleRequest
	(*AddReadRuleResponse)(nil),                      // 36: Ydb.PersQueue.V1.AddReadRuleResponse
	(*AddReadRuleResult)(nil),                        // 37: Ydb.PersQueue.V1.AddReadRuleResult
	(*RemoveReadRuleRequest)(nil),                    // 38: Ydb.PersQueue.V1.RemoveReadRuleRequest
	(*RemoveReadRuleResponse)(nil),                   // 39: Ydb.PersQueue.V1.RemoveReadRuleResponse
	(*RemoveReadRuleResult)(nil),                     // 40: Ydb.PersQueue.V1.RemoveReadRuleResult
	(*DescribeTopicRequest)(nil),                     // 41: Ydb.PersQueue.V1.DescribeTopicRequest
	(*DescribeTopicResponse)(nil),                    // 42: Ydb.PersQueue.V1.DescribeTopicResponse
	(*DescribeTopicResult)(nil),                      // 43: Ydb.PersQueue.V1.DescribeTopicResult
	nil,                                              // 44: Ydb.PersQueue.V1.MetaValue.ValueEntry
	(*StreamingWriteClientMessage_InitRequest)(nil),  // 45: Ydb.PersQueue.V1.StreamingWriteClientMessage.InitRequest
	(*StreamingWriteClientMessage_WriteRequest)(nil), // 46: Ydb.PersQueue.V1.StreamingWriteClientMessage.WriteRequest
	nil, // 47: Ydb.PersQueue.V1.StreamingWriteClientMessage.InitRequest.SessionMetaEntry
	(*StreamingWriteServerMessage_InitResponse)(nil),                           // 48: Ydb.PersQueue.V1.StreamingWriteServerMessage.InitResponse
	(*StreamingWriteServerMessage_BatchWriteResponse)(nil),                     // 49: Ydb.PersQueue.V1.StreamingWriteServerMessage.BatchWriteResponse
	(*StreamingWriteServerMessage_WriteStatistics)(nil),                        // 50: Ydb.PersQueue.V1.StreamingWriteServerMessage.WriteStatistics
	(*StreamingReadClientMessage_InitRequest)(nil),                             // 51: Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest
	(*StreamingReadClientMessage_ReadRequest)(nil),                             // 52: Ydb.PersQueue.V1.StreamingReadClientMessage.ReadRequest
	(*StreamingReadClientMessage_StartPartitionSessionResponse)(nil),           // 53: Ydb.PersQueue.V1.StreamingReadClientMessage.StartPartitionSessionResponse
	(*StreamingReadClientMessage_StopPartitionSessionResponse)(nil),            // 54: Ydb.PersQueue.V1.StreamingReadClientMessage.StopPartitionSessionResponse
	(*StreamingReadClientMessage_PauseReadRequest)(nil),                        // 55: Ydb.PersQueue.V1.StreamingReadClientMessage.PauseReadRequest
	(*StreamingReadClientMessage_ResumeReadRequest)(nil),                       // 56: Ydb.PersQueue.V1.StreamingReadClientMessage.ResumeReadRequest
	(*StreamingReadClientMessage_CommitRequest)(nil),                           // 57: Ydb.PersQueue.V1.StreamingReadClientMessage.CommitRequest
	(*StreamingReadClientMessage_PartitionSessionStatusRequest)(nil),           // 58: Ydb.PersQueue.V1.StreamingReadClientMessage.PartitionSessionStatusRequest
	(*StreamingReadClientMessage_AddTopicRequest)(nil),                         // 59: Ydb.PersQueue.V1.StreamingReadClientMessage.AddTopicRequest
	(*StreamingReadClientMessage_RemoveTopicRequest)(nil),                      // 60: Ydb.PersQueue.V1.StreamingReadClientMessage.RemoveTopicRequest
	(*StreamingReadClientMessage_TopicReadSettings)(nil),                       // 61: Ydb.PersQueue.V1.StreamingReadClientMessage.TopicReadSettings
	(*StreamingReadClientMessage_PartitionCommit)(nil),                         // 62: Ydb.PersQueue.V1.StreamingReadClientMessage.PartitionCommit
	(*StreamingReadClientMessage_InitRequest_State)(nil),                       // 63: Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.State
	(*StreamingReadClientMessage_InitRequest_State_PartitionSessionState)(nil), // 64: Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.State.PartitionSessionState
	(*StreamingReadServerMessage_InitResponse)(nil),                            // 65: Ydb.PersQueue.V1.StreamingReadServerMessage.InitResponse
	(*StreamingReadServerMessage_StartPartitionSessionRequest)(nil),            // 66: Ydb.PersQueue.V1.StreamingReadServerMessage.StartPartitionSessionRequest
	(*StreamingReadServerMessage_StopPartitionSessionRequest)(nil),             // 67: Ydb.PersQueue.V1.StreamingReadServerMessage.StopPartitionSessionRequest
	(*StreamingReadServerMessage_CommitResponse)(nil),                          // 68: Ydb.PersQueue.V1.StreamingReadServerMessage.CommitResponse
	(*StreamingReadServerMessage_ReadResponse)(nil),                            // 69: Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse
	(*StreamingReadServerMessage_PartitionSessionStatusResponse)(nil),          // 70: Ydb.PersQueue.V1.StreamingReadServerMessage.PartitionSessionStatusResponse
	(*StreamingReadServerMessage_PauseReadResponse)(nil),                       // 71: Ydb.PersQueue.V1.StreamingReadServerMessage.PauseReadResponse
	(*StreamingReadServerMessage_ResumeReadResponse)(nil),                      // 72: Ydb.PersQueue.V1.StreamingReadServerMessage.ResumeReadResponse
	(*StreamingReadServerMessage_AddTopicResponse)(nil),                        // 73: Ydb.PersQueue.V1.StreamingReadServerMessage.AddTopicResponse
	(*StreamingReadServerMessage_RemoveTopicResponse)(nil),                     // 74: Ydb.PersQueue.V1.StreamingReadServerMessage.RemoveTopicResponse
	nil, // 75: Ydb.PersQueue.V1.StreamingReadServerMessage.InitResponse.BlockFormatVersionByTopicEntry
	(*StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset)(nil),         // 76: Ydb.PersQueue.V1.StreamingReadServerMessage.CommitResponse.PartitionCommittedOffset
	(*StreamingReadServerMessage_ReadResponse_MessageData)(nil),                        // 77: Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.MessageData
	(*StreamingReadServerMessage_ReadResponse_Batch)(nil),                              // 78: Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.Batch
	(*StreamingReadServerMessage_ReadResponse_PartitionData)(nil),                      // 79: Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.PartitionData
	(*MigrationStreamingReadClientMessage_TopicReadSettings)(nil),                      // 80: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.TopicReadSettings
	(*MigrationStreamingReadClientMessage_InitRequest)(nil),                            // 81: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest
	(*MigrationStreamingReadClientMessage_Read)(nil),                                   // 82: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Read
	(*MigrationStreamingReadClientMessage_StartRead)(nil),                              // 83: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.StartRead
	(*MigrationStreamingReadClientMessage_Released)(nil),                               // 84: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Released
	(*MigrationStreamingReadClientMessage_Commit)(nil),                                 // 85: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Commit
	(*MigrationStreamingReadClientMessage_Status)(nil),                                 // 86: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Status
	(*MigrationStreamingReadClientMessage_InitRequest_State)(nil),                      // 87: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.State
	(*MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState)(nil), // 88: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.State.PartitionStreamState
	(*MigrationStreamingReadServerMessage_InitResponse)(nil),                           // 89: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.InitResponse
	(*MigrationStreamingReadServerMessage_Assigned)(nil),                               // 90: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.Assigned
	(*MigrationStreamingReadServerMessage_Release)(nil),                                // 91: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.Release
	(*MigrationStreamingReadServerMessage_Committed)(nil),                              // 92: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.Committed
	(*MigrationStreamingReadServerMessage_DataBatch)(nil),                              // 93: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch
	(*MigrationStreamingReadServerMessage_PartitionStatus)(nil),                        // 94: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.PartitionStatus
	nil, // 95: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.InitResponse.BlockFormatVersionByTopicEntry
	(*MigrationStreamingReadServerMessage_DataBatch_MessageData)(nil),   // 96: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.MessageData
	(*MigrationStreamingReadServerMessage_DataBatch_Batch)(nil),         // 97: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.Batch
	(*MigrationStreamingReadServerMessage_DataBatch_PartitionData)(nil), // 98: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.PartitionData
	(*ReadInfoResult_TopicInfo)(nil),                                    // 99: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo
	(*ReadInfoResult_TopicInfo_PartitionInfo)(nil),                      // 100: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.PartitionInfo
	(*Credentials_Iam)(nil),                                             // 101: Ydb.PersQueue.V1.Credentials.Iam
	(*TopicSettings_ReadRule)(nil),                                      // 102: Ydb.PersQueue.V1.TopicSettings.ReadRule
	nil,                                                                 // 103: Ydb.PersQueue.V1.TopicSettings.AttributesEntry
	(*TopicSettings_RemoteMirrorRule)(nil),                              // 104: Ydb.PersQueue.V1.TopicSettings.RemoteMirrorRule
	(Ydb.StatusIds_StatusCode)(0),                                       // 105: Ydb.StatusIds.StatusCode
	(*Ydb_Issue.IssueMessage)(nil),                                      // 106: Ydb.Issue.IssueMessage
	(*Ydb_Operations.OperationParams)(nil),                              // 107: Ydb.Operations.OperationParams
	(*Ydb_Operations.Operation)(nil),                                    // 108: Ydb.Operations.Operation
	(*Ydb_Scheme.Entry)(nil),                                            // 109: Ydb.Scheme.Entry
}
var file_protos_ydb_persqueue_v1_proto_depIdxs = []int32{
	44,  // 0: Ydb.PersQueue.V1.MetaValue.value:type_name -> Ydb.PersQueue.V1.MetaValue.ValueEntry
	45,  // 1: Ydb.PersQueue.V1.StreamingWriteClientMessage.init_request:type_name -> Ydb.PersQueue.V1.StreamingWriteClientMessage.InitRequest
	46,  // 2: Ydb.PersQueue.V1.StreamingWriteClientMessage.write_request:type_name -> Ydb.PersQueue.V1.StreamingWriteClientMessage.WriteRequest
	6,   // 3: Ydb.PersQueue.V1.StreamingWriteClientMessage.update_token_request:type_name -> Ydb.PersQueue.V1.UpdateTokenRequest
	105, // 4: Ydb.PersQueue.V1.StreamingWriteServerMessage.status:type_name -> Ydb.StatusIds.StatusCode
	106, // 5: Ydb.PersQueue.V1.StreamingWriteServerMessage.issues:type_name -> Ydb.Issue.IssueMessage
	48,  // 6: Ydb.PersQueue.V1.StreamingWriteServerMessage.init_response:type_name -> Ydb.PersQueue.V1.StreamingWriteServerMessage.InitResponse
	49,  // 7: Ydb.PersQueue.V1.StreamingWriteServerMessage.batch_write_response:type_name -> Ydb.PersQueue.V1.StreamingWriteServerMessage.BatchWriteResponse
	7,   // 8: Ydb.PersQueue.V1.StreamingWriteServerMessage.update_token_response:type_name -> Ydb.PersQueue.V1.UpdateTokenResponse
	51,  // 9: Ydb.PersQueue.V1.StreamingReadClientMessage.init_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest
	52,  // 10: Ydb.PersQueue.V1.StreamingReadClientMessage.read_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.ReadRequest
	53,  // 11: Ydb.PersQueue.V1.StreamingReadClientMessage.start_partition_session_response:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.StartPartitionSessionResponse
	57,  // 12: Ydb.PersQueue.V1.StreamingReadClientMessage.commit_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.CommitRequest
	54,  // 13: Ydb.PersQueue.V1.StreamingReadClientMessage.stop_partition_session_response:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.StopPartitionSessionResponse
	55,  // 14: Ydb.PersQueue.V1.StreamingReadClientMessage.pause_read_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.PauseReadRequest
	56,  // 15: Ydb.PersQueue.V1.StreamingReadClientMessage.resume_read_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.ResumeReadRequest
	58,  // 16: Ydb.PersQueue.V1.StreamingReadClientMessage.partition_session_status_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.PartitionSessionStatusRequest
	59,  // 17: Ydb.PersQueue.V1.StreamingReadClientMessage.add_topic_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.AddTopicRequest
	60,  // 18: Ydb.PersQueue.V1.StreamingReadClientMessage.remove_topic_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.RemoveTopicRequest
	6,   // 19: Ydb.PersQueue.V1.StreamingReadClientMessage.update_token_request:type_name -> Ydb.PersQueue.V1.UpdateTokenRequest
	105, // 20: Ydb.PersQueue.V1.StreamingReadServerMessage.status:type_name -> Ydb.StatusIds.StatusCode
	106, // 21: Ydb.PersQueue.V1.StreamingReadServerMessage.issues:type_name -> Ydb.Issue.IssueMessage
	65,  // 22: Ydb.PersQueue.V1.StreamingReadServerMessage.init_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.InitResponse
	69,  // 23: Ydb.PersQueue.V1.StreamingReadServerMessage.read_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse
	66,  // 24: Ydb.PersQueue.V1.StreamingReadServerMessage.start_partition_session_request:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.StartPartitionSessionRequest
	67,  // 25: Ydb.PersQueue.V1.StreamingReadServerMessage.stop_partition_session_request:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.StopPartitionSessionRequest
	68,  // 26: Ydb.PersQueue.V1.StreamingReadServerMessage.commit_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.CommitResponse
	70,  // 27: Ydb.PersQueue.V1.StreamingReadServerMessage.partition_session_status_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.PartitionSessionStatusResponse
	71,  // 28: Ydb.PersQueue.V1.StreamingReadServerMessage.pause_read_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.PauseReadResponse
	72,  // 29: Ydb.PersQueue.V1.StreamingReadServerMessage.resume_read_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.ResumeReadResponse
	73,  // 30: Ydb.PersQueue.V1.StreamingReadServerMessage.add_topic_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.AddTopicResponse
	74,  // 31: Ydb.PersQueue.V1.StreamingReadServerMessage.remove_topic_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.RemoveTopicResponse
	7,   // 32: Ydb.PersQueue.V1.StreamingReadServerMessage.update_token_response:type_name -> Ydb.PersQueue.V1.UpdateTokenResponse
	81,  // 33: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.init_request:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest
	82,  // 34: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.read:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Read
	83,  // 35: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.start_read:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.StartRead
	85,  // 36: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.commit:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Commit
	84,  // 37: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.released:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Released
	86,  // 38: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.status:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Status
	105, // 39: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.status:type_name -> Ydb.StatusIds.StatusCode
	106, // 40: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.issues:type_name -> Ydb.Issue.IssueMessage
	89,  // 41: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.init_response:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.InitResponse
	93,  // 42: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.data_batch:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch
	90,  // 43: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.assigned:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.Assigned
	91,  // 44: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.release:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.Release
	92,  // 45: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.committed:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.Committed
	94,  // 46: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.partition_status:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.PartitionStatus
	107, // 47: Ydb.PersQueue.V1.ReadInfoRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	10,  // 48: Ydb.PersQueue.V1.ReadInfoRequest.topics:type_name -> Ydb.PersQueue.V1.Path
	10,  // 49: Ydb.PersQueue.V1.ReadInfoRequest.consumer:type_name -> Ydb.PersQueue.V1.Path
	108, // 50: Ydb.PersQueue.V1.ReadInfoResponse.operation:type_name -> Ydb.Operations.Operation
	99,  // 51: Ydb.PersQueue.V1.ReadInfoResult.topics:type_name -> Ydb.PersQueue.V1.ReadInfoResult.TopicInfo
	107, // 52: Ydb.PersQueue.V1.DropTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	108, // 53: Ydb.PersQueue.V1.DropTopicResponse.operation:type_name -> Ydb.Operations.Operation
	101, // 54: Ydb.PersQueue.V1.Credentials.iam:type_name -> Ydb.PersQueue.V1.Credentials.Iam
	3,   // 55: Ydb.PersQueue.V1.TopicSettings.supported_format:type_name -> Ydb.PersQueue.V1.TopicSettings.Format
	0,   // 56: Ydb.PersQueue.V1.TopicSettings.supported_codecs:type_name -> Ydb.PersQueue.V1.Codec
	102, // 57: Ydb.PersQueue.V1.TopicSettings.read_rules:type_name -> Ydb.PersQueue.V1.TopicSettings.ReadRule
	103, // 58: Ydb.PersQueue.V1.TopicSettings.attributes:type_name -> Ydb.PersQueue.V1.TopicSettings.AttributesEntry
	104, // 59: Ydb.PersQueue.V1.TopicSettings.remote_mirror_rule:type_name -> Ydb.PersQueue.V1.TopicSettings.RemoteMirrorRule
	107, // 60: Ydb.PersQueue.V1.CreateTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	28,  // 61: Ydb.PersQueue.V1.CreateTopicRequest.settings:type_name -> Ydb.PersQueue.V1.TopicSettings
	108, // 62: Ydb.PersQueue.V1.CreateTopicResponse.operation:type_name -> Ydb.Operations.Operation
	107, // 63: Ydb.PersQueue.V1.AlterTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	28,  // 64: Ydb.PersQueue.V1.AlterTopicRequest.settings:type_name -> Ydb.PersQueue.V1.TopicSettings
	108, // 65: Ydb.PersQueue.V1.AlterTopicResponse.operation:type_name -> Ydb.Operations.Operation
	107, // 66: Ydb.PersQueue.V1.AddReadRuleRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	102, // 67: Ydb.PersQueue.V1.AddReadRuleRequest.read_rule:type_name -> Ydb.PersQueue.V1.TopicSettings.ReadRule
	108, // 68: Ydb.PersQueue.V1.AddReadRuleResponse.operation:type_name -> Ydb.Operations.Operation
	107, // 69: Ydb.PersQueue.V1.RemoveReadRuleRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	108, // 70: Ydb.PersQueue.V1.RemoveReadRuleResponse.operation:type_name -> Ydb.Operations.Operation
	107, // 71: Ydb.PersQueue.V1.DescribeTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	108, // 72: Ydb.PersQueue.V1.DescribeTopicResponse.operation:type_name -> Ydb.Operations.Operation
	109, // 73: Ydb.PersQueue.V1.DescribeTopicResult.self:type_name -> Ydb.Scheme.Entry
	28,  // 74: Ydb.PersQueue.V1.DescribeTopicResult.settings:type_name -> Ydb.PersQueue.V1.TopicSettings
	47,  // 75: Ydb.PersQueue.V1.StreamingWriteClientMessage.InitRequest.session_meta:type_name -> Ydb.PersQueue.V1.StreamingWriteClientMessage.InitRequest.SessionMetaEntry
	0,   // 76: Ydb.PersQueue.V1.StreamingWriteServerMessage.InitResponse.supported_codecs:type_name -> Ydb.PersQueue.V1.Codec
	50,  // 77: Ydb.PersQueue.V1.StreamingWriteServerMessage.BatchWriteResponse.write_statistics:type_name -> Ydb.PersQueue.V1.StreamingWriteServerMessage.WriteStatistics
	61,  // 78: Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.topics_read_settings:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.TopicReadSettings
	63,  // 79: Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.state:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.State
	62,  // 80: Ydb.PersQueue.V1.StreamingReadClientMessage.CommitRequest.commits:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.PartitionCommit
	61,  // 81: Ydb.PersQueue.V1.StreamingReadClientMessage.AddTopicRequest.topic_read_settings:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.TopicReadSettings
	5,   // 82: Ydb.PersQueue.V1.StreamingReadClientMessage.PartitionCommit.offsets:type_name -> Ydb.PersQueue.V1.OffsetsRange
	64,  // 83: Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.State.partition_sessions_states:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.State.PartitionSessionState
	15,  // 84: Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.State.PartitionSessionState.partition_session:type_name -> Ydb.PersQueue.V1.PartitionSession
	5,   // 85: Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.State.PartitionSessionState.offsets_ranges:type_name -> Ydb.PersQueue.V1.OffsetsRange
	1,   // 86: Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.State.PartitionSessionState.status:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessage.InitRequest.State.PartitionSessionState.Status
	75,  // 87: Ydb.PersQueue.V1.StreamingReadServerMessage.InitResponse.block_format_version_by_topic:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.InitResponse.BlockFormatVersionByTopicEntry
	15,  // 88: Ydb.PersQueue.V1.StreamingReadServerMessage.StartPartitionSessionRequest.partition_session:type_name -> Ydb.PersQueue.V1.PartitionSession
	76,  // 89: Ydb.PersQueue.V1.StreamingReadServerMessage.CommitResponse.partitions_committed_offsets:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.CommitResponse.PartitionCommittedOffset
	79,  // 90: Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.partition_data:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.PartitionData
	0,   // 91: Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.MessageData.codec:type_name -> Ydb.PersQueue.V1.Codec
	4,   // 92: Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.Batch.session_meta:type_name -> Ydb.PersQueue.V1.MetaValue
	77,  // 93: Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.Batch.message_data:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.MessageData
	78,  // 94: Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.PartitionData.batches:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessage.ReadResponse.Batch
	80,  // 95: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.topics_read_settings:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.TopicReadSettings
	87,  // 96: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.state:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.State
	12,  // 97: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.read_params:type_name -> Ydb.PersQueue.V1.ReadParams
	10,  // 98: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.StartRead.topic:type_name -> Ydb.PersQueue.V1.Path
	10,  // 99: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Released.topic:type_name -> Ydb.PersQueue.V1.Path
	13,  // 100: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Commit.cookies:type_name -> Ydb.PersQueue.V1.CommitCookie
	14,  // 101: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Commit.offset_ranges:type_name -> Ydb.PersQueue.V1.CommitOffsetRange
	10,  // 102: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.Status.topic:type_name -> Ydb.PersQueue.V1.Path
	88,  // 103: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.State.partition_streams_states:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.State.PartitionStreamState
	18,  // 104: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.State.PartitionStreamState.partition_stream:type_name -> Ydb.PersQueue.V1.PartitionStream
	5,   // 105: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.State.PartitionStreamState.offset_ranges:type_name -> Ydb.PersQueue.V1.OffsetsRange
	2,   // 106: Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.State.PartitionStreamState.status:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadClientMessage.InitRequest.State.PartitionStreamState.Status
	95,  // 107: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.InitResponse.block_format_version_by_topic:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.InitResponse.BlockFormatVersionByTopicEntry
	10,  // 108: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.Assigned.topic:type_name -> Ydb.PersQueue.V1.Path
	10,  // 109: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.Release.topic:type_name -> Ydb.PersQueue.V1.Path
	13,  // 110: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.Committed.cookies:type_name -> Ydb.PersQueue.V1.CommitCookie
	14,  // 111: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.Committed.offset_ranges:type_name -> Ydb.PersQueue.V1.CommitOffsetRange
	98,  // 112: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.partition_data:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.PartitionData
	10,  // 113: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.PartitionStatus.topic:type_name -> Ydb.PersQueue.V1.Path
	0,   // 114: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.MessageData.codec:type_name -> Ydb.PersQueue.V1.Codec
	11,  // 115: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.Batch.extra_fields:type_name -> Ydb.PersQueue.V1.KeyValue
	96,  // 116: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.Batch.message_data:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.MessageData
	10,  // 117: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.PartitionData.topic:type_name -> Ydb.PersQueue.V1.Path
	97,  // 118: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.PartitionData.batches:type_name -> Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.Batch
	13,  // 119: Ydb.PersQueue.V1.MigrationStreamingReadServerMessage.DataBatch.PartitionData.cookie:type_name -> Ydb.PersQueue.V1.CommitCookie
	10,  // 120: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.topic:type_name -> Ydb.PersQueue.V1.Path
	105, // 121: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.status:type_name -> Ydb.StatusIds.StatusCode
	106, // 122: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.issues:type_name -> Ydb.Issue.IssueMessage
	100, // 123: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.partitions:type_name -> Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.PartitionInfo
	105, // 124: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.PartitionInfo.status:type_name -> Ydb.StatusIds.StatusCode
	106, // 125: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.PartitionInfo.issues:type_name -> Ydb.Issue.IssueMessage
	3,   // 126: Ydb.PersQueue.V1.TopicSettings.ReadRule.supported_format:type_name -> Ydb.PersQueue.V1.TopicSettings.Format
	0,   // 127: Ydb.PersQueue.V1.TopicSettings.ReadRule.supported_codecs:type_name -> Ydb.PersQueue.V1.Codec
	27,  // 128: Ydb.PersQueue.V1.TopicSettings.RemoteMirrorRule.credentials:type_name -> Ydb.PersQueue.V1.Credentials
	129, // [129:129] is the sub-list for method output_type
	129, // [129:129] is the sub-list for method input_type
	129, // [129:129] is the sub-list for extension type_name
	129, // [129:129] is the sub-list for extension extendee
	0,   // [0:129] is the sub-list for field type_name
}

func init() { file_protos_ydb_persqueue_v1_proto_init() }
func file_protos_ydb_persqueue_v1_proto_init() {
	if File_protos_ydb_persqueue_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_ydb_persqueue_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetsRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitOffsetRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReadRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReadRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReadRuleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReadRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReadRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReadRuleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteClientMessage_InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteClientMessage_WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteServerMessage_InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteServerMessage_BatchWriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteServerMessage_WriteStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_StartPartitionSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_StopPartitionSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_PauseReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_ResumeReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_PartitionSessionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_AddTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_RemoveTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_TopicReadSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_PartitionCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_InitRequest_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessage_InitRequest_State_PartitionSessionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_StartPartitionSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_StopPartitionSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_CommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_ReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_PartitionSessionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_PauseReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_ResumeReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_AddTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_RemoveTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_CommitResponse_PartitionCommittedOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_ReadResponse_MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_ReadResponse_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessage_ReadResponse_PartitionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadClientMessage_TopicReadSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadClientMessage_InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadClientMessage_Read); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadClientMessage_StartRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadClientMessage_Released); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadClientMessage_Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadClientMessage_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadClientMessage_InitRequest_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadClientMessage_InitRequest_State_PartitionStreamState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadServerMessage_InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadServerMessage_Assigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadServerMessage_Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadServerMessage_Committed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadServerMessage_DataBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadServerMessage_PartitionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadServerMessage_DataBatch_MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadServerMessage_DataBatch_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationStreamingReadServerMessage_DataBatch_PartitionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInfoResult_TopicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInfoResult_TopicInfo_PartitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials_Iam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicSettings_ReadRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicSettings_RemoteMirrorRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*StreamingWriteClientMessage_InitRequest_)(nil),
		(*StreamingWriteClientMessage_WriteRequest_)(nil),
		(*StreamingWriteClientMessage_UpdateTokenRequest)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*StreamingWriteServerMessage_InitResponse_)(nil),
		(*StreamingWriteServerMessage_BatchWriteResponse_)(nil),
		(*StreamingWriteServerMessage_UpdateTokenResponse)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*StreamingReadClientMessage_InitRequest_)(nil),
		(*StreamingReadClientMessage_ReadRequest_)(nil),
		(*StreamingReadClientMessage_StartPartitionSessionResponse_)(nil),
		(*StreamingReadClientMessage_CommitRequest_)(nil),
		(*StreamingReadClientMessage_StopPartitionSessionResponse_)(nil),
		(*StreamingReadClientMessage_PauseReadRequest_)(nil),
		(*StreamingReadClientMessage_ResumeReadRequest_)(nil),
		(*StreamingReadClientMessage_PartitionSessionStatusRequest_)(nil),
		(*StreamingReadClientMessage_AddTopicRequest_)(nil),
		(*StreamingReadClientMessage_RemoveTopicRequest_)(nil),
		(*StreamingReadClientMessage_UpdateTokenRequest)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*StreamingReadServerMessage_InitResponse_)(nil),
		(*StreamingReadServerMessage_ReadResponse_)(nil),
		(*StreamingReadServerMessage_StartPartitionSessionRequest_)(nil),
		(*StreamingReadServerMessage_StopPartitionSessionRequest_)(nil),
		(*StreamingReadServerMessage_CommitResponse_)(nil),
		(*StreamingReadServerMessage_PartitionSessionStatusResponse_)(nil),
		(*StreamingReadServerMessage_PauseReadResponse_)(nil),
		(*StreamingReadServerMessage_ResumeReadResponse_)(nil),
		(*StreamingReadServerMessage_AddTopicResponse_)(nil),
		(*StreamingReadServerMessage_RemoveTopicResponse_)(nil),
		(*StreamingReadServerMessage_UpdateTokenResponse)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*MigrationStreamingReadClientMessage_InitRequest_)(nil),
		(*MigrationStreamingReadClientMessage_Read_)(nil),
		(*MigrationStreamingReadClientMessage_StartRead_)(nil),
		(*MigrationStreamingReadClientMessage_Commit_)(nil),
		(*MigrationStreamingReadClientMessage_Released_)(nil),
		(*MigrationStreamingReadClientMessage_Status_)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*MigrationStreamingReadServerMessage_InitResponse_)(nil),
		(*MigrationStreamingReadServerMessage_DataBatch_)(nil),
		(*MigrationStreamingReadServerMessage_Assigned_)(nil),
		(*MigrationStreamingReadServerMessage_Release_)(nil),
		(*MigrationStreamingReadServerMessage_Committed_)(nil),
		(*MigrationStreamingReadServerMessage_PartitionStatus_)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Credentials_OauthToken)(nil),
		(*Credentials_JwtParams)(nil),
		(*Credentials_Iam_)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*TopicSettings_RetentionPeriodMs)(nil),
		(*TopicSettings_RetentionStorageBytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_ydb_persqueue_v1_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   101,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_ydb_persqueue_v1_proto_goTypes,
		DependencyIndexes: file_protos_ydb_persqueue_v1_proto_depIdxs,
		EnumInfos:         file_protos_ydb_persqueue_v1_proto_enumTypes,
		MessageInfos:      file_protos_ydb_persqueue_v1_proto_msgTypes,
	}.Build()
	File_protos_ydb_persqueue_v1_proto = out.File
	file_protos_ydb_persqueue_v1_proto_rawDesc = nil
	file_protos_ydb_persqueue_v1_proto_goTypes = nil
	file_protos_ydb_persqueue_v1_proto_depIdxs = nil
}
