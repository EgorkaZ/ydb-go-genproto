// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: protos/ydb_persqueue_v1.proto

package Ydb_PersQueue_V1

import (
	Ydb "github.com/ydb-platform/ydb-go-genproto/protos/Ydb"
	Ydb_Issue "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Issue"
	Ydb_Operations "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Operations"
	Ydb_Scheme "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Scheme"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Codec int32

const (
	Codec_CODEC_UNSPECIFIED Codec = 0
	Codec_CODEC_RAW         Codec = 1
	Codec_CODEC_GZIP        Codec = 2
	Codec_CODEC_ZSTD        Codec = 4
)

// Enum value maps for Codec.
var (
	Codec_name = map[int32]string{
		0: "CODEC_UNSPECIFIED",
		1: "CODEC_RAW",
		2: "CODEC_GZIP",
		4: "CODEC_ZSTD",
	}
	Codec_value = map[string]int32{
		"CODEC_UNSPECIFIED": 0,
		"CODEC_RAW":         1,
		"CODEC_GZIP":        2,
		"CODEC_ZSTD":        4,
	}
)

func (x Codec) Enum() *Codec {
	p := new(Codec)
	*p = x
	return p
}

func (x Codec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Codec) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_persqueue_v1_proto_enumTypes[0].Descriptor()
}

func (Codec) Type() protoreflect.EnumType {
	return &file_protos_ydb_persqueue_v1_proto_enumTypes[0]
}

func (x Codec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Codec.Descriptor instead.
func (Codec) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{0}
}

type StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status int32

const (
	// Not used state.
	StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_STATUS_UNSPECIFIED StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status = 0
	// Client seen Create message but not yet responded to server with Created message.
	StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_CREATING StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status = 1
	// Client seen Destroy message but not yet responded with Released message.
	StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_DESTROYING StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status = 2
	// Client sent Created or ResumeReadRequest message to server for this partition stream.
	StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_READING StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status = 3
	// Client sent StopReadRequest for this partition stream.
	StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_STOPPED StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status = 4
)

// Enum value maps for StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status.
var (
	StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "DESTROYING",
		3: "READING",
		4: "STOPPED",
	}
	StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"CREATING":           1,
		"DESTROYING":         2,
		"READING":            3,
		"STOPPED":            4,
	}
)

func (x StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status) Enum() *StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status {
	p := new(StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status)
	*p = x
	return p
}

func (x StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_persqueue_v1_proto_enumTypes[1].Descriptor()
}

func (StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status) Type() protoreflect.EnumType {
	return &file_protos_ydb_persqueue_v1_proto_enumTypes[1]
}

func (x StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status.Descriptor instead.
func (StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 0, 0, 0, 0}
}

type TopicSettings_Format int32

const (
	TopicSettings_FORMAT_UNSPECIFIED TopicSettings_Format = 0
	TopicSettings_FORMAT_BASE        TopicSettings_Format = 1
)

// Enum value maps for TopicSettings_Format.
var (
	TopicSettings_Format_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		1: "FORMAT_BASE",
	}
	TopicSettings_Format_value = map[string]int32{
		"FORMAT_UNSPECIFIED": 0,
		"FORMAT_BASE":        1,
	}
)

func (x TopicSettings_Format) Enum() *TopicSettings_Format {
	p := new(TopicSettings_Format)
	*p = x
	return p
}

func (x TopicSettings_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicSettings_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_persqueue_v1_proto_enumTypes[2].Descriptor()
}

func (TopicSettings_Format) Type() protoreflect.EnumType {
	return &file_protos_ydb_persqueue_v1_proto_enumTypes[2]
}

func (x TopicSettings_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicSettings_Format.Descriptor instead.
func (TopicSettings_Format) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{19, 0}
}

type SessionMetaValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[string]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SessionMetaValue) Reset() {
	*x = SessionMetaValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionMetaValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionMetaValue) ProtoMessage() {}

func (x *SessionMetaValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionMetaValue.ProtoReflect.Descriptor instead.
func (*SessionMetaValue) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{0}
}

func (x *SessionMetaValue) GetValue() map[string]string {
	if x != nil {
		return x.Value
	}
	return nil
}

//*
// Represents range [start_offset, end_offset).
type OffsetsRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartOffset int64 `protobuf:"varint,1,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset   int64 `protobuf:"varint,2,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *OffsetsRange) Reset() {
	*x = OffsetsRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetsRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetsRange) ProtoMessage() {}

func (x *OffsetsRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetsRange.ProtoReflect.Descriptor instead.
func (*OffsetsRange) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{1}
}

func (x *OffsetsRange) GetStartOffset() int64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *OffsetsRange) GetEndOffset() int64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

//*
// Request for write session. Contains one of:
//      InitRequest - handshake request.
//      WriteRequest - portion of data to be written.
//      UpdateTokenRequest - user credentials if update is needed.
type StreamingWriteClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ClientMessage:
	//	*StreamingWriteClientMessage_InitRequest_
	//	*StreamingWriteClientMessage_WriteRequest_
	//	*StreamingWriteClientMessage_UpdateTokenRequest_
	ClientMessage isStreamingWriteClientMessage_ClientMessage `protobuf_oneof:"client_message"`
}

func (x *StreamingWriteClientMessage) Reset() {
	*x = StreamingWriteClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteClientMessage) ProtoMessage() {}

func (x *StreamingWriteClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteClientMessage.ProtoReflect.Descriptor instead.
func (*StreamingWriteClientMessage) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{2}
}

func (m *StreamingWriteClientMessage) GetClientMessage() isStreamingWriteClientMessage_ClientMessage {
	if m != nil {
		return m.ClientMessage
	}
	return nil
}

func (x *StreamingWriteClientMessage) GetInitRequest() *StreamingWriteClientMessage_InitRequest {
	if x, ok := x.GetClientMessage().(*StreamingWriteClientMessage_InitRequest_); ok {
		return x.InitRequest
	}
	return nil
}

func (x *StreamingWriteClientMessage) GetWriteRequest() *StreamingWriteClientMessage_WriteRequest {
	if x, ok := x.GetClientMessage().(*StreamingWriteClientMessage_WriteRequest_); ok {
		return x.WriteRequest
	}
	return nil
}

func (x *StreamingWriteClientMessage) GetUpdateTokenRequest() *StreamingWriteClientMessage_UpdateTokenRequest {
	if x, ok := x.GetClientMessage().(*StreamingWriteClientMessage_UpdateTokenRequest_); ok {
		return x.UpdateTokenRequest
	}
	return nil
}

type isStreamingWriteClientMessage_ClientMessage interface {
	isStreamingWriteClientMessage_ClientMessage()
}

type StreamingWriteClientMessage_InitRequest_ struct {
	InitRequest *StreamingWriteClientMessage_InitRequest `protobuf:"bytes,1,opt,name=init_request,json=initRequest,proto3,oneof"`
}

type StreamingWriteClientMessage_WriteRequest_ struct {
	WriteRequest *StreamingWriteClientMessage_WriteRequest `protobuf:"bytes,2,opt,name=write_request,json=writeRequest,proto3,oneof"`
}

type StreamingWriteClientMessage_UpdateTokenRequest_ struct {
	UpdateTokenRequest *StreamingWriteClientMessage_UpdateTokenRequest `protobuf:"bytes,3,opt,name=update_token_request,json=updateTokenRequest,proto3,oneof"`
}

func (*StreamingWriteClientMessage_InitRequest_) isStreamingWriteClientMessage_ClientMessage() {}

func (*StreamingWriteClientMessage_WriteRequest_) isStreamingWriteClientMessage_ClientMessage() {}

func (*StreamingWriteClientMessage_UpdateTokenRequest_) isStreamingWriteClientMessage_ClientMessage() {
}

//*
// Response for write session. Contains one of:
//      InitResponse - correct handshake response.
//      BatchWriteResponse - acknowledgment of storing client messages.
//      UpdateTokenResponse - acknowledgment of reauthentication and reauthorization.
type StreamingWriteServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ServerMessage:
	//	*StreamingWriteServerMessage_InitResponse_
	//	*StreamingWriteServerMessage_BatchWriteResponse_
	//	*StreamingWriteServerMessage_UpdateTokenResponse_
	ServerMessage isStreamingWriteServerMessage_ServerMessage `protobuf_oneof:"server_message"`
	// Server status of response.
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Issues if any.
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *StreamingWriteServerMessage) Reset() {
	*x = StreamingWriteServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteServerMessage) ProtoMessage() {}

func (x *StreamingWriteServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteServerMessage.ProtoReflect.Descriptor instead.
func (*StreamingWriteServerMessage) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{3}
}

func (m *StreamingWriteServerMessage) GetServerMessage() isStreamingWriteServerMessage_ServerMessage {
	if m != nil {
		return m.ServerMessage
	}
	return nil
}

func (x *StreamingWriteServerMessage) GetInitResponse() *StreamingWriteServerMessage_InitResponse {
	if x, ok := x.GetServerMessage().(*StreamingWriteServerMessage_InitResponse_); ok {
		return x.InitResponse
	}
	return nil
}

func (x *StreamingWriteServerMessage) GetBatchWriteResponse() *StreamingWriteServerMessage_BatchWriteResponse {
	if x, ok := x.GetServerMessage().(*StreamingWriteServerMessage_BatchWriteResponse_); ok {
		return x.BatchWriteResponse
	}
	return nil
}

func (x *StreamingWriteServerMessage) GetUpdateTokenResponse() *StreamingWriteServerMessage_UpdateTokenResponse {
	if x, ok := x.GetServerMessage().(*StreamingWriteServerMessage_UpdateTokenResponse_); ok {
		return x.UpdateTokenResponse
	}
	return nil
}

func (x *StreamingWriteServerMessage) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_STATUS_CODE_UNSPECIFIED
}

func (x *StreamingWriteServerMessage) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

type isStreamingWriteServerMessage_ServerMessage interface {
	isStreamingWriteServerMessage_ServerMessage()
}

type StreamingWriteServerMessage_InitResponse_ struct {
	InitResponse *StreamingWriteServerMessage_InitResponse `protobuf:"bytes,3,opt,name=init_response,json=initResponse,proto3,oneof"`
}

type StreamingWriteServerMessage_BatchWriteResponse_ struct {
	BatchWriteResponse *StreamingWriteServerMessage_BatchWriteResponse `protobuf:"bytes,4,opt,name=batch_write_response,json=batchWriteResponse,proto3,oneof"`
}

type StreamingWriteServerMessage_UpdateTokenResponse_ struct {
	UpdateTokenResponse *StreamingWriteServerMessage_UpdateTokenResponse `protobuf:"bytes,5,opt,name=update_token_response,json=updateTokenResponse,proto3,oneof"`
}

func (*StreamingWriteServerMessage_InitResponse_) isStreamingWriteServerMessage_ServerMessage() {}

func (*StreamingWriteServerMessage_BatchWriteResponse_) isStreamingWriteServerMessage_ServerMessage() {
}

func (*StreamingWriteServerMessage_UpdateTokenResponse_) isStreamingWriteServerMessage_ServerMessage() {
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of object (topic/consumer).
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{4}
}

func (x *Path) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{5}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//*
// Single read parameters for server.
type ReadParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max messages to give to client in one read request.
	MaxReadMessagesCount uint32 `protobuf:"varint,1,opt,name=max_read_messages_count,json=maxReadMessagesCount,proto3" json:"max_read_messages_count,omitempty"`
	// Max size in bytes to give to client in one read request.
	MaxReadSize uint32 `protobuf:"varint,2,opt,name=max_read_size,json=maxReadSize,proto3" json:"max_read_size,omitempty"`
}

func (x *ReadParams) Reset() {
	*x = ReadParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadParams) ProtoMessage() {}

func (x *ReadParams) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadParams.ProtoReflect.Descriptor instead.
func (*ReadParams) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{6}
}

func (x *ReadParams) GetMaxReadMessagesCount() uint32 {
	if x != nil {
		return x.MaxReadMessagesCount
	}
	return 0
}

func (x *ReadParams) GetMaxReadSize() uint32 {
	if x != nil {
		return x.MaxReadSize
	}
	return 0
}

//*
// Message that is used for addressing read for commiting.
type CommitCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Assign identitifier of assigned partition from which read was done.
	AssignId uint64 `protobuf:"varint,1,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
	// Incremental identifier of concrete partition read batch.
	PartitionCookie uint64 `protobuf:"varint,2,opt,name=partition_cookie,json=partitionCookie,proto3" json:"partition_cookie,omitempty"`
}

func (x *CommitCookie) Reset() {
	*x = CommitCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCookie) ProtoMessage() {}

func (x *CommitCookie) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCookie.ProtoReflect.Descriptor instead.
func (*CommitCookie) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{7}
}

func (x *CommitCookie) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

func (x *CommitCookie) GetPartitionCookie() uint64 {
	if x != nil {
		return x.PartitionCookie
	}
	return 0
}

type CommitOffsetRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignId    uint64 `protobuf:"varint,1,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
	StartOffset uint64 `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset   uint64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *CommitOffsetRange) Reset() {
	*x = CommitOffsetRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitOffsetRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOffsetRange) ProtoMessage() {}

func (x *CommitOffsetRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOffsetRange.ProtoReflect.Descriptor instead.
func (*CommitOffsetRange) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{8}
}

func (x *CommitOffsetRange) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

func (x *CommitOffsetRange) GetStartOffset() uint64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *CommitOffsetRange) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

//*
// Request for read session. Contains one of:
//      InitRequest - handshake request.
//      ReadRequest - request for data.
//      CommitRequest - request for commit of some read data.
//      CreatePartitionStreamResponse - signal for server that client is ready to get data from partition.
//      DestroyPartitionStreamResponse - signal for server that client finished working with partition. Must be sent only after corresponding Release request from server.
//      StopReadRequest - signal for server that client is not ready to get more data from this partition.
//      ResumeReadRequest - signal for server that client is ready to get more data from this partition.
type StreamingReadClientMessageNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ClientMessage:
	//	*StreamingReadClientMessageNew_InitRequest_
	//	*StreamingReadClientMessageNew_ReadRequest_
	//	*StreamingReadClientMessageNew_CreatePartitionStreamResponse_
	//	*StreamingReadClientMessageNew_CommitRequest_
	//	*StreamingReadClientMessageNew_DestroyPartitionStreamResponse_
	//	*StreamingReadClientMessageNew_StopReadRequest_
	//	*StreamingReadClientMessageNew_ResumeReadRequest_
	//	*StreamingReadClientMessageNew_PartitionStreamStatusRequest_
	//	*StreamingReadClientMessageNew_AddTopicRequest_
	//	*StreamingReadClientMessageNew_RemoveTopicRequest_
	ClientMessage isStreamingReadClientMessageNew_ClientMessage `protobuf_oneof:"client_message"`
	// User credentials if update is needed or empty string.
	Token string `protobuf:"bytes,20,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *StreamingReadClientMessageNew) Reset() {
	*x = StreamingReadClientMessageNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew) ProtoMessage() {}

func (x *StreamingReadClientMessageNew) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9}
}

func (m *StreamingReadClientMessageNew) GetClientMessage() isStreamingReadClientMessageNew_ClientMessage {
	if m != nil {
		return m.ClientMessage
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetInitRequest() *StreamingReadClientMessageNew_InitRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessageNew_InitRequest_); ok {
		return x.InitRequest
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetReadRequest() *StreamingReadClientMessageNew_ReadRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessageNew_ReadRequest_); ok {
		return x.ReadRequest
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetCreatePartitionStreamResponse() *StreamingReadClientMessageNew_CreatePartitionStreamResponse {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessageNew_CreatePartitionStreamResponse_); ok {
		return x.CreatePartitionStreamResponse
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetCommitRequest() *StreamingReadClientMessageNew_CommitRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessageNew_CommitRequest_); ok {
		return x.CommitRequest
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetDestroyPartitionStreamResponse() *StreamingReadClientMessageNew_DestroyPartitionStreamResponse {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessageNew_DestroyPartitionStreamResponse_); ok {
		return x.DestroyPartitionStreamResponse
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetStopReadRequest() *StreamingReadClientMessageNew_StopReadRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessageNew_StopReadRequest_); ok {
		return x.StopReadRequest
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetResumeReadRequest() *StreamingReadClientMessageNew_ResumeReadRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessageNew_ResumeReadRequest_); ok {
		return x.ResumeReadRequest
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetPartitionStreamStatusRequest() *StreamingReadClientMessageNew_PartitionStreamStatusRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessageNew_PartitionStreamStatusRequest_); ok {
		return x.PartitionStreamStatusRequest
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetAddTopicRequest() *StreamingReadClientMessageNew_AddTopicRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessageNew_AddTopicRequest_); ok {
		return x.AddTopicRequest
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetRemoveTopicRequest() *StreamingReadClientMessageNew_RemoveTopicRequest {
	if x, ok := x.GetClientMessage().(*StreamingReadClientMessageNew_RemoveTopicRequest_); ok {
		return x.RemoveTopicRequest
	}
	return nil
}

func (x *StreamingReadClientMessageNew) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type isStreamingReadClientMessageNew_ClientMessage interface {
	isStreamingReadClientMessageNew_ClientMessage()
}

type StreamingReadClientMessageNew_InitRequest_ struct {
	InitRequest *StreamingReadClientMessageNew_InitRequest `protobuf:"bytes,1,opt,name=init_request,json=initRequest,proto3,oneof"`
}

type StreamingReadClientMessageNew_ReadRequest_ struct {
	ReadRequest *StreamingReadClientMessageNew_ReadRequest `protobuf:"bytes,2,opt,name=read_request,json=readRequest,proto3,oneof"`
}

type StreamingReadClientMessageNew_CreatePartitionStreamResponse_ struct {
	CreatePartitionStreamResponse *StreamingReadClientMessageNew_CreatePartitionStreamResponse `protobuf:"bytes,3,opt,name=create_partition_stream_response,json=createPartitionStreamResponse,proto3,oneof"`
}

type StreamingReadClientMessageNew_CommitRequest_ struct {
	CommitRequest *StreamingReadClientMessageNew_CommitRequest `protobuf:"bytes,4,opt,name=commit_request,json=commitRequest,proto3,oneof"`
}

type StreamingReadClientMessageNew_DestroyPartitionStreamResponse_ struct {
	DestroyPartitionStreamResponse *StreamingReadClientMessageNew_DestroyPartitionStreamResponse `protobuf:"bytes,5,opt,name=destroy_partition_stream_response,json=destroyPartitionStreamResponse,proto3,oneof"`
}

type StreamingReadClientMessageNew_StopReadRequest_ struct {
	StopReadRequest *StreamingReadClientMessageNew_StopReadRequest `protobuf:"bytes,6,opt,name=stop_read_request,json=stopReadRequest,proto3,oneof"`
}

type StreamingReadClientMessageNew_ResumeReadRequest_ struct {
	ResumeReadRequest *StreamingReadClientMessageNew_ResumeReadRequest `protobuf:"bytes,7,opt,name=resume_read_request,json=resumeReadRequest,proto3,oneof"`
}

type StreamingReadClientMessageNew_PartitionStreamStatusRequest_ struct {
	PartitionStreamStatusRequest *StreamingReadClientMessageNew_PartitionStreamStatusRequest `protobuf:"bytes,8,opt,name=partition_stream_status_request,json=partitionStreamStatusRequest,proto3,oneof"`
}

type StreamingReadClientMessageNew_AddTopicRequest_ struct {
	AddTopicRequest *StreamingReadClientMessageNew_AddTopicRequest `protobuf:"bytes,9,opt,name=add_topic_request,json=addTopicRequest,proto3,oneof"`
}

type StreamingReadClientMessageNew_RemoveTopicRequest_ struct {
	RemoveTopicRequest *StreamingReadClientMessageNew_RemoveTopicRequest `protobuf:"bytes,10,opt,name=remove_topic_request,json=removeTopicRequest,proto3,oneof"`
}

func (*StreamingReadClientMessageNew_InitRequest_) isStreamingReadClientMessageNew_ClientMessage() {}

func (*StreamingReadClientMessageNew_ReadRequest_) isStreamingReadClientMessageNew_ClientMessage() {}

func (*StreamingReadClientMessageNew_CreatePartitionStreamResponse_) isStreamingReadClientMessageNew_ClientMessage() {
}

func (*StreamingReadClientMessageNew_CommitRequest_) isStreamingReadClientMessageNew_ClientMessage() {
}

func (*StreamingReadClientMessageNew_DestroyPartitionStreamResponse_) isStreamingReadClientMessageNew_ClientMessage() {
}

func (*StreamingReadClientMessageNew_StopReadRequest_) isStreamingReadClientMessageNew_ClientMessage() {
}

func (*StreamingReadClientMessageNew_ResumeReadRequest_) isStreamingReadClientMessageNew_ClientMessage() {
}

func (*StreamingReadClientMessageNew_PartitionStreamStatusRequest_) isStreamingReadClientMessageNew_ClientMessage() {
}

func (*StreamingReadClientMessageNew_AddTopicRequest_) isStreamingReadClientMessageNew_ClientMessage() {
}

func (*StreamingReadClientMessageNew_RemoveTopicRequest_) isStreamingReadClientMessageNew_ClientMessage() {
}

//*
// Response for read session. Contains one of :
//      InitResponse - handshake response from server.
//      BatchReadResponse - portion of data.
//      CommitResponse - acknowledgment for commit.
//      CreatePartitionStreamRequest - command from server to create a partition partition stream.
//      DestroyPartitionStreamRequest - command from server to destroy a partition partition stream.
type StreamingReadServerMessageNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ServerMessage:
	//	*StreamingReadServerMessageNew_InitResponse_
	//	*StreamingReadServerMessageNew_BatchReadResponse_
	//	*StreamingReadServerMessageNew_CreatePartitionStreamRequest_
	//	*StreamingReadServerMessageNew_DestroyPartitionStreamRequest_
	//	*StreamingReadServerMessageNew_CommitResponse_
	//	*StreamingReadServerMessageNew_PartitionStreamStatusResponse_
	//	*StreamingReadServerMessageNew_StopReadResponse_
	//	*StreamingReadServerMessageNew_ResumeReadResponse_
	//	*StreamingReadServerMessageNew_AddTopicResponse_
	//	*StreamingReadServerMessageNew_RemoveTopicResponse_
	ServerMessage isStreamingReadServerMessageNew_ServerMessage `protobuf_oneof:"server_message"`
	Status        Ydb.StatusIds_StatusCode                      `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	Issues        []*Ydb_Issue.IssueMessage                     `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *StreamingReadServerMessageNew) Reset() {
	*x = StreamingReadServerMessageNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew) ProtoMessage() {}

func (x *StreamingReadServerMessageNew) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10}
}

func (m *StreamingReadServerMessageNew) GetServerMessage() isStreamingReadServerMessageNew_ServerMessage {
	if m != nil {
		return m.ServerMessage
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetInitResponse() *StreamingReadServerMessageNew_InitResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessageNew_InitResponse_); ok {
		return x.InitResponse
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetBatchReadResponse() *StreamingReadServerMessageNew_BatchReadResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessageNew_BatchReadResponse_); ok {
		return x.BatchReadResponse
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetCreatePartitionStreamRequest() *StreamingReadServerMessageNew_CreatePartitionStreamRequest {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessageNew_CreatePartitionStreamRequest_); ok {
		return x.CreatePartitionStreamRequest
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetDestroyPartitionStreamRequest() *StreamingReadServerMessageNew_DestroyPartitionStreamRequest {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessageNew_DestroyPartitionStreamRequest_); ok {
		return x.DestroyPartitionStreamRequest
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetCommitResponse() *StreamingReadServerMessageNew_CommitResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessageNew_CommitResponse_); ok {
		return x.CommitResponse
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetPartitionStreamStatusResponse() *StreamingReadServerMessageNew_PartitionStreamStatusResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessageNew_PartitionStreamStatusResponse_); ok {
		return x.PartitionStreamStatusResponse
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetStopReadResponse() *StreamingReadServerMessageNew_StopReadResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessageNew_StopReadResponse_); ok {
		return x.StopReadResponse
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetResumeReadResponse() *StreamingReadServerMessageNew_ResumeReadResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessageNew_ResumeReadResponse_); ok {
		return x.ResumeReadResponse
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetAddTopicResponse() *StreamingReadServerMessageNew_AddTopicResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessageNew_AddTopicResponse_); ok {
		return x.AddTopicResponse
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetRemoveTopicResponse() *StreamingReadServerMessageNew_RemoveTopicResponse {
	if x, ok := x.GetServerMessage().(*StreamingReadServerMessageNew_RemoveTopicResponse_); ok {
		return x.RemoveTopicResponse
	}
	return nil
}

func (x *StreamingReadServerMessageNew) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_STATUS_CODE_UNSPECIFIED
}

func (x *StreamingReadServerMessageNew) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

type isStreamingReadServerMessageNew_ServerMessage interface {
	isStreamingReadServerMessageNew_ServerMessage()
}

type StreamingReadServerMessageNew_InitResponse_ struct {
	InitResponse *StreamingReadServerMessageNew_InitResponse `protobuf:"bytes,3,opt,name=init_response,json=initResponse,proto3,oneof"`
}

type StreamingReadServerMessageNew_BatchReadResponse_ struct {
	BatchReadResponse *StreamingReadServerMessageNew_BatchReadResponse `protobuf:"bytes,4,opt,name=batch_read_response,json=batchReadResponse,proto3,oneof"`
}

type StreamingReadServerMessageNew_CreatePartitionStreamRequest_ struct {
	CreatePartitionStreamRequest *StreamingReadServerMessageNew_CreatePartitionStreamRequest `protobuf:"bytes,5,opt,name=create_partition_stream_request,json=createPartitionStreamRequest,proto3,oneof"`
}

type StreamingReadServerMessageNew_DestroyPartitionStreamRequest_ struct {
	DestroyPartitionStreamRequest *StreamingReadServerMessageNew_DestroyPartitionStreamRequest `protobuf:"bytes,6,opt,name=destroy_partition_stream_request,json=destroyPartitionStreamRequest,proto3,oneof"`
}

type StreamingReadServerMessageNew_CommitResponse_ struct {
	CommitResponse *StreamingReadServerMessageNew_CommitResponse `protobuf:"bytes,7,opt,name=commit_response,json=commitResponse,proto3,oneof"`
}

type StreamingReadServerMessageNew_PartitionStreamStatusResponse_ struct {
	PartitionStreamStatusResponse *StreamingReadServerMessageNew_PartitionStreamStatusResponse `protobuf:"bytes,8,opt,name=partition_stream_status_response,json=partitionStreamStatusResponse,proto3,oneof"`
}

type StreamingReadServerMessageNew_StopReadResponse_ struct {
	StopReadResponse *StreamingReadServerMessageNew_StopReadResponse `protobuf:"bytes,9,opt,name=stop_read_response,json=stopReadResponse,proto3,oneof"`
}

type StreamingReadServerMessageNew_ResumeReadResponse_ struct {
	ResumeReadResponse *StreamingReadServerMessageNew_ResumeReadResponse `protobuf:"bytes,10,opt,name=resume_read_response,json=resumeReadResponse,proto3,oneof"`
}

type StreamingReadServerMessageNew_AddTopicResponse_ struct {
	AddTopicResponse *StreamingReadServerMessageNew_AddTopicResponse `protobuf:"bytes,11,opt,name=add_topic_response,json=addTopicResponse,proto3,oneof"`
}

type StreamingReadServerMessageNew_RemoveTopicResponse_ struct {
	RemoveTopicResponse *StreamingReadServerMessageNew_RemoveTopicResponse `protobuf:"bytes,12,opt,name=remove_topic_response,json=removeTopicResponse,proto3,oneof"`
}

func (*StreamingReadServerMessageNew_InitResponse_) isStreamingReadServerMessageNew_ServerMessage() {}

func (*StreamingReadServerMessageNew_BatchReadResponse_) isStreamingReadServerMessageNew_ServerMessage() {
}

func (*StreamingReadServerMessageNew_CreatePartitionStreamRequest_) isStreamingReadServerMessageNew_ServerMessage() {
}

func (*StreamingReadServerMessageNew_DestroyPartitionStreamRequest_) isStreamingReadServerMessageNew_ServerMessage() {
}

func (*StreamingReadServerMessageNew_CommitResponse_) isStreamingReadServerMessageNew_ServerMessage() {
}

func (*StreamingReadServerMessageNew_PartitionStreamStatusResponse_) isStreamingReadServerMessageNew_ServerMessage() {
}

func (*StreamingReadServerMessageNew_StopReadResponse_) isStreamingReadServerMessageNew_ServerMessage() {
}

func (*StreamingReadServerMessageNew_ResumeReadResponse_) isStreamingReadServerMessageNew_ServerMessage() {
}

func (*StreamingReadServerMessageNew_AddTopicResponse_) isStreamingReadServerMessageNew_ServerMessage() {
}

func (*StreamingReadServerMessageNew_RemoveTopicResponse_) isStreamingReadServerMessageNew_ServerMessage() {
}

//*
// Message that represens concrete partition partition stream.
type PartitionStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path of partition.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Cluster of topic instance.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Partition identifier. Explicit only for debug purposes.
	PartitionId int64 `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Partition group identifier. Explicit only for debug purposes.
	PartitionGroupId int64 `protobuf:"varint,4,opt,name=partition_group_id,json=partitionGroupId,proto3" json:"partition_group_id,omitempty"`
	// Identitifier of partition stream. Unique inside one RPC call.
	PartitionStreamId int64 `protobuf:"varint,6,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
	// Opaque blob. Provide it with partition stream in state for session reconnects.
	ConnectionMeta []byte `protobuf:"bytes,7,opt,name=connection_meta,json=connectionMeta,proto3" json:"connection_meta,omitempty"`
}

func (x *PartitionStream) Reset() {
	*x = PartitionStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionStream) ProtoMessage() {}

func (x *PartitionStream) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionStream.ProtoReflect.Descriptor instead.
func (*PartitionStream) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{11}
}

func (x *PartitionStream) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PartitionStream) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *PartitionStream) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *PartitionStream) GetPartitionGroupId() int64 {
	if x != nil {
		return x.PartitionGroupId
	}
	return 0
}

func (x *PartitionStream) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

func (x *PartitionStream) GetConnectionMeta() []byte {
	if x != nil {
		return x.ConnectionMeta
	}
	return nil
}

type ReadInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// List of topics that are beeing read.
	Topics []*Path `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	// If get_only_original == false then return info about mirrored topics too.
	GetOnlyOriginal bool `protobuf:"varint,3,opt,name=get_only_original,json=getOnlyOriginal,proto3" json:"get_only_original,omitempty"`
	// Consumer path that is reading specified topics.
	Consumer *Path `protobuf:"bytes,4,opt,name=consumer,proto3" json:"consumer,omitempty"`
}

func (x *ReadInfoRequest) Reset() {
	*x = ReadInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInfoRequest) ProtoMessage() {}

func (x *ReadInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInfoRequest.ProtoReflect.Descriptor instead.
func (*ReadInfoRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{12}
}

func (x *ReadInfoRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *ReadInfoRequest) GetTopics() []*Path {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *ReadInfoRequest) GetGetOnlyOriginal() bool {
	if x != nil {
		return x.GetOnlyOriginal
	}
	return false
}

func (x *ReadInfoRequest) GetConsumer() *Path {
	if x != nil {
		return x.Consumer
	}
	return nil
}

type ReadInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *ReadInfoResponse) Reset() {
	*x = ReadInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInfoResponse) ProtoMessage() {}

func (x *ReadInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInfoResponse.ProtoReflect.Descriptor instead.
func (*ReadInfoResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{13}
}

func (x *ReadInfoResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type ReadInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of topics info.
	Topics []*ReadInfoResult_TopicInfo `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *ReadInfoResult) Reset() {
	*x = ReadInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInfoResult) ProtoMessage() {}

func (x *ReadInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInfoResult.ProtoReflect.Descriptor instead.
func (*ReadInfoResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{14}
}

func (x *ReadInfoResult) GetTopics() []*ReadInfoResult_TopicInfo {
	if x != nil {
		return x.Topics
	}
	return nil
}

type DropTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DropTopicRequest) Reset() {
	*x = DropTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTopicRequest) ProtoMessage() {}

func (x *DropTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTopicRequest.ProtoReflect.Descriptor instead.
func (*DropTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{15}
}

func (x *DropTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *DropTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DropTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DropTopicResponse) Reset() {
	*x = DropTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTopicResponse) ProtoMessage() {}

func (x *DropTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTopicResponse.ProtoReflect.Descriptor instead.
func (*DropTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{16}
}

func (x *DropTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type DropTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DropTopicResult) Reset() {
	*x = DropTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTopicResult) ProtoMessage() {}

func (x *DropTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTopicResult.ProtoReflect.Descriptor instead.
func (*DropTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{17}
}

type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credentials:
	//	*Credentials_OauthToken
	//	*Credentials_JwtParams
	//	*Credentials_Iam_
	Credentials isCredentials_Credentials `protobuf_oneof:"credentials"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{18}
}

func (m *Credentials) GetCredentials() isCredentials_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *Credentials) GetOauthToken() string {
	if x, ok := x.GetCredentials().(*Credentials_OauthToken); ok {
		return x.OauthToken
	}
	return ""
}

func (x *Credentials) GetJwtParams() string {
	if x, ok := x.GetCredentials().(*Credentials_JwtParams); ok {
		return x.JwtParams
	}
	return ""
}

func (x *Credentials) GetIam() *Credentials_Iam {
	if x, ok := x.GetCredentials().(*Credentials_Iam_); ok {
		return x.Iam
	}
	return nil
}

type isCredentials_Credentials interface {
	isCredentials_Credentials()
}

type Credentials_OauthToken struct {
	OauthToken string `protobuf:"bytes,1,opt,name=oauth_token,json=oauthToken,proto3,oneof"`
}

type Credentials_JwtParams struct {
	JwtParams string `protobuf:"bytes,2,opt,name=jwt_params,json=jwtParams,proto3,oneof"`
}

type Credentials_Iam_ struct {
	Iam *Credentials_Iam `protobuf:"bytes,3,opt,name=iam,proto3,oneof"`
}

func (*Credentials_OauthToken) isCredentials_Credentials() {}

func (*Credentials_JwtParams) isCredentials_Credentials() {}

func (*Credentials_Iam_) isCredentials_Credentials() {}

type TopicSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How many partitions in topic. Must less than database limit. Default limit - 10.
	PartitionsCount int32 `protobuf:"varint,1,opt,name=partitions_count,json=partitionsCount,proto3" json:"partitions_count,omitempty"`
	// How long data in partition should be stored. Must be greater than 0 and less than limit for this database.  Default limit - 36 hours.
	RetentionPeriodMs int64 `protobuf:"varint,2,opt,name=retention_period_ms,json=retentionPeriodMs,proto3" json:"retention_period_ms,omitempty"`
	// How long last written seqno for message group should be stored. Must be greater then retention_period_ms and less then limit for this database.  Default limit - 16 days.
	MessageGroupSeqnoRetentionPeriodMs int64 `protobuf:"varint,12,opt,name=message_group_seqno_retention_period_ms,json=messageGroupSeqnoRetentionPeriodMs,proto3" json:"message_group_seqno_retention_period_ms,omitempty"`
	// How many last written seqno for various message groups should be stored per partition. Must be less than limit for this database.  Default limit - 6*10^6 values.
	MaxPartitionMessageGroupsSeqnoStored int64 `protobuf:"varint,13,opt,name=max_partition_message_groups_seqno_stored,json=maxPartitionMessageGroupsSeqnoStored,proto3" json:"max_partition_message_groups_seqno_stored,omitempty"`
	// Max format version that is allowed for writers. Must be value from enum FormatVersion.
	// Writes with greater format version are forbiden.
	SupportedFormat TopicSettings_Format `protobuf:"varint,3,opt,name=supported_format,json=supportedFormat,proto3,enum=Ydb.PersQueue.V1.TopicSettings_Format" json:"supported_format,omitempty"`
	// List of allowed codecs for writers.
	// Writes with codec not from this list are forbiden.
	SupportedCodecs []Codec `protobuf:"varint,4,rep,packed,name=supported_codecs,json=supportedCodecs,proto3,enum=Ydb.PersQueue.V1.Codec" json:"supported_codecs,omitempty"`
	// Max storage usage for each topic's partition. Must be less than database limit. Default limit - 130 GB.
	MaxPartitionStorageSize int64 `protobuf:"varint,5,opt,name=max_partition_storage_size,json=maxPartitionStorageSize,proto3" json:"max_partition_storage_size,omitempty"`
	// Partition write speed in bytes per second. Must be less than database limit. Default limit - 1 MB/s.
	MaxPartitionWriteSpeed int64 `protobuf:"varint,6,opt,name=max_partition_write_speed,json=maxPartitionWriteSpeed,proto3" json:"max_partition_write_speed,omitempty"`
	// Burst size for write in partition, in bytes. Must be less than database limit. Default limit - 1 MB.
	MaxPartitionWriteBurst int64 `protobuf:"varint,7,opt,name=max_partition_write_burst,json=maxPartitionWriteBurst,proto3" json:"max_partition_write_burst,omitempty"`
	// Disallows client writes. Used for mirrored topics in federation.
	ClientWriteDisabled bool `protobuf:"varint,8,opt,name=client_write_disabled,json=clientWriteDisabled,proto3" json:"client_write_disabled,omitempty"`
	// List of consumer read rules for this topic.
	ReadRules []*TopicSettings_ReadRule `protobuf:"bytes,9,rep,name=read_rules,json=readRules,proto3" json:"read_rules,omitempty"`
	// User and server attributes of topic. Server attributes starts from "_" and will be validated by server.
	Attributes map[string]string `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// remote mirror rule for this topic.
	RemoteMirrorRule *TopicSettings_RemoteMirrorRule `protobuf:"bytes,11,opt,name=remote_mirror_rule,json=remoteMirrorRule,proto3" json:"remote_mirror_rule,omitempty"`
}

func (x *TopicSettings) Reset() {
	*x = TopicSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSettings) ProtoMessage() {}

func (x *TopicSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSettings.ProtoReflect.Descriptor instead.
func (*TopicSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{19}
}

func (x *TopicSettings) GetPartitionsCount() int32 {
	if x != nil {
		return x.PartitionsCount
	}
	return 0
}

func (x *TopicSettings) GetRetentionPeriodMs() int64 {
	if x != nil {
		return x.RetentionPeriodMs
	}
	return 0
}

func (x *TopicSettings) GetMessageGroupSeqnoRetentionPeriodMs() int64 {
	if x != nil {
		return x.MessageGroupSeqnoRetentionPeriodMs
	}
	return 0
}

func (x *TopicSettings) GetMaxPartitionMessageGroupsSeqnoStored() int64 {
	if x != nil {
		return x.MaxPartitionMessageGroupsSeqnoStored
	}
	return 0
}

func (x *TopicSettings) GetSupportedFormat() TopicSettings_Format {
	if x != nil {
		return x.SupportedFormat
	}
	return TopicSettings_FORMAT_UNSPECIFIED
}

func (x *TopicSettings) GetSupportedCodecs() []Codec {
	if x != nil {
		return x.SupportedCodecs
	}
	return nil
}

func (x *TopicSettings) GetMaxPartitionStorageSize() int64 {
	if x != nil {
		return x.MaxPartitionStorageSize
	}
	return 0
}

func (x *TopicSettings) GetMaxPartitionWriteSpeed() int64 {
	if x != nil {
		return x.MaxPartitionWriteSpeed
	}
	return 0
}

func (x *TopicSettings) GetMaxPartitionWriteBurst() int64 {
	if x != nil {
		return x.MaxPartitionWriteBurst
	}
	return 0
}

func (x *TopicSettings) GetClientWriteDisabled() bool {
	if x != nil {
		return x.ClientWriteDisabled
	}
	return false
}

func (x *TopicSettings) GetReadRules() []*TopicSettings_ReadRule {
	if x != nil {
		return x.ReadRules
	}
	return nil
}

func (x *TopicSettings) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *TopicSettings) GetRemoteMirrorRule() *TopicSettings_RemoteMirrorRule {
	if x != nil {
		return x.RemoteMirrorRule
	}
	return nil
}

type CreateTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Topic settings.
	Settings *TopicSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *CreateTopicRequest) Reset() {
	*x = CreateTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicRequest) ProtoMessage() {}

func (x *CreateTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicRequest.ProtoReflect.Descriptor instead.
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{20}
}

func (x *CreateTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *CreateTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateTopicRequest) GetSettings() *TopicSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type CreateTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *CreateTopicResponse) Reset() {
	*x = CreateTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicResponse) ProtoMessage() {}

func (x *CreateTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicResponse.ProtoReflect.Descriptor instead.
func (*CreateTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{21}
}

func (x *CreateTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type CreateTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTopicResult) Reset() {
	*x = CreateTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicResult) ProtoMessage() {}

func (x *CreateTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicResult.ProtoReflect.Descriptor instead.
func (*CreateTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{22}
}

type AlterTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// New topic settings to be set. All options inside should be set despite same value.
	Settings *TopicSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *AlterTopicRequest) Reset() {
	*x = AlterTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTopicRequest) ProtoMessage() {}

func (x *AlterTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTopicRequest.ProtoReflect.Descriptor instead.
func (*AlterTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{23}
}

func (x *AlterTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *AlterTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AlterTopicRequest) GetSettings() *TopicSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type AlterTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *AlterTopicResponse) Reset() {
	*x = AlterTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTopicResponse) ProtoMessage() {}

func (x *AlterTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTopicResponse.ProtoReflect.Descriptor instead.
func (*AlterTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{24}
}

func (x *AlterTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

//*
// Update topic result message that will be inside UpdateTopicResponse.operation.
type AlterTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AlterTopicResult) Reset() {
	*x = AlterTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTopicResult) ProtoMessage() {}

func (x *AlterTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTopicResult.ProtoReflect.Descriptor instead.
func (*AlterTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{25}
}

//*
// Add read rules for existing topic request.
type AddReadRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// read rules to add
	ReadRule *TopicSettings_ReadRule `protobuf:"bytes,3,opt,name=read_rule,json=readRule,proto3" json:"read_rule,omitempty"`
}

func (x *AddReadRuleRequest) Reset() {
	*x = AddReadRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReadRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReadRuleRequest) ProtoMessage() {}

func (x *AddReadRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReadRuleRequest.ProtoReflect.Descriptor instead.
func (*AddReadRuleRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{26}
}

func (x *AddReadRuleRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *AddReadRuleRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AddReadRuleRequest) GetReadRule() *TopicSettings_ReadRule {
	if x != nil {
		return x.ReadRule
	}
	return nil
}

//*
// Add read rules for existing topic response.
type AddReadRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *AddReadRuleResponse) Reset() {
	*x = AddReadRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReadRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReadRuleResponse) ProtoMessage() {}

func (x *AddReadRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReadRuleResponse.ProtoReflect.Descriptor instead.
func (*AddReadRuleResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{27}
}

func (x *AddReadRuleResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

//*
// Add read rules result message that will be inside AddReadRuleReponse.operation.
type AddReadRuleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddReadRuleResult) Reset() {
	*x = AddReadRuleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReadRuleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReadRuleResult) ProtoMessage() {}

func (x *AddReadRuleResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReadRuleResult.ProtoReflect.Descriptor instead.
func (*AddReadRuleResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{28}
}

//*
// Remove read rules request for existing topic.
type RemoveReadRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// read rules to remove. Only consumer names
	ConsumerName string `protobuf:"bytes,3,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
}

func (x *RemoveReadRuleRequest) Reset() {
	*x = RemoveReadRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReadRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReadRuleRequest) ProtoMessage() {}

func (x *RemoveReadRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReadRuleRequest.ProtoReflect.Descriptor instead.
func (*RemoveReadRuleRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{29}
}

func (x *RemoveReadRuleRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *RemoveReadRuleRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RemoveReadRuleRequest) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

//*
// Remove read rules response for existing topic.
type RemoveReadRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *RemoveReadRuleResponse) Reset() {
	*x = RemoveReadRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReadRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReadRuleResponse) ProtoMessage() {}

func (x *RemoveReadRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReadRuleResponse.ProtoReflect.Descriptor instead.
func (*RemoveReadRuleResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{30}
}

func (x *RemoveReadRuleResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

//*
// Remove read rules result message that will be inside RemoveReadRuleReponse.operation.
type RemoveReadRuleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveReadRuleResult) Reset() {
	*x = RemoveReadRuleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveReadRuleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveReadRuleResult) ProtoMessage() {}

func (x *RemoveReadRuleResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveReadRuleResult.ProtoReflect.Descriptor instead.
func (*RemoveReadRuleResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{31}
}

type DescribeTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DescribeTopicRequest) Reset() {
	*x = DescribeTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopicRequest) ProtoMessage() {}

func (x *DescribeTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopicRequest.ProtoReflect.Descriptor instead.
func (*DescribeTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{32}
}

func (x *DescribeTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *DescribeTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DescribeTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DescribeTopicResponse) Reset() {
	*x = DescribeTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopicResponse) ProtoMessage() {}

func (x *DescribeTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopicResponse.ProtoReflect.Descriptor instead.
func (*DescribeTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{33}
}

func (x *DescribeTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type DescribeTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path.
	Self *Ydb_Scheme.Entry `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	// Settings of topic.
	Settings *TopicSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *DescribeTopicResult) Reset() {
	*x = DescribeTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopicResult) ProtoMessage() {}

func (x *DescribeTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopicResult.ProtoReflect.Descriptor instead.
func (*DescribeTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{34}
}

func (x *DescribeTopicResult) GetSelf() *Ydb_Scheme.Entry {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *DescribeTopicResult) GetSettings() *TopicSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// Handshake request that must be sent to server first.
type StreamingWriteClientMessage_InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path of topic to write to.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// message group identifier of client data stream a.k.a. sourceId.
	MessageGroupId string `protobuf:"bytes,2,opt,name=message_group_id,json=messageGroupId,proto3" json:"message_group_id,omitempty"`
	// Some user metadata attached to this write session.
	SessionMeta map[string]string `protobuf:"bytes,3,rep,name=session_meta,json=sessionMeta,proto3" json:"session_meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Partition group to write to.
	// Zero means any group.
	PartitionGroupId               int64  `protobuf:"varint,4,opt,name=partition_group_id,json=partitionGroupId,proto3" json:"partition_group_id,omitempty"`
	MaxSupportedBlockFormatVersion int64  `protobuf:"varint,5,opt,name=max_supported_block_format_version,json=maxSupportedBlockFormatVersion,proto3" json:"max_supported_block_format_version,omitempty"`
	SessionId                      string `protobuf:"bytes,100,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 0 for first init message and incremental value for connect retries. Used for server logging.
	ConnectionAttempt int64 `protobuf:"varint,101,opt,name=connection_attempt,json=connectionAttempt,proto3" json:"connection_attempt,omitempty"`
	// Opaque blob. Take last one from previous connect.
	ConnectionMeta []byte `protobuf:"bytes,102,opt,name=connection_meta,json=connectionMeta,proto3" json:"connection_meta,omitempty"`
	// Optinal preferred cluster name. Sever will close session If preferred cluster is not server cluster and preferred cluster is enabled after delay TPQConfig::CloseClientSessionWithEnabledRemotePreferredClusterDelaySec
	PreferredCluster string `protobuf:"bytes,103,opt,name=preferred_cluster,json=preferredCluster,proto3" json:"preferred_cluster,omitempty"`
	// Sanity check option. When no writing activity is done in idle_timeout_sec seconds, then session will be destroyed. Zero means infinity.
	IdleTimeoutMs int64 `protobuf:"varint,200,opt,name=idle_timeout_ms,json=idleTimeoutMs,proto3" json:"idle_timeout_ms,omitempty"`
}

func (x *StreamingWriteClientMessage_InitRequest) Reset() {
	*x = StreamingWriteClientMessage_InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteClientMessage_InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteClientMessage_InitRequest) ProtoMessage() {}

func (x *StreamingWriteClientMessage_InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteClientMessage_InitRequest.ProtoReflect.Descriptor instead.
func (*StreamingWriteClientMessage_InitRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{2, 0}
}

func (x *StreamingWriteClientMessage_InitRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StreamingWriteClientMessage_InitRequest) GetMessageGroupId() string {
	if x != nil {
		return x.MessageGroupId
	}
	return ""
}

func (x *StreamingWriteClientMessage_InitRequest) GetSessionMeta() map[string]string {
	if x != nil {
		return x.SessionMeta
	}
	return nil
}

func (x *StreamingWriteClientMessage_InitRequest) GetPartitionGroupId() int64 {
	if x != nil {
		return x.PartitionGroupId
	}
	return 0
}

func (x *StreamingWriteClientMessage_InitRequest) GetMaxSupportedBlockFormatVersion() int64 {
	if x != nil {
		return x.MaxSupportedBlockFormatVersion
	}
	return 0
}

func (x *StreamingWriteClientMessage_InitRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamingWriteClientMessage_InitRequest) GetConnectionAttempt() int64 {
	if x != nil {
		return x.ConnectionAttempt
	}
	return 0
}

func (x *StreamingWriteClientMessage_InitRequest) GetConnectionMeta() []byte {
	if x != nil {
		return x.ConnectionMeta
	}
	return nil
}

func (x *StreamingWriteClientMessage_InitRequest) GetPreferredCluster() string {
	if x != nil {
		return x.PreferredCluster
	}
	return ""
}

func (x *StreamingWriteClientMessage_InitRequest) GetIdleTimeoutMs() int64 {
	if x != nil {
		return x.IdleTimeoutMs
	}
	return 0
}

// Represents portion of client messages.
type StreamingWriteClientMessage_WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence numbers of messages in order that client will provide to server.
	SequenceNumbers []int64 `protobuf:"varint,2,rep,packed,name=sequence_numbers,json=sequenceNumbers,proto3" json:"sequence_numbers,omitempty"`
	// Message creation timestamps for client messages.
	// Same size as sequence_numbers.
	CreatedAtMs []int64 `protobuf:"varint,3,rep,packed,name=created_at_ms,json=createdAtMs,proto3" json:"created_at_ms,omitempty"`
	// Message creation timestamps for client messages.
	// Same size as sequence_numbers.
	SentAtMs []int64 `protobuf:"varint,4,rep,packed,name=sent_at_ms,json=sentAtMs,proto3" json:"sent_at_ms,omitempty"`
	// Client message sizes.
	// Same size as sequence_numbers.
	MessageSizes      []int64 `protobuf:"varint,5,rep,packed,name=message_sizes,json=messageSizes,proto3" json:"message_sizes,omitempty"`
	BlocksOffsets     []int64 `protobuf:"varint,6,rep,packed,name=blocks_offsets,json=blocksOffsets,proto3" json:"blocks_offsets,omitempty"`
	BlocksPartNumbers []int64 `protobuf:"varint,7,rep,packed,name=blocks_part_numbers,json=blocksPartNumbers,proto3" json:"blocks_part_numbers,omitempty"`
	// How many complete messages and imcomplete messages end parts (one at most) this block contains
	BlocksMessageCounts     []int64 `protobuf:"varint,8,rep,packed,name=blocks_message_counts,json=blocksMessageCounts,proto3" json:"blocks_message_counts,omitempty"`
	BlocksUncompressedSizes []int64 `protobuf:"varint,9,rep,packed,name=blocks_uncompressed_sizes,json=blocksUncompressedSizes,proto3" json:"blocks_uncompressed_sizes,omitempty"`
	// In block format version 0 each byte contains only block codec identifier
	BlocksHeaders [][]byte `protobuf:"bytes,10,rep,name=blocks_headers,json=blocksHeaders,proto3" json:"blocks_headers,omitempty"`
	BlocksData    [][]byte `protobuf:"bytes,11,rep,name=blocks_data,json=blocksData,proto3" json:"blocks_data,omitempty"`
}

func (x *StreamingWriteClientMessage_WriteRequest) Reset() {
	*x = StreamingWriteClientMessage_WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteClientMessage_WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteClientMessage_WriteRequest) ProtoMessage() {}

func (x *StreamingWriteClientMessage_WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteClientMessage_WriteRequest.ProtoReflect.Descriptor instead.
func (*StreamingWriteClientMessage_WriteRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{2, 1}
}

func (x *StreamingWriteClientMessage_WriteRequest) GetSequenceNumbers() []int64 {
	if x != nil {
		return x.SequenceNumbers
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetCreatedAtMs() []int64 {
	if x != nil {
		return x.CreatedAtMs
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetSentAtMs() []int64 {
	if x != nil {
		return x.SentAtMs
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetMessageSizes() []int64 {
	if x != nil {
		return x.MessageSizes
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksOffsets() []int64 {
	if x != nil {
		return x.BlocksOffsets
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksPartNumbers() []int64 {
	if x != nil {
		return x.BlocksPartNumbers
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksMessageCounts() []int64 {
	if x != nil {
		return x.BlocksMessageCounts
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksUncompressedSizes() []int64 {
	if x != nil {
		return x.BlocksUncompressedSizes
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksHeaders() [][]byte {
	if x != nil {
		return x.BlocksHeaders
	}
	return nil
}

func (x *StreamingWriteClientMessage_WriteRequest) GetBlocksData() [][]byte {
	if x != nil {
		return x.BlocksData
	}
	return nil
}

// In-session reauthentication and reauthorization, lets user increase session lifetime. You should wait for 'update_token_response' before sending next 'update_token_request'.
type StreamingWriteClientMessage_UpdateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *StreamingWriteClientMessage_UpdateTokenRequest) Reset() {
	*x = StreamingWriteClientMessage_UpdateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteClientMessage_UpdateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteClientMessage_UpdateTokenRequest) ProtoMessage() {}

func (x *StreamingWriteClientMessage_UpdateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteClientMessage_UpdateTokenRequest.ProtoReflect.Descriptor instead.
func (*StreamingWriteClientMessage_UpdateTokenRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{2, 2}
}

func (x *StreamingWriteClientMessage_UpdateTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Response for handshake.
type StreamingWriteServerMessage_InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last persisted message's sequence number for this message group.
	LastSequenceNumber int64 `protobuf:"varint,1,opt,name=last_sequence_number,json=lastSequenceNumber,proto3" json:"last_sequence_number,omitempty"`
	// Unique identifier of write session. Used for debug purposes.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Path of topic that matched for this write session. Used for debug purposes, will be the same as in Init request from client.
	Topic string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	// Write session is established to this cluster. Client data will be in instance of topic in this cluster.
	Cluster string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Identifier of partition that is matched for this write session.
	PartitionId int64 `protobuf:"varint,5,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Block (see StreamingWriteClientMessage.WriteRequest.blocks_data) format version supported by server or configured for a topic. Client must write data only with them.
	BlockFormatVersion int64 `protobuf:"varint,6,opt,name=block_format_version,json=blockFormatVersion,proto3" json:"block_format_version,omitempty"`
	// Client can only use compression codecs from this set to write messages to topic, session will be closed with BAD_REQUEST otherwise.
	SupportedCodecs []Codec `protobuf:"varint,10,rep,packed,name=supported_codecs,json=supportedCodecs,proto3,enum=Ydb.PersQueue.V1.Codec" json:"supported_codecs,omitempty"`
	// Maximal flush window size choosed by server. Size of uncompressed data not sended to server must not be bigger than flush window size.
	// In other words, this is maximal size of gap inside uncompressed data, which is not sended to server yet.
	MaxFlushWindowSize int64 `protobuf:"varint,7,opt,name=max_flush_window_size,json=maxFlushWindowSize,proto3" json:"max_flush_window_size,omitempty"` // will be 2048kb
	// How big blocks per stream could be(in uncompressed size). When block contains more than max_block_size of uncompressed data - block must be truncated.
	MaxBlockSize int64 `protobuf:"varint,8,opt,name=max_block_size,json=maxBlockSize,proto3" json:"max_block_size,omitempty"` // will be 512kb
	// Opaque blob, used for fast reconnects.
	ConnectionMeta []byte `protobuf:"bytes,9,opt,name=connection_meta,json=connectionMeta,proto3" json:"connection_meta,omitempty"`
}

func (x *StreamingWriteServerMessage_InitResponse) Reset() {
	*x = StreamingWriteServerMessage_InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteServerMessage_InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteServerMessage_InitResponse) ProtoMessage() {}

func (x *StreamingWriteServerMessage_InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteServerMessage_InitResponse.ProtoReflect.Descriptor instead.
func (*StreamingWriteServerMessage_InitResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{3, 0}
}

func (x *StreamingWriteServerMessage_InitResponse) GetLastSequenceNumber() int64 {
	if x != nil {
		return x.LastSequenceNumber
	}
	return 0
}

func (x *StreamingWriteServerMessage_InitResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamingWriteServerMessage_InitResponse) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StreamingWriteServerMessage_InitResponse) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *StreamingWriteServerMessage_InitResponse) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *StreamingWriteServerMessage_InitResponse) GetBlockFormatVersion() int64 {
	if x != nil {
		return x.BlockFormatVersion
	}
	return 0
}

func (x *StreamingWriteServerMessage_InitResponse) GetSupportedCodecs() []Codec {
	if x != nil {
		return x.SupportedCodecs
	}
	return nil
}

func (x *StreamingWriteServerMessage_InitResponse) GetMaxFlushWindowSize() int64 {
	if x != nil {
		return x.MaxFlushWindowSize
	}
	return 0
}

func (x *StreamingWriteServerMessage_InitResponse) GetMaxBlockSize() int64 {
	if x != nil {
		return x.MaxBlockSize
	}
	return 0
}

func (x *StreamingWriteServerMessage_InitResponse) GetConnectionMeta() []byte {
	if x != nil {
		return x.ConnectionMeta
	}
	return nil
}

// Message that represents acknowledgment for sequence of client messages. This sequence is persisted together so write statistics is for messages batch.
type StreamingWriteServerMessage_BatchWriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence numbers of persisted client messages.
	SequenceNumbers []int64 `protobuf:"varint,1,rep,packed,name=sequence_numbers,json=sequenceNumbers,proto3" json:"sequence_numbers,omitempty"`
	// Assigned partition offsets.
	// Zero for skipped messages.
	Offsets []int64 `protobuf:"varint,2,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
	// Per message flag. False if message is written for the first time and True otherwise.
	AlreadyWritten []bool `protobuf:"varint,3,rep,packed,name=already_written,json=alreadyWritten,proto3" json:"already_written,omitempty"`
	// Assigned partition for all client messages inside this batch.
	PartitionId int64 `protobuf:"varint,4,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Write statistics for this sequence of client messages.
	WriteStatistics *StreamingWriteServerMessage_WriteStatistics `protobuf:"bytes,5,opt,name=write_statistics,json=writeStatistics,proto3" json:"write_statistics,omitempty"`
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) Reset() {
	*x = StreamingWriteServerMessage_BatchWriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteServerMessage_BatchWriteResponse) ProtoMessage() {}

func (x *StreamingWriteServerMessage_BatchWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteServerMessage_BatchWriteResponse.ProtoReflect.Descriptor instead.
func (*StreamingWriteServerMessage_BatchWriteResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{3, 1}
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) GetSequenceNumbers() []int64 {
	if x != nil {
		return x.SequenceNumbers
	}
	return nil
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) GetOffsets() []int64 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) GetAlreadyWritten() []bool {
	if x != nil {
		return x.AlreadyWritten
	}
	return nil
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *StreamingWriteServerMessage_BatchWriteResponse) GetWriteStatistics() *StreamingWriteServerMessage_WriteStatistics {
	if x != nil {
		return x.WriteStatistics
	}
	return nil
}

type StreamingWriteServerMessage_UpdateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamingWriteServerMessage_UpdateTokenResponse) Reset() {
	*x = StreamingWriteServerMessage_UpdateTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteServerMessage_UpdateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteServerMessage_UpdateTokenResponse) ProtoMessage() {}

func (x *StreamingWriteServerMessage_UpdateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteServerMessage_UpdateTokenResponse.ProtoReflect.Descriptor instead.
func (*StreamingWriteServerMessage_UpdateTokenResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{3, 2}
}

// Message with write statistics.
type StreamingWriteServerMessage_WriteStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time spent in persisting of data.
	PersistDurationMs int64 `protobuf:"varint,1,opt,name=persist_duration_ms,json=persistDurationMs,proto3" json:"persist_duration_ms,omitempty"`
	// Time spent in queue before persisting.
	QueuedInPartitionDurationMs int64 `protobuf:"varint,2,opt,name=queued_in_partition_duration_ms,json=queuedInPartitionDurationMs,proto3" json:"queued_in_partition_duration_ms,omitempty"`
	// Time spent awaiting for partition write quota.
	ThrottledOnPartitionDurationMs int64 `protobuf:"varint,3,opt,name=throttled_on_partition_duration_ms,json=throttledOnPartitionDurationMs,proto3" json:"throttled_on_partition_duration_ms,omitempty"`
	// Time spent awaiting for topic write quota.
	ThrottledOnTopicDurationMs int64 `protobuf:"varint,4,opt,name=throttled_on_topic_duration_ms,json=throttledOnTopicDurationMs,proto3" json:"throttled_on_topic_duration_ms,omitempty"`
}

func (x *StreamingWriteServerMessage_WriteStatistics) Reset() {
	*x = StreamingWriteServerMessage_WriteStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingWriteServerMessage_WriteStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingWriteServerMessage_WriteStatistics) ProtoMessage() {}

func (x *StreamingWriteServerMessage_WriteStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingWriteServerMessage_WriteStatistics.ProtoReflect.Descriptor instead.
func (*StreamingWriteServerMessage_WriteStatistics) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{3, 3}
}

func (x *StreamingWriteServerMessage_WriteStatistics) GetPersistDurationMs() int64 {
	if x != nil {
		return x.PersistDurationMs
	}
	return 0
}

func (x *StreamingWriteServerMessage_WriteStatistics) GetQueuedInPartitionDurationMs() int64 {
	if x != nil {
		return x.QueuedInPartitionDurationMs
	}
	return 0
}

func (x *StreamingWriteServerMessage_WriteStatistics) GetThrottledOnPartitionDurationMs() int64 {
	if x != nil {
		return x.ThrottledOnPartitionDurationMs
	}
	return 0
}

func (x *StreamingWriteServerMessage_WriteStatistics) GetThrottledOnTopicDurationMs() int64 {
	if x != nil {
		return x.ThrottledOnTopicDurationMs
	}
	return 0
}

// Handshake request.
type StreamingReadClientMessageNew_InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message that describes topic to read.
	// Topics that will be read by this session.
	TopicsReadSettings []*StreamingReadClientMessageNew_TopicReadSettings `protobuf:"bytes,1,rep,name=topics_read_settings,json=topicsReadSettings,proto3" json:"topics_read_settings,omitempty"`
	// Flag that indicates reading only of original topics in cluster or all including mirrored.
	ReadOnlyOriginal bool `protobuf:"varint,2,opt,name=read_only_original,json=readOnlyOriginal,proto3" json:"read_only_original,omitempty"`
	// Path of consumer that is used for reading by this session.
	Consumer string `protobuf:"bytes,3,opt,name=consumer,proto3" json:"consumer,omitempty"`
	// Skip all messages that has write timestamp smaller than now - max_time_lag_ms.
	MaxLagDurationMs int64 `protobuf:"varint,4,opt,name=max_lag_duration_ms,json=maxLagDurationMs,proto3" json:"max_lag_duration_ms,omitempty"`
	// Read data only after this timestamp from all topics.
	StartFromWrittenAtMs int64 `protobuf:"varint,5,opt,name=start_from_written_at_ms,json=startFromWrittenAtMs,proto3" json:"start_from_written_at_ms,omitempty"`
	// Maximum block format version supported by the client. Server will asses this parameter and return actual data blocks version in
	// StreamingReadServerMessage.InitResponse.block_format_version_by_topic (and StreamingReadServerMessage.AddTopicResponse.block_format_version)
	// or error if client will not be able to read data.
	MaxSupportedBlockFormatVersion int64 `protobuf:"varint,6,opt,name=max_supported_block_format_version,json=maxSupportedBlockFormatVersion,proto3" json:"max_supported_block_format_version,omitempty"`
	// Maximal size of client cache for message_group_id, ip and meta, per partition.
	// There is separate caches for each partition partition streams.
	// There is separate caches for message group identifiers, ip and meta inside one partition partition stream.
	MaxMetaCacheSize int64 `protobuf:"varint,10,opt,name=max_meta_cache_size,json=maxMetaCacheSize,proto3" json:"max_meta_cache_size,omitempty"`
	// Session identifier for retries. Must be the same as session_id from Inited server response. If this is first connect, not retry - do not use this field.
	SessionId string `protobuf:"bytes,100,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 0 for first init message and incremental value for connect retries.
	ConnectionAttempt int64 `protobuf:"varint,101,opt,name=connection_attempt,json=connectionAttempt,proto3" json:"connection_attempt,omitempty"`
	// Formed state for retries. If not retry - do not use this field.
	State         *StreamingReadClientMessageNew_InitRequest_State `protobuf:"bytes,102,opt,name=state,proto3" json:"state,omitempty"`
	IdleTimeoutMs int64                                            `protobuf:"varint,200,opt,name=idle_timeout_ms,json=idleTimeoutMs,proto3" json:"idle_timeout_ms,omitempty"`
}

func (x *StreamingReadClientMessageNew_InitRequest) Reset() {
	*x = StreamingReadClientMessageNew_InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_InitRequest) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_InitRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_InitRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 0}
}

func (x *StreamingReadClientMessageNew_InitRequest) GetTopicsReadSettings() []*StreamingReadClientMessageNew_TopicReadSettings {
	if x != nil {
		return x.TopicsReadSettings
	}
	return nil
}

func (x *StreamingReadClientMessageNew_InitRequest) GetReadOnlyOriginal() bool {
	if x != nil {
		return x.ReadOnlyOriginal
	}
	return false
}

func (x *StreamingReadClientMessageNew_InitRequest) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

func (x *StreamingReadClientMessageNew_InitRequest) GetMaxLagDurationMs() int64 {
	if x != nil {
		return x.MaxLagDurationMs
	}
	return 0
}

func (x *StreamingReadClientMessageNew_InitRequest) GetStartFromWrittenAtMs() int64 {
	if x != nil {
		return x.StartFromWrittenAtMs
	}
	return 0
}

func (x *StreamingReadClientMessageNew_InitRequest) GetMaxSupportedBlockFormatVersion() int64 {
	if x != nil {
		return x.MaxSupportedBlockFormatVersion
	}
	return 0
}

func (x *StreamingReadClientMessageNew_InitRequest) GetMaxMetaCacheSize() int64 {
	if x != nil {
		return x.MaxMetaCacheSize
	}
	return 0
}

func (x *StreamingReadClientMessageNew_InitRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamingReadClientMessageNew_InitRequest) GetConnectionAttempt() int64 {
	if x != nil {
		return x.ConnectionAttempt
	}
	return 0
}

func (x *StreamingReadClientMessageNew_InitRequest) GetState() *StreamingReadClientMessageNew_InitRequest_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *StreamingReadClientMessageNew_InitRequest) GetIdleTimeoutMs() int64 {
	if x != nil {
		return x.IdleTimeoutMs
	}
	return 0
}

// Message that represents client readiness for receiving more data.
type StreamingReadClientMessageNew_ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client acquired this amount of free bytes more for buffer. Server can send more data at most of this uncompressed size.
	// Subsequent messages with 5 and 10 request_uncompressed_size are treated by server that it can send messages for at most 15 bytes.
	RequestUncompressedSize int64 `protobuf:"varint,1,opt,name=request_uncompressed_size,json=requestUncompressedSize,proto3" json:"request_uncompressed_size,omitempty"`
}

func (x *StreamingReadClientMessageNew_ReadRequest) Reset() {
	*x = StreamingReadClientMessageNew_ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_ReadRequest) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_ReadRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_ReadRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 1}
}

func (x *StreamingReadClientMessageNew_ReadRequest) GetRequestUncompressedSize() int64 {
	if x != nil {
		return x.RequestUncompressedSize
	}
	return 0
}

// Signal for server that cient is ready to recive data for partition.
type StreamingReadClientMessageNew_CreatePartitionStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition stream identifier of partition to start read.
	PartitionStreamId int64 `protobuf:"varint,1,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
	// Start reading from partition offset that is not less than read_offset.
	// Init.max_time_lag_ms and Init.read_timestamp_ms could lead to skip of more messages.
	// The same with actual committed offset. Regardless of set read_offset server will return data from maximal offset from read_offset, actual committed offset
	// and offsets calculated from Init.max_time_lag_ms and Init.read_timestamp_ms.
	ReadOffset int64 `protobuf:"varint,2,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// All messages with offset less than commit_offset are processed by client. Server will commit this position if this is not done yet.
	CommitOffset int64 `protobuf:"varint,3,opt,name=commit_offset,json=commitOffset,proto3" json:"commit_offset,omitempty"`
	// This option will enable sanity check on server for read_offset. Server will verify that read_offset is no less that actual committed offset.
	// If verification will fail then server will kill this read session and client will find out error in reading logic.
	// If client is not setting read_offset, sanity check will fail so do not set verify_read_offset if you not setting correct read_offset.
	VerifyReadOffset bool `protobuf:"varint,4,opt,name=verify_read_offset,json=verifyReadOffset,proto3" json:"verify_read_offset,omitempty"`
}

func (x *StreamingReadClientMessageNew_CreatePartitionStreamResponse) Reset() {
	*x = StreamingReadClientMessageNew_CreatePartitionStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_CreatePartitionStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_CreatePartitionStreamResponse) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_CreatePartitionStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_CreatePartitionStreamResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_CreatePartitionStreamResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 2}
}

func (x *StreamingReadClientMessageNew_CreatePartitionStreamResponse) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

func (x *StreamingReadClientMessageNew_CreatePartitionStreamResponse) GetReadOffset() int64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *StreamingReadClientMessageNew_CreatePartitionStreamResponse) GetCommitOffset() int64 {
	if x != nil {
		return x.CommitOffset
	}
	return 0
}

func (x *StreamingReadClientMessageNew_CreatePartitionStreamResponse) GetVerifyReadOffset() bool {
	if x != nil {
		return x.VerifyReadOffset
	}
	return false
}

// Signal for server that client finished working with this partition. Must be sent only after corresponding Release request from server.
// Server will give this partition to other read session only after Released signal.
type StreamingReadClientMessageNew_DestroyPartitionStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition stream identifier of partition partition stream that is released by client.
	PartitionStreamId int64 `protobuf:"varint,1,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
}

func (x *StreamingReadClientMessageNew_DestroyPartitionStreamResponse) Reset() {
	*x = StreamingReadClientMessageNew_DestroyPartitionStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_DestroyPartitionStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_DestroyPartitionStreamResponse) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_DestroyPartitionStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_DestroyPartitionStreamResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_DestroyPartitionStreamResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 3}
}

func (x *StreamingReadClientMessageNew_DestroyPartitionStreamResponse) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

// Signal for server that client is not ready to recieve more data from this partition.
type StreamingReadClientMessageNew_StopReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionStreamIds []int64 `protobuf:"varint,1,rep,packed,name=partition_stream_ids,json=partitionStreamIds,proto3" json:"partition_stream_ids,omitempty"`
}

func (x *StreamingReadClientMessageNew_StopReadRequest) Reset() {
	*x = StreamingReadClientMessageNew_StopReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_StopReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_StopReadRequest) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_StopReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_StopReadRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_StopReadRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 4}
}

func (x *StreamingReadClientMessageNew_StopReadRequest) GetPartitionStreamIds() []int64 {
	if x != nil {
		return x.PartitionStreamIds
	}
	return nil
}

// Signal for server that client is ready to receive more data from this partition.
type StreamingReadClientMessageNew_ResumeReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionStreamIds []int64 `protobuf:"varint,1,rep,packed,name=partition_stream_ids,json=partitionStreamIds,proto3" json:"partition_stream_ids,omitempty"`
	// Offset to start reading - may be smaller than known one in case of dropping of read-ahead in client lib.
	ReadOffsets []int64 `protobuf:"varint,2,rep,packed,name=read_offsets,json=readOffsets,proto3" json:"read_offsets,omitempty"`
	// Cookie for matching data from PartitionStream after resuming. Must be greater than zero.
	ResumeCookies []int64 `protobuf:"varint,3,rep,packed,name=resume_cookies,json=resumeCookies,proto3" json:"resume_cookies,omitempty"`
}

func (x *StreamingReadClientMessageNew_ResumeReadRequest) Reset() {
	*x = StreamingReadClientMessageNew_ResumeReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_ResumeReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_ResumeReadRequest) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_ResumeReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_ResumeReadRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_ResumeReadRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 5}
}

func (x *StreamingReadClientMessageNew_ResumeReadRequest) GetPartitionStreamIds() []int64 {
	if x != nil {
		return x.PartitionStreamIds
	}
	return nil
}

func (x *StreamingReadClientMessageNew_ResumeReadRequest) GetReadOffsets() []int64 {
	if x != nil {
		return x.ReadOffsets
	}
	return nil
}

func (x *StreamingReadClientMessageNew_ResumeReadRequest) GetResumeCookies() []int64 {
	if x != nil {
		return x.ResumeCookies
	}
	return nil
}

// Signal for server that client processed some read data.
type StreamingReadClientMessageNew_CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition offsets that indicates processed data.
	Commits []*StreamingReadClientMessageNew_PartitionCommit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *StreamingReadClientMessageNew_CommitRequest) Reset() {
	*x = StreamingReadClientMessageNew_CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_CommitRequest) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_CommitRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_CommitRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 6}
}

func (x *StreamingReadClientMessageNew_CommitRequest) GetCommits() []*StreamingReadClientMessageNew_PartitionCommit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type StreamingReadClientMessageNew_PartitionStreamStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionStreamId int64 `protobuf:"varint,1,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
}

func (x *StreamingReadClientMessageNew_PartitionStreamStatusRequest) Reset() {
	*x = StreamingReadClientMessageNew_PartitionStreamStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_PartitionStreamStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_PartitionStreamStatusRequest) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_PartitionStreamStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_PartitionStreamStatusRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_PartitionStreamStatusRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 7}
}

func (x *StreamingReadClientMessageNew_PartitionStreamStatusRequest) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

// Add topic to current read session
type StreamingReadClientMessageNew_AddTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicReadSettings *StreamingReadClientMessageNew_TopicReadSettings `protobuf:"bytes,1,opt,name=topic_read_settings,json=topicReadSettings,proto3" json:"topic_read_settings,omitempty"`
}

func (x *StreamingReadClientMessageNew_AddTopicRequest) Reset() {
	*x = StreamingReadClientMessageNew_AddTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_AddTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_AddTopicRequest) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_AddTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_AddTopicRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_AddTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 8}
}

func (x *StreamingReadClientMessageNew_AddTopicRequest) GetTopicReadSettings() *StreamingReadClientMessageNew_TopicReadSettings {
	if x != nil {
		return x.TopicReadSettings
	}
	return nil
}

// Remove topic from current read session
type StreamingReadClientMessageNew_RemoveTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *StreamingReadClientMessageNew_RemoveTopicRequest) Reset() {
	*x = StreamingReadClientMessageNew_RemoveTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_RemoveTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_RemoveTopicRequest) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_RemoveTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_RemoveTopicRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_RemoveTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 9}
}

func (x *StreamingReadClientMessageNew_RemoveTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type StreamingReadClientMessageNew_TopicReadSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Partition groups that will be read by this session.
	// If list is empty - then session will read all partition groups.
	PartitionGroupIds []int64 `protobuf:"varint,2,rep,packed,name=partition_group_ids,json=partitionGroupIds,proto3" json:"partition_group_ids,omitempty"`
	// Read data only after this timestamp from this topic.
	StartFromWrittenAtMs int64 `protobuf:"varint,3,opt,name=start_from_written_at_ms,json=startFromWrittenAtMs,proto3" json:"start_from_written_at_ms,omitempty"`
}

func (x *StreamingReadClientMessageNew_TopicReadSettings) Reset() {
	*x = StreamingReadClientMessageNew_TopicReadSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_TopicReadSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_TopicReadSettings) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_TopicReadSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_TopicReadSettings.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_TopicReadSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 10}
}

func (x *StreamingReadClientMessageNew_TopicReadSettings) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StreamingReadClientMessageNew_TopicReadSettings) GetPartitionGroupIds() []int64 {
	if x != nil {
		return x.PartitionGroupIds
	}
	return nil
}

func (x *StreamingReadClientMessageNew_TopicReadSettings) GetStartFromWrittenAtMs() int64 {
	if x != nil {
		return x.StartFromWrittenAtMs
	}
	return 0
}

//*
// Message that is used for describing commit.
type StreamingReadClientMessageNew_PartitionCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of partition stream with data to commit.
	PartitionStreamId int64 `protobuf:"varint,1,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
	// Processed ranges.
	Offsets []*OffsetsRange `protobuf:"bytes,2,rep,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *StreamingReadClientMessageNew_PartitionCommit) Reset() {
	*x = StreamingReadClientMessageNew_PartitionCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_PartitionCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_PartitionCommit) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_PartitionCommit) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_PartitionCommit.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_PartitionCommit) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 11}
}

func (x *StreamingReadClientMessageNew_PartitionCommit) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

func (x *StreamingReadClientMessageNew_PartitionCommit) GetOffsets() []*OffsetsRange {
	if x != nil {
		return x.Offsets
	}
	return nil
}

// State of client read session. Could be provided to server for retries.
type StreamingReadClientMessageNew_InitRequest_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionStreamsStates []*StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState `protobuf:"bytes,1,rep,name=partition_streams_states,json=partitionStreamsStates,proto3" json:"partition_streams_states,omitempty"`
}

func (x *StreamingReadClientMessageNew_InitRequest_State) Reset() {
	*x = StreamingReadClientMessageNew_InitRequest_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_InitRequest_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_InitRequest_State) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_InitRequest_State) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_InitRequest_State.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_InitRequest_State) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 0, 0}
}

func (x *StreamingReadClientMessageNew_InitRequest_State) GetPartitionStreamsStates() []*StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState {
	if x != nil {
		return x.PartitionStreamsStates
	}
	return nil
}

type StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition partition stream.
	PartitionStream *PartitionStream `protobuf:"bytes,1,opt,name=partition_stream,json=partitionStream,proto3" json:"partition_stream,omitempty"`
	// Current read offset if has one. Actual for states DESTROYING, READING and STOPPED.
	ReadOffset int64 `protobuf:"varint,2,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// Ranges of committed by client offsets.
	OffsetRanges []*OffsetsRange `protobuf:"bytes,3,rep,name=offset_ranges,json=offsetRanges,proto3" json:"offset_ranges,omitempty"`
	// Status of partition stream.
	Status StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status `protobuf:"varint,4,opt,name=status,proto3,enum=Ydb.PersQueue.V1.StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status" json:"status,omitempty"`
}

func (x *StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState) Reset() {
	*x = StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState) ProtoMessage() {}

func (x *StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState.ProtoReflect.Descriptor instead.
func (*StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{9, 0, 0, 0}
}

func (x *StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState) GetPartitionStream() *PartitionStream {
	if x != nil {
		return x.PartitionStream
	}
	return nil
}

func (x *StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState) GetReadOffset() int64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState) GetOffsetRanges() []*OffsetsRange {
	if x != nil {
		return x.OffsetRanges
	}
	return nil
}

func (x *StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState) GetStatus() StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status {
	if x != nil {
		return x.Status
	}
	return StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_STATUS_UNSPECIFIED
}

// Handshake response.
type StreamingReadServerMessageNew_InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read session identifier for debug purposes.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Block format version of data client will receive from topics.
	BlockFormatVersionByTopic map[string]int64 `protobuf:"bytes,2,rep,name=block_format_version_by_topic,json=blockFormatVersionByTopic,proto3" json:"block_format_version_by_topic,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Choosed maximan cache size by server.
	// Client must use cache of this size. Could change on retries - reduce size of cache in this case.
	MaxMetaCacheSize int64 `protobuf:"varint,10,opt,name=max_meta_cache_size,json=maxMetaCacheSize,proto3" json:"max_meta_cache_size,omitempty"`
}

func (x *StreamingReadServerMessageNew_InitResponse) Reset() {
	*x = StreamingReadServerMessageNew_InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_InitResponse) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_InitResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_InitResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 0}
}

func (x *StreamingReadServerMessageNew_InitResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamingReadServerMessageNew_InitResponse) GetBlockFormatVersionByTopic() map[string]int64 {
	if x != nil {
		return x.BlockFormatVersionByTopic
	}
	return nil
}

func (x *StreamingReadServerMessageNew_InitResponse) GetMaxMetaCacheSize() int64 {
	if x != nil {
		return x.MaxMetaCacheSize
	}
	return 0
}

// Command to create a partition partition stream.
// Client must react on this signal by sending StartRead when ready recieve data from this partition.
type StreamingReadServerMessageNew_CreatePartitionStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition partition stream description.
	PartitionStream *PartitionStream `protobuf:"bytes,1,opt,name=partition_stream,json=partitionStream,proto3" json:"partition_stream,omitempty"`
	// Actual committed offset.
	CommittedOffset int64 `protobuf:"varint,2,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
	// Offset of first not existing message in partition till now.
	EndOffset int64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *StreamingReadServerMessageNew_CreatePartitionStreamRequest) Reset() {
	*x = StreamingReadServerMessageNew_CreatePartitionStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_CreatePartitionStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_CreatePartitionStreamRequest) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_CreatePartitionStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_CreatePartitionStreamRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_CreatePartitionStreamRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 1}
}

func (x *StreamingReadServerMessageNew_CreatePartitionStreamRequest) GetPartitionStream() *PartitionStream {
	if x != nil {
		return x.PartitionStream
	}
	return nil
}

func (x *StreamingReadServerMessageNew_CreatePartitionStreamRequest) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

func (x *StreamingReadServerMessageNew_CreatePartitionStreamRequest) GetEndOffset() int64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

// Command to destroy concrete partition stream.
type StreamingReadServerMessageNew_DestroyPartitionStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of partition partition stream that is ready to be closed by server.
	PartitionStreamId int64 `protobuf:"varint,1,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
	// Flag of gracefull or not destroy.
	// If True then server is waiting for Destroyed signal from client before giving of this partition for other read session.
	// Server will not send more data from this partition.
	// Client can process all received data and wait for commit and only after send Destroyed signal.
	// If False then server gives partition for other session right now.
	// All futher commits for this PartitionStream has no effect. Server is not waiting for Destroyed signal.
	Graceful bool `protobuf:"varint,2,opt,name=graceful,proto3" json:"graceful,omitempty"`
	// Last known committed offset.
	CommittedOffset int64 `protobuf:"varint,3,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
}

func (x *StreamingReadServerMessageNew_DestroyPartitionStreamRequest) Reset() {
	*x = StreamingReadServerMessageNew_DestroyPartitionStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_DestroyPartitionStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_DestroyPartitionStreamRequest) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_DestroyPartitionStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_DestroyPartitionStreamRequest.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_DestroyPartitionStreamRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 2}
}

func (x *StreamingReadServerMessageNew_DestroyPartitionStreamRequest) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

func (x *StreamingReadServerMessageNew_DestroyPartitionStreamRequest) GetGraceful() bool {
	if x != nil {
		return x.Graceful
	}
	return false
}

func (x *StreamingReadServerMessageNew_DestroyPartitionStreamRequest) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

// Acknowledgement for commits.
type StreamingReadServerMessageNew_CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partitions with progress.
	PartitionsCommittedOffsets []*StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset `protobuf:"bytes,1,rep,name=partitions_committed_offsets,json=partitionsCommittedOffsets,proto3" json:"partitions_committed_offsets,omitempty"`
}

func (x *StreamingReadServerMessageNew_CommitResponse) Reset() {
	*x = StreamingReadServerMessageNew_CommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_CommitResponse) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_CommitResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_CommitResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 3}
}

func (x *StreamingReadServerMessageNew_CommitResponse) GetPartitionsCommittedOffsets() []*StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset {
	if x != nil {
		return x.PartitionsCommittedOffsets
	}
	return nil
}

// Readed data.
type StreamingReadServerMessageNew_BatchReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipRange []*StreamingReadServerMessageNew_BatchReadResponse_SkipRange `protobuf:"bytes,1,rep,name=skip_range,json=skipRange,proto3" json:"skip_range,omitempty"`
	// Per-partition data.
	Partitions []*StreamingReadServerMessageNew_BatchReadResponse_PartitionData `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *StreamingReadServerMessageNew_BatchReadResponse) Reset() {
	*x = StreamingReadServerMessageNew_BatchReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_BatchReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_BatchReadResponse) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_BatchReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_BatchReadResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_BatchReadResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 4}
}

func (x *StreamingReadServerMessageNew_BatchReadResponse) GetSkipRange() []*StreamingReadServerMessageNew_BatchReadResponse_SkipRange {
	if x != nil {
		return x.SkipRange
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse) GetPartitions() []*StreamingReadServerMessageNew_BatchReadResponse_PartitionData {
	if x != nil {
		return x.Partitions
	}
	return nil
}

// Response for status requst.
type StreamingReadServerMessageNew_PartitionStreamStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of partition partition stream that is ready to be closed by server.
	PartitionStreamId int64 `protobuf:"varint,1,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
	CommittedOffset   int64 `protobuf:"varint,2,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
	EndOffset         int64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// WriteTimestamp of next message (and end_offset) will be not less that WriteWatermarkMs.
	WrittenAtWatermarkMs int64 `protobuf:"varint,4,opt,name=written_at_watermark_ms,json=writtenAtWatermarkMs,proto3" json:"written_at_watermark_ms,omitempty"`
}

func (x *StreamingReadServerMessageNew_PartitionStreamStatusResponse) Reset() {
	*x = StreamingReadServerMessageNew_PartitionStreamStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_PartitionStreamStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_PartitionStreamStatusResponse) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_PartitionStreamStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_PartitionStreamStatusResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_PartitionStreamStatusResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 5}
}

func (x *StreamingReadServerMessageNew_PartitionStreamStatusResponse) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

func (x *StreamingReadServerMessageNew_PartitionStreamStatusResponse) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

func (x *StreamingReadServerMessageNew_PartitionStreamStatusResponse) GetEndOffset() int64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *StreamingReadServerMessageNew_PartitionStreamStatusResponse) GetWrittenAtWatermarkMs() int64 {
	if x != nil {
		return x.WrittenAtWatermarkMs
	}
	return 0
}

type StreamingReadServerMessageNew_StopReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamingReadServerMessageNew_StopReadResponse) Reset() {
	*x = StreamingReadServerMessageNew_StopReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_StopReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_StopReadResponse) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_StopReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_StopReadResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_StopReadResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 6}
}

type StreamingReadServerMessageNew_ResumeReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamingReadServerMessageNew_ResumeReadResponse) Reset() {
	*x = StreamingReadServerMessageNew_ResumeReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_ResumeReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_ResumeReadResponse) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_ResumeReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_ResumeReadResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_ResumeReadResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 7}
}

type StreamingReadServerMessageNew_AddTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block format version of data client will receive from the topic.
	BlockFormatVersion int64 `protobuf:"varint,1,opt,name=block_format_version,json=blockFormatVersion,proto3" json:"block_format_version,omitempty"`
}

func (x *StreamingReadServerMessageNew_AddTopicResponse) Reset() {
	*x = StreamingReadServerMessageNew_AddTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_AddTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_AddTopicResponse) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_AddTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_AddTopicResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_AddTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 8}
}

func (x *StreamingReadServerMessageNew_AddTopicResponse) GetBlockFormatVersion() int64 {
	if x != nil {
		return x.BlockFormatVersion
	}
	return 0
}

type StreamingReadServerMessageNew_RemoveTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamingReadServerMessageNew_RemoveTopicResponse) Reset() {
	*x = StreamingReadServerMessageNew_RemoveTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_RemoveTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_RemoveTopicResponse) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_RemoveTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_RemoveTopicResponse.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_RemoveTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 9}
}

// Per-partition commit representation.
type StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition partition stream identifier.
	PartitionStreamId int64 `protobuf:"varint,1,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
	// Last committed offset.
	CommittedOffset int64 `protobuf:"varint,2,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
}

func (x *StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset) Reset() {
	*x = StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 3, 0}
}

func (x *StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

func (x *StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

// One client message representation.
// Client lib must send commit right now for all skipped data (from it's read offset till first offset in range).
type StreamingReadServerMessageNew_BatchReadResponse_PartitionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data inside this message is from partition stream with this identifier.
	PartitionStreamId int64 `protobuf:"varint,1,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
	// Offsets in partition that assigned for messages.
	// Unique value for clientside deduplication - (topic, cluster, partition_id, offset).
	Offsets []int64 `protobuf:"varint,2,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
	// Sequence numbers that provided with messages on write from client.
	// Same size as offsets.
	// Unique value for clientside deduplication - (topic, cluster, message_group_id, sequence_number).
	SequenceNumbers []int64 `protobuf:"varint,3,rep,packed,name=sequence_numbers,json=sequenceNumbers,proto3" json:"sequence_numbers,omitempty"`
	// Timestamps of creation of messages provided on write from client.
	// Same size as offsets.
	CreatedAtMs []int64 `protobuf:"varint,4,rep,packed,name=created_at_ms,json=createdAtMs,proto3" json:"created_at_ms,omitempty"`
	// Timestamps of writing in partition for client messages.
	// Same size as offsets.
	WrittenAtMs []int64 `protobuf:"varint,5,rep,packed,name=written_at_ms,json=writtenAtMs,proto3" json:"written_at_ms,omitempty"`
	// New messageGroupIds for updating cache.
	// Size of vector is the same as number of negative values in message_group_id_indexes.
	MessageGroupIds []string `protobuf:"bytes,6,rep,name=message_group_ids,json=messageGroupIds,proto3" json:"message_group_ids,omitempty"`
	// Indexes of messageGroupIds.
	// same size as offsets.
	// Negative values (-X) means - put first not used messageGroupId from message_group_ids on index X in cache and use it for this client message.
	// Positive values (X) means -use element by index X from cache for this client message. Do not change state of cache.
	// Assumptions:
	//      - Server will use positive values only for proposed before indexes.
	//      - Each value is from 1 to max_meta_cache_size by abs.
	//      - Do not make assumptions about choosing algorihm.
	//      - There is separate caches of size max_meta_cache_size for different partition and different metadata fileds - message_group_id, ip and session_meta_data.
	//      - Number of negative values in message_group_id_indexes vector is the same as length of message_group_ids vector.
	// Example:
	//                max_meta_cache_size :  2
	//                      Cache indexes :  1  2
	//      Cache state before processing :  s0,? // ? means not set yet.
	//
	//                  message_group_ids :  s1 s2 s3 s1
	//           message_group_id_indexes :  -1    -2    1     2     1     1     -1    2     -2
	//                        cache state :  s1,?  s1,s2 s1,s2 s1,s2 s1,s2 s1,s2 s3,s2 s3,s2 s3,s1
	//             real message group ids :  s1    s2    s1    s2    s1    s1    s3    s2    s1
	//                      Cache indexes :  1  2
	//       Cache state after processing :  s3,s1
	MessageGroupIdIndexes []int64 `protobuf:"zigzag64,7,rep,packed,name=message_group_id_indexes,json=messageGroupIdIndexes,proto3" json:"message_group_id_indexes,omitempty"`
	// New ips for updating ip cache.
	Ips []string `protobuf:"bytes,8,rep,name=ips,proto3" json:"ips,omitempty"`
	// Same as message_group_id_indexes but for ips.
	IpIndexes []int64 `protobuf:"zigzag64,9,rep,packed,name=ip_indexes,json=ipIndexes,proto3" json:"ip_indexes,omitempty"`
	// New session meta datas for updating cache.
	MessageSessionMeta []*SessionMetaValue `protobuf:"bytes,10,rep,name=message_session_meta,json=messageSessionMeta,proto3" json:"message_session_meta,omitempty"`
	// Same as message_group_id_indexes but for session meta data.
	MessageSessionMetaIndexes []int64 `protobuf:"zigzag64,11,rep,packed,name=message_session_meta_indexes,json=messageSessionMetaIndexes,proto3" json:"message_session_meta_indexes,omitempty"`
	// Client messages sizes.
	// Same size as offsets.
	MessageSizes []int64 `protobuf:"varint,12,rep,packed,name=message_sizes,json=messageSizes,proto3" json:"message_sizes,omitempty"`
	// Block must contain whole client message when it's size is not bigger that max_block_size.
	// If message is bigger than max_block_size - it will be transferred as SIZE/max_block_size blocks. All of this blocks will be with block_count = 0 but not the last one - last one's block_count will be 0;
	// Blocks can be reordered upto provided by client uncompressed free buffer size.
	// blocks:      A A A B B B CDE
	// offset:      1 1 1 4 4 4 6
	// part_number: 0 1 2 0 1 2 0
	// count:       0 0 1 0 0 1 3
	// Offset will be the same as in Offsets.
	BlocksOffsets     []int64 `protobuf:"varint,13,rep,packed,name=blocks_offsets,json=blocksOffsets,proto3" json:"blocks_offsets,omitempty"`
	BlocksPartNumbers []int64 `protobuf:"varint,14,rep,packed,name=blocks_part_numbers,json=blocksPartNumbers,proto3" json:"blocks_part_numbers,omitempty"`
	// How many complete messages and imcomplete messages end parts (one at most) this block contains
	BlocksMessageCounts     []int64 `protobuf:"varint,15,rep,packed,name=blocks_message_counts,json=blocksMessageCounts,proto3" json:"blocks_message_counts,omitempty"`
	BlocksUncompressedSizes []int64 `protobuf:"varint,16,rep,packed,name=blocks_uncompressed_sizes,json=blocksUncompressedSizes,proto3" json:"blocks_uncompressed_sizes,omitempty"`
	// In block format version 0 each byte contains only block codec identifier
	BlocksHeaders [][]byte `protobuf:"bytes,17,rep,name=blocks_headers,json=blocksHeaders,proto3" json:"blocks_headers,omitempty"`
	BlocksData    [][]byte `protobuf:"bytes,18,rep,name=blocks_data,json=blocksData,proto3" json:"blocks_data,omitempty"`
	// Zero if this is not first portion of data after resume or provided by client cookie otherwise.
	ResumeCookie   int64                                                                         `protobuf:"varint,50,opt,name=resume_cookie,json=resumeCookie,proto3" json:"resume_cookie,omitempty"`
	ReadStatistics *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics `protobuf:"bytes,100,opt,name=read_statistics,json=readStatistics,proto3" json:"read_statistics,omitempty"`
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) Reset() {
	*x = StreamingReadServerMessageNew_BatchReadResponse_PartitionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_BatchReadResponse_PartitionData) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_BatchReadResponse_PartitionData.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_BatchReadResponse_PartitionData) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 4, 0}
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetOffsets() []int64 {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetSequenceNumbers() []int64 {
	if x != nil {
		return x.SequenceNumbers
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetCreatedAtMs() []int64 {
	if x != nil {
		return x.CreatedAtMs
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetWrittenAtMs() []int64 {
	if x != nil {
		return x.WrittenAtMs
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetMessageGroupIds() []string {
	if x != nil {
		return x.MessageGroupIds
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetMessageGroupIdIndexes() []int64 {
	if x != nil {
		return x.MessageGroupIdIndexes
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetIpIndexes() []int64 {
	if x != nil {
		return x.IpIndexes
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetMessageSessionMeta() []*SessionMetaValue {
	if x != nil {
		return x.MessageSessionMeta
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetMessageSessionMetaIndexes() []int64 {
	if x != nil {
		return x.MessageSessionMetaIndexes
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetMessageSizes() []int64 {
	if x != nil {
		return x.MessageSizes
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetBlocksOffsets() []int64 {
	if x != nil {
		return x.BlocksOffsets
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetBlocksPartNumbers() []int64 {
	if x != nil {
		return x.BlocksPartNumbers
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetBlocksMessageCounts() []int64 {
	if x != nil {
		return x.BlocksMessageCounts
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetBlocksUncompressedSizes() []int64 {
	if x != nil {
		return x.BlocksUncompressedSizes
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetBlocksHeaders() [][]byte {
	if x != nil {
		return x.BlocksHeaders
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetBlocksData() [][]byte {
	if x != nil {
		return x.BlocksData
	}
	return nil
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetResumeCookie() int64 {
	if x != nil {
		return x.ResumeCookie
	}
	return 0
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData) GetReadStatistics() *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics {
	if x != nil {
		return x.ReadStatistics
	}
	return nil
}

type StreamingReadServerMessageNew_BatchReadResponse_SkipRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition Stream identifier.
	PartitionStreamId int64 `protobuf:"varint,1,opt,name=partition_stream_id,json=partitionStreamId,proto3" json:"partition_stream_id,omitempty"`
	// When some data is skipped by client parameters (read_timestamp_ms for example) then range of skipped offsets is sended to client.
	// Client lib must commit this range and change read_offset to end of this range.
	SkipRange *OffsetsRange `protobuf:"bytes,2,opt,name=skip_range,json=skipRange,proto3" json:"skip_range,omitempty"`
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_SkipRange) Reset() {
	*x = StreamingReadServerMessageNew_BatchReadResponse_SkipRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_SkipRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_BatchReadResponse_SkipRange) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_BatchReadResponse_SkipRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_BatchReadResponse_SkipRange.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_BatchReadResponse_SkipRange) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 4, 1}
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_SkipRange) GetPartitionStreamId() int64 {
	if x != nil {
		return x.PartitionStreamId
	}
	return 0
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_SkipRange) GetSkipRange() *OffsetsRange {
	if x != nil {
		return x.SkipRange
	}
	return nil
}

type StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlobsFromCache   int64 `protobuf:"varint,1,opt,name=blobs_from_cache,json=blobsFromCache,proto3" json:"blobs_from_cache,omitempty"`
	BlobsFromDisk    int64 `protobuf:"varint,2,opt,name=blobs_from_disk,json=blobsFromDisk,proto3" json:"blobs_from_disk,omitempty"`
	BytesFromHead    int64 `protobuf:"varint,3,opt,name=bytes_from_head,json=bytesFromHead,proto3" json:"bytes_from_head,omitempty"`
	BytesFromCache   int64 `protobuf:"varint,4,opt,name=bytes_from_cache,json=bytesFromCache,proto3" json:"bytes_from_cache,omitempty"`
	BytesFromDisk    int64 `protobuf:"varint,5,opt,name=bytes_from_disk,json=bytesFromDisk,proto3" json:"bytes_from_disk,omitempty"`
	RepackDurationMs int64 `protobuf:"varint,6,opt,name=repack_duration_ms,json=repackDurationMs,proto3" json:"repack_duration_ms,omitempty"`
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) Reset() {
	*x = StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) ProtoMessage() {}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics.ProtoReflect.Descriptor instead.
func (*StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{10, 4, 0, 0}
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) GetBlobsFromCache() int64 {
	if x != nil {
		return x.BlobsFromCache
	}
	return 0
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) GetBlobsFromDisk() int64 {
	if x != nil {
		return x.BlobsFromDisk
	}
	return 0
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) GetBytesFromHead() int64 {
	if x != nil {
		return x.BytesFromHead
	}
	return 0
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) GetBytesFromCache() int64 {
	if x != nil {
		return x.BytesFromCache
	}
	return 0
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) GetBytesFromDisk() int64 {
	if x != nil {
		return x.BytesFromDisk
	}
	return 0
}

func (x *StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics) GetRepackDurationMs() int64 {
	if x != nil {
		return x.RepackDurationMs
	}
	return 0
}

// Message containing information about concrete topic reading.
type ReadInfoResult_TopicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path.
	Topic *Path `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Topic original cluster.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Status of whole topic.
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,3,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Issues if any.
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,4,rep,name=issues,proto3" json:"issues,omitempty"`
	// Reading info for partitions of this topic.
	Partitions []*ReadInfoResult_TopicInfo_PartitionInfo `protobuf:"bytes,5,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *ReadInfoResult_TopicInfo) Reset() {
	*x = ReadInfoResult_TopicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInfoResult_TopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInfoResult_TopicInfo) ProtoMessage() {}

func (x *ReadInfoResult_TopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInfoResult_TopicInfo.ProtoReflect.Descriptor instead.
func (*ReadInfoResult_TopicInfo) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ReadInfoResult_TopicInfo) GetTopic() *Path {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *ReadInfoResult_TopicInfo) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ReadInfoResult_TopicInfo) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_STATUS_CODE_UNSPECIFIED
}

func (x *ReadInfoResult_TopicInfo) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ReadInfoResult_TopicInfo) GetPartitions() []*ReadInfoResult_TopicInfo_PartitionInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

// Message containing information about concrete topic's partition reading.
type ReadInfoResult_TopicInfo_PartitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Patition identifier inside topic.
	Partition uint64 `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	// Request status of partition.
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,2,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Issues if any.
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
	// Offset of first message in partition.
	StartOffset uint64 `protobuf:"varint,4,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	// Offset of next not yet existing message in partition.
	EndOffset uint64 `protobuf:"varint,5,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// Offset of consumer committed message a.k.a. first not processed message.
	// If commit_offset == end_offset then all messages from partition are processed.
	CommitOffset uint64 `protobuf:"varint,6,opt,name=commit_offset,json=commitOffset,proto3" json:"commit_offset,omitempty"`
	// Consumer lag in time between committed and last messages in partition.
	CommitTimeLagMs uint64 `protobuf:"varint,7,opt,name=commit_time_lag_ms,json=commitTimeLagMs,proto3" json:"commit_time_lag_ms,omitempty"`
	// Offset of first not read message by consumer from this partition.
	// read_offset can be bigger that committed_offset - consumer could read some messages but not yet commit them.
	ReadOffset uint64 `protobuf:"varint,8,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`
	// Consumer lag in time between read and last messages in partition.
	ReadTimeLagMs uint64 `protobuf:"varint,9,opt,name=read_time_lag_ms,json=readTimeLagMs,proto3" json:"read_time_lag_ms,omitempty"`
	// Session identifier that locked and reading this partition right now.
	SessionId string `protobuf:"bytes,10,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Ip if node that created reading this session.
	ClientNode string `protobuf:"bytes,11,opt,name=client_node,json=clientNode,proto3" json:"client_node,omitempty"`
	// Host name of proxy node that processing this reading session.
	ProxyNode string `protobuf:"bytes,12,opt,name=proxy_node,json=proxyNode,proto3" json:"proxy_node,omitempty"`
	// Host name of node where partition leader is running.
	TabletNode string `protobuf:"bytes,13,opt,name=tablet_node,json=tabletNode,proto3" json:"tablet_node,omitempty"`
	// Assign identifier of actual partition assignment.
	AssignId uint64 `protobuf:"varint,14,opt,name=assign_id,json=assignId,proto3" json:"assign_id,omitempty"`
	// Timestamp of assignment.
	AssignTimestampMs uint64 `protobuf:"varint,15,opt,name=assign_timestamp_ms,json=assignTimestampMs,proto3" json:"assign_timestamp_ms,omitempty"`
	// Cookie of last performed read in session.
	LastReadCookie uint64 `protobuf:"varint,16,opt,name=last_read_cookie,json=lastReadCookie,proto3" json:"last_read_cookie,omitempty"`
	// Cookie upto whitch commits done.
	CommittedReadCookie uint64 `protobuf:"varint,17,opt,name=committed_read_cookie,json=committedReadCookie,proto3" json:"committed_read_cookie,omitempty"`
	// Cookie that client wants to commit, but server is waiting for committed_read_cookie + 1.
	OutOfOrderReadCookiesToCommit []uint64 `protobuf:"varint,18,rep,packed,name=out_of_order_read_cookies_to_commit,json=outOfOrderReadCookiesToCommit,proto3" json:"out_of_order_read_cookies_to_commit,omitempty"`
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) Reset() {
	*x = ReadInfoResult_TopicInfo_PartitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInfoResult_TopicInfo_PartitionInfo) ProtoMessage() {}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInfoResult_TopicInfo_PartitionInfo.ProtoReflect.Descriptor instead.
func (*ReadInfoResult_TopicInfo_PartitionInfo) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{14, 0, 0}
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetPartition() uint64 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_STATUS_CODE_UNSPECIFIED
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetStartOffset() uint64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetCommitOffset() uint64 {
	if x != nil {
		return x.CommitOffset
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetCommitTimeLagMs() uint64 {
	if x != nil {
		return x.CommitTimeLagMs
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetReadOffset() uint64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetReadTimeLagMs() uint64 {
	if x != nil {
		return x.ReadTimeLagMs
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetClientNode() string {
	if x != nil {
		return x.ClientNode
	}
	return ""
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetProxyNode() string {
	if x != nil {
		return x.ProxyNode
	}
	return ""
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetTabletNode() string {
	if x != nil {
		return x.TabletNode
	}
	return ""
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetAssignId() uint64 {
	if x != nil {
		return x.AssignId
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetAssignTimestampMs() uint64 {
	if x != nil {
		return x.AssignTimestampMs
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetLastReadCookie() uint64 {
	if x != nil {
		return x.LastReadCookie
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetCommittedReadCookie() uint64 {
	if x != nil {
		return x.CommittedReadCookie
	}
	return 0
}

func (x *ReadInfoResult_TopicInfo_PartitionInfo) GetOutOfOrderReadCookiesToCommit() []uint64 {
	if x != nil {
		return x.OutOfOrderReadCookiesToCommit
	}
	return nil
}

type Credentials_Iam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint          string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ServiceAccountKey string `protobuf:"bytes,2,opt,name=service_account_key,json=serviceAccountKey,proto3" json:"service_account_key,omitempty"`
}

func (x *Credentials_Iam) Reset() {
	*x = Credentials_Iam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials_Iam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials_Iam) ProtoMessage() {}

func (x *Credentials_Iam) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials_Iam.ProtoReflect.Descriptor instead.
func (*Credentials_Iam) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Credentials_Iam) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Credentials_Iam) GetServiceAccountKey() string {
	if x != nil {
		return x.ServiceAccountKey
	}
	return ""
}

// Message for read rules description.
type TopicSettings_ReadRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For what consumer this read rule is. Must be valid not empty consumer name.
	// Is key for read rules. There could be only one read rule with corresponding consumer name.
	ConsumerName string `protobuf:"bytes,1,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	// Flag that this consumer is important.
	Important bool `protobuf:"varint,2,opt,name=important,proto3" json:"important,omitempty"`
	// All messages with smaller timestamp of write will be skipped.
	StartingMessageTimestampMs int64 `protobuf:"varint,3,opt,name=starting_message_timestamp_ms,json=startingMessageTimestampMs,proto3" json:"starting_message_timestamp_ms,omitempty"`
	// Max format version that is supported by this consumer.
	// supported_format on topic must not be greater.
	SupportedFormat TopicSettings_Format `protobuf:"varint,4,opt,name=supported_format,json=supportedFormat,proto3,enum=Ydb.PersQueue.V1.TopicSettings_Format" json:"supported_format,omitempty"`
	// List of supported codecs by this consumer.
	// supported_codecs on topic must be contained inside this list.
	SupportedCodecs []Codec `protobuf:"varint,5,rep,packed,name=supported_codecs,json=supportedCodecs,proto3,enum=Ydb.PersQueue.V1.Codec" json:"supported_codecs,omitempty"`
	// Read rule version. Any non-negative integer.
	Version int64 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	// Client service type.
	ServiceType string `protobuf:"bytes,7,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
}

func (x *TopicSettings_ReadRule) Reset() {
	*x = TopicSettings_ReadRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicSettings_ReadRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSettings_ReadRule) ProtoMessage() {}

func (x *TopicSettings_ReadRule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSettings_ReadRule.ProtoReflect.Descriptor instead.
func (*TopicSettings_ReadRule) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{19, 0}
}

func (x *TopicSettings_ReadRule) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

func (x *TopicSettings_ReadRule) GetImportant() bool {
	if x != nil {
		return x.Important
	}
	return false
}

func (x *TopicSettings_ReadRule) GetStartingMessageTimestampMs() int64 {
	if x != nil {
		return x.StartingMessageTimestampMs
	}
	return 0
}

func (x *TopicSettings_ReadRule) GetSupportedFormat() TopicSettings_Format {
	if x != nil {
		return x.SupportedFormat
	}
	return TopicSettings_FORMAT_UNSPECIFIED
}

func (x *TopicSettings_ReadRule) GetSupportedCodecs() []Codec {
	if x != nil {
		return x.SupportedCodecs
	}
	return nil
}

func (x *TopicSettings_ReadRule) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TopicSettings_ReadRule) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

// Message for remote mirror rule description.
type TopicSettings_RemoteMirrorRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source cluster endpoint in format server:port.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Source topic that we want to mirror.
	TopicPath string `protobuf:"bytes,2,opt,name=topic_path,json=topicPath,proto3" json:"topic_path,omitempty"`
	// Source consumer for reading source topic.
	ConsumerName string `protobuf:"bytes,3,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty"`
	// Credentials for reading source topic by source consumer.
	Credentials *Credentials `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// All messages with smaller timestamp of write will be skipped.
	StartingMessageTimestampMs int64 `protobuf:"varint,5,opt,name=starting_message_timestamp_ms,json=startingMessageTimestampMs,proto3" json:"starting_message_timestamp_ms,omitempty"`
	// Database
	Database string `protobuf:"bytes,6,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *TopicSettings_RemoteMirrorRule) Reset() {
	*x = TopicSettings_RemoteMirrorRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicSettings_RemoteMirrorRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSettings_RemoteMirrorRule) ProtoMessage() {}

func (x *TopicSettings_RemoteMirrorRule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_persqueue_v1_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSettings_RemoteMirrorRule.ProtoReflect.Descriptor instead.
func (*TopicSettings_RemoteMirrorRule) Descriptor() ([]byte, []int) {
	return file_protos_ydb_persqueue_v1_proto_rawDescGZIP(), []int{19, 2}
}

func (x *TopicSettings_RemoteMirrorRule) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *TopicSettings_RemoteMirrorRule) GetTopicPath() string {
	if x != nil {
		return x.TopicPath
	}
	return ""
}

func (x *TopicSettings_RemoteMirrorRule) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

func (x *TopicSettings_RemoteMirrorRule) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *TopicSettings_RemoteMirrorRule) GetStartingMessageTimestampMs() int64 {
	if x != nil {
		return x.StartingMessageTimestampMs
	}
	return 0
}

func (x *TopicSettings_RemoteMirrorRule) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

var File_protos_ydb_persqueue_v1_proto protoreflect.FileDescriptor

var file_protos_ydb_persqueue_v1_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x72,
	0x73, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x1a, 0x13, 0x79, 0x64, 0x62, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x79, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x79, 0x64, 0x62, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x79, 0x64, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x50, 0x0a, 0x0c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x8c, 0x0b, 0x0a,
	0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x0d,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x74, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xc3, 0x04, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e,
	0x6d, 0x61, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xaf, 0x03, 0x0a, 0x0c,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x17, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x2a, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd5, 0x0b, 0x0a, 0x1b,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74,
	0x0a, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x1a, 0xaa, 0x03, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x0f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x15,
	0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x8f,
	0x02, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x57, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x97, 0x02, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x12, 0x4a, 0x0a, 0x22, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x42, 0x0a,
	0x1e, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64,
	0x4f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x1a, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x67, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x56, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x22, 0x72, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x85, 0x1d, 0x0a, 0x1d, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x12, 0x60, 0x0a, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65,
	0x77, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x0c,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4e, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x98,
	0x01, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e,
	0x65, 0x77, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x9b, 0x01, 0x0a, 0x21, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x1e, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x73,
	0x0a, 0x13, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x95, 0x01, 0x0a, 0x1f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x11, 0x61,
	0x64, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x14, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xb9, 0x09, 0x0a, 0x0b, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x73, 0x0a, 0x14, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x61, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x67, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x5f,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x4a,
	0x0a, 0x22, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61,
	0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x74, 0x61,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x57, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x64, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x1a, 0xb8, 0x04, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x9b, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x43,
	0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x5d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x65, 0x77, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45,
	0x53, 0x54, 0x52, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x04, 0x1a, 0x49, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x1a,
	0xc3, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x50, 0x0a, 0x1e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a, 0x43, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x1a, 0x8f, 0x01, 0x0a,
	0x11, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x1a, 0x6a,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x59, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65,
	0x77, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x4e, 0x0a, 0x1c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a, 0x84, 0x01, 0x0a, 0x0f, 0x41,
	0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x71,
	0x0a, 0x13, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0x2a, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x91, 0x01,
	0x0a, 0x11, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f,
	0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x41, 0x74, 0x4d,
	0x73, 0x1a, 0x7b, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xf9, 0x21, 0x0a, 0x1d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e,
	0x65, 0x77, 0x12, 0x63, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95, 0x01, 0x0a,
	0x1f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x98, 0x01, 0x0a, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x1d, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x69, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x20, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e,
	0x65, 0x77, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x70, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x41, 0x64, 0x64,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x61, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x79, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65,
	0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x1a, 0xca, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x9d, 0x01, 0x0a, 0x1d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a,
	0x4c, 0x0a, 0x1e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb6, 0x01,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x96, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a,
	0xa3, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x52, 0x1a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x75,
	0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0xd8, 0x0c, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0a, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x73, 0x6b,
	0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x6f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xe9, 0x09, 0x0a, 0x0d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x4d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x61,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x12, 0x52, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x12, 0x52, 0x09, 0x69, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x54, 0x0a,
	0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x12, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x75,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x55,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x87, 0x01,
	0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x77, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x8a, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6c,
	0x6f, 0x62, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62,
	0x6c, 0x6f, 0x62, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x26, 0x0a, 0x0f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x61, 0x63, 0x6b,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x1a, 0x7a, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x1a, 0xd0, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x17,
	0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x41, 0x74, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x4d, 0x73, 0x1a, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x44, 0x0a,
	0x10, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xeb, 0x01, 0x0a,
	0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xed, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x65,
	0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x10, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x08, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0xfa,
	0x07, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xe6, 0x05, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x67,
	0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x67, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x61, 0x67, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x4a, 0x0a, 0x23, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x03, 0x28, 0x04, 0x52, 0x1d, 0x6f, 0x75,
	0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x72, 0x0a, 0x10, 0x44,
	0x72, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x4c, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a,
	0x0f, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xea, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x6a, 0x77, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6a, 0x77, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2e, 0x49, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x03, 0x69, 0x61, 0x6d, 0x1a, 0x51, 0x0a, 0x03, 0x49,
	0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x0d,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xff, 0x0d,
	0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x32, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xb2, 0xe6, 0x2a, 0x03, 0x3e,
	0x20, 0x30, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x07, 0xb2, 0xe6, 0x2a, 0x03, 0x3e, 0x20, 0x30, 0x52, 0x11, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x12, 0x5d, 0x0a, 0x27,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65,
	0x71, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2,
	0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x12, 0x61, 0x0a, 0x29, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x73, 0x65, 0x71, 0x6e,
	0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08,
	0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x24, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x51,
	0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x42, 0x06, 0x9a, 0xe6, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x0f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x45, 0x0a,
	0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x17, 0x6d, 0x61, 0x78,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20,
	0x30, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x19, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6,
	0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x07, 0x9a, 0xe6, 0x2a, 0x03, 0x18, 0xb8, 0x17, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x86, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xe6, 0x2a, 0x01, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x1d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x1a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x42, 0x06,
	0x9a, 0xe6, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d,
	0x20, 0x30, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3d,
	0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9c, 0x02,
	0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04,
	0x3e, 0x3d, 0x20, 0x30, 0x52, 0x1a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x22,
	0xb7, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0x90, 0xe6, 0x2a, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb6,
	0x01, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x18, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0x90, 0xe6, 0x2a, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4d, 0x0a, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xe6, 0x2a,
	0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x4e,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xe6, 0x2a, 0x01, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x7c, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xe6, 0x2a, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x50, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x65,
	0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x73, 0x65, 0x6c,
	0x66, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x56, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2a, 0x4d,
	0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x44, 0x45, 0x43,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x04, 0x42, 0x5e, 0x0a,
	0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x79, 0x64, 0x62, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x59, 0x64, 0x62, 0x5f, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x56, 0x31, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_ydb_persqueue_v1_proto_rawDescOnce sync.Once
	file_protos_ydb_persqueue_v1_proto_rawDescData = file_protos_ydb_persqueue_v1_proto_rawDesc
)

func file_protos_ydb_persqueue_v1_proto_rawDescGZIP() []byte {
	file_protos_ydb_persqueue_v1_proto_rawDescOnce.Do(func() {
		file_protos_ydb_persqueue_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_ydb_persqueue_v1_proto_rawDescData)
	})
	return file_protos_ydb_persqueue_v1_proto_rawDescData
}

var file_protos_ydb_persqueue_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protos_ydb_persqueue_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 79)
var file_protos_ydb_persqueue_v1_proto_goTypes = []interface{}{
	(Codec)(0), // 0: Ydb.PersQueue.V1.Codec
	(StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState_Status)(0), // 1: Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.State.PartitionStreamState.Status
	(TopicSettings_Format)(0),                              // 2: Ydb.PersQueue.V1.TopicSettings.Format
	(*SessionMetaValue)(nil),                               // 3: Ydb.PersQueue.V1.SessionMetaValue
	(*OffsetsRange)(nil),                                   // 4: Ydb.PersQueue.V1.OffsetsRange
	(*StreamingWriteClientMessage)(nil),                    // 5: Ydb.PersQueue.V1.StreamingWriteClientMessage
	(*StreamingWriteServerMessage)(nil),                    // 6: Ydb.PersQueue.V1.StreamingWriteServerMessage
	(*Path)(nil),                                           // 7: Ydb.PersQueue.V1.Path
	(*KeyValue)(nil),                                       // 8: Ydb.PersQueue.V1.KeyValue
	(*ReadParams)(nil),                                     // 9: Ydb.PersQueue.V1.ReadParams
	(*CommitCookie)(nil),                                   // 10: Ydb.PersQueue.V1.CommitCookie
	(*CommitOffsetRange)(nil),                              // 11: Ydb.PersQueue.V1.CommitOffsetRange
	(*StreamingReadClientMessageNew)(nil),                  // 12: Ydb.PersQueue.V1.StreamingReadClientMessageNew
	(*StreamingReadServerMessageNew)(nil),                  // 13: Ydb.PersQueue.V1.StreamingReadServerMessageNew
	(*PartitionStream)(nil),                                // 14: Ydb.PersQueue.V1.PartitionStream
	(*ReadInfoRequest)(nil),                                // 15: Ydb.PersQueue.V1.ReadInfoRequest
	(*ReadInfoResponse)(nil),                               // 16: Ydb.PersQueue.V1.ReadInfoResponse
	(*ReadInfoResult)(nil),                                 // 17: Ydb.PersQueue.V1.ReadInfoResult
	(*DropTopicRequest)(nil),                               // 18: Ydb.PersQueue.V1.DropTopicRequest
	(*DropTopicResponse)(nil),                              // 19: Ydb.PersQueue.V1.DropTopicResponse
	(*DropTopicResult)(nil),                                // 20: Ydb.PersQueue.V1.DropTopicResult
	(*Credentials)(nil),                                    // 21: Ydb.PersQueue.V1.Credentials
	(*TopicSettings)(nil),                                  // 22: Ydb.PersQueue.V1.TopicSettings
	(*CreateTopicRequest)(nil),                             // 23: Ydb.PersQueue.V1.CreateTopicRequest
	(*CreateTopicResponse)(nil),                            // 24: Ydb.PersQueue.V1.CreateTopicResponse
	(*CreateTopicResult)(nil),                              // 25: Ydb.PersQueue.V1.CreateTopicResult
	(*AlterTopicRequest)(nil),                              // 26: Ydb.PersQueue.V1.AlterTopicRequest
	(*AlterTopicResponse)(nil),                             // 27: Ydb.PersQueue.V1.AlterTopicResponse
	(*AlterTopicResult)(nil),                               // 28: Ydb.PersQueue.V1.AlterTopicResult
	(*AddReadRuleRequest)(nil),                             // 29: Ydb.PersQueue.V1.AddReadRuleRequest
	(*AddReadRuleResponse)(nil),                            // 30: Ydb.PersQueue.V1.AddReadRuleResponse
	(*AddReadRuleResult)(nil),                              // 31: Ydb.PersQueue.V1.AddReadRuleResult
	(*RemoveReadRuleRequest)(nil),                          // 32: Ydb.PersQueue.V1.RemoveReadRuleRequest
	(*RemoveReadRuleResponse)(nil),                         // 33: Ydb.PersQueue.V1.RemoveReadRuleResponse
	(*RemoveReadRuleResult)(nil),                           // 34: Ydb.PersQueue.V1.RemoveReadRuleResult
	(*DescribeTopicRequest)(nil),                           // 35: Ydb.PersQueue.V1.DescribeTopicRequest
	(*DescribeTopicResponse)(nil),                          // 36: Ydb.PersQueue.V1.DescribeTopicResponse
	(*DescribeTopicResult)(nil),                            // 37: Ydb.PersQueue.V1.DescribeTopicResult
	nil,                                                    // 38: Ydb.PersQueue.V1.SessionMetaValue.ValueEntry
	(*StreamingWriteClientMessage_InitRequest)(nil),        // 39: Ydb.PersQueue.V1.StreamingWriteClientMessage.InitRequest
	(*StreamingWriteClientMessage_WriteRequest)(nil),       // 40: Ydb.PersQueue.V1.StreamingWriteClientMessage.WriteRequest
	(*StreamingWriteClientMessage_UpdateTokenRequest)(nil), // 41: Ydb.PersQueue.V1.StreamingWriteClientMessage.UpdateTokenRequest
	nil, // 42: Ydb.PersQueue.V1.StreamingWriteClientMessage.InitRequest.SessionMetaEntry
	(*StreamingWriteServerMessage_InitResponse)(nil),                             // 43: Ydb.PersQueue.V1.StreamingWriteServerMessage.InitResponse
	(*StreamingWriteServerMessage_BatchWriteResponse)(nil),                       // 44: Ydb.PersQueue.V1.StreamingWriteServerMessage.BatchWriteResponse
	(*StreamingWriteServerMessage_UpdateTokenResponse)(nil),                      // 45: Ydb.PersQueue.V1.StreamingWriteServerMessage.UpdateTokenResponse
	(*StreamingWriteServerMessage_WriteStatistics)(nil),                          // 46: Ydb.PersQueue.V1.StreamingWriteServerMessage.WriteStatistics
	(*StreamingReadClientMessageNew_InitRequest)(nil),                            // 47: Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest
	(*StreamingReadClientMessageNew_ReadRequest)(nil),                            // 48: Ydb.PersQueue.V1.StreamingReadClientMessageNew.ReadRequest
	(*StreamingReadClientMessageNew_CreatePartitionStreamResponse)(nil),          // 49: Ydb.PersQueue.V1.StreamingReadClientMessageNew.CreatePartitionStreamResponse
	(*StreamingReadClientMessageNew_DestroyPartitionStreamResponse)(nil),         // 50: Ydb.PersQueue.V1.StreamingReadClientMessageNew.DestroyPartitionStreamResponse
	(*StreamingReadClientMessageNew_StopReadRequest)(nil),                        // 51: Ydb.PersQueue.V1.StreamingReadClientMessageNew.StopReadRequest
	(*StreamingReadClientMessageNew_ResumeReadRequest)(nil),                      // 52: Ydb.PersQueue.V1.StreamingReadClientMessageNew.ResumeReadRequest
	(*StreamingReadClientMessageNew_CommitRequest)(nil),                          // 53: Ydb.PersQueue.V1.StreamingReadClientMessageNew.CommitRequest
	(*StreamingReadClientMessageNew_PartitionStreamStatusRequest)(nil),           // 54: Ydb.PersQueue.V1.StreamingReadClientMessageNew.PartitionStreamStatusRequest
	(*StreamingReadClientMessageNew_AddTopicRequest)(nil),                        // 55: Ydb.PersQueue.V1.StreamingReadClientMessageNew.AddTopicRequest
	(*StreamingReadClientMessageNew_RemoveTopicRequest)(nil),                     // 56: Ydb.PersQueue.V1.StreamingReadClientMessageNew.RemoveTopicRequest
	(*StreamingReadClientMessageNew_TopicReadSettings)(nil),                      // 57: Ydb.PersQueue.V1.StreamingReadClientMessageNew.TopicReadSettings
	(*StreamingReadClientMessageNew_PartitionCommit)(nil),                        // 58: Ydb.PersQueue.V1.StreamingReadClientMessageNew.PartitionCommit
	(*StreamingReadClientMessageNew_InitRequest_State)(nil),                      // 59: Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.State
	(*StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState)(nil), // 60: Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.State.PartitionStreamState
	(*StreamingReadServerMessageNew_InitResponse)(nil),                           // 61: Ydb.PersQueue.V1.StreamingReadServerMessageNew.InitResponse
	(*StreamingReadServerMessageNew_CreatePartitionStreamRequest)(nil),           // 62: Ydb.PersQueue.V1.StreamingReadServerMessageNew.CreatePartitionStreamRequest
	(*StreamingReadServerMessageNew_DestroyPartitionStreamRequest)(nil),          // 63: Ydb.PersQueue.V1.StreamingReadServerMessageNew.DestroyPartitionStreamRequest
	(*StreamingReadServerMessageNew_CommitResponse)(nil),                         // 64: Ydb.PersQueue.V1.StreamingReadServerMessageNew.CommitResponse
	(*StreamingReadServerMessageNew_BatchReadResponse)(nil),                      // 65: Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse
	(*StreamingReadServerMessageNew_PartitionStreamStatusResponse)(nil),          // 66: Ydb.PersQueue.V1.StreamingReadServerMessageNew.PartitionStreamStatusResponse
	(*StreamingReadServerMessageNew_StopReadResponse)(nil),                       // 67: Ydb.PersQueue.V1.StreamingReadServerMessageNew.StopReadResponse
	(*StreamingReadServerMessageNew_ResumeReadResponse)(nil),                     // 68: Ydb.PersQueue.V1.StreamingReadServerMessageNew.ResumeReadResponse
	(*StreamingReadServerMessageNew_AddTopicResponse)(nil),                       // 69: Ydb.PersQueue.V1.StreamingReadServerMessageNew.AddTopicResponse
	(*StreamingReadServerMessageNew_RemoveTopicResponse)(nil),                    // 70: Ydb.PersQueue.V1.StreamingReadServerMessageNew.RemoveTopicResponse
	nil, // 71: Ydb.PersQueue.V1.StreamingReadServerMessageNew.InitResponse.BlockFormatVersionByTopicEntry
	(*StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset)(nil),        // 72: Ydb.PersQueue.V1.StreamingReadServerMessageNew.CommitResponse.PartitionCommittedOffset
	(*StreamingReadServerMessageNew_BatchReadResponse_PartitionData)(nil),                // 73: Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.PartitionData
	(*StreamingReadServerMessageNew_BatchReadResponse_SkipRange)(nil),                    // 74: Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.SkipRange
	(*StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics)(nil), // 75: Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.PartitionData.ReadStatistics
	(*ReadInfoResult_TopicInfo)(nil),                                                     // 76: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo
	(*ReadInfoResult_TopicInfo_PartitionInfo)(nil),                                       // 77: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.PartitionInfo
	(*Credentials_Iam)(nil),                // 78: Ydb.PersQueue.V1.Credentials.Iam
	(*TopicSettings_ReadRule)(nil),         // 79: Ydb.PersQueue.V1.TopicSettings.ReadRule
	nil,                                    // 80: Ydb.PersQueue.V1.TopicSettings.AttributesEntry
	(*TopicSettings_RemoteMirrorRule)(nil), // 81: Ydb.PersQueue.V1.TopicSettings.RemoteMirrorRule
	(Ydb.StatusIds_StatusCode)(0),          // 82: Ydb.StatusIds.StatusCode
	(*Ydb_Issue.IssueMessage)(nil),         // 83: Ydb.Issue.IssueMessage
	(*Ydb_Operations.OperationParams)(nil), // 84: Ydb.Operations.OperationParams
	(*Ydb_Operations.Operation)(nil),       // 85: Ydb.Operations.Operation
	(*Ydb_Scheme.Entry)(nil),               // 86: Ydb.Scheme.Entry
}
var file_protos_ydb_persqueue_v1_proto_depIdxs = []int32{
	38, // 0: Ydb.PersQueue.V1.SessionMetaValue.value:type_name -> Ydb.PersQueue.V1.SessionMetaValue.ValueEntry
	39, // 1: Ydb.PersQueue.V1.StreamingWriteClientMessage.init_request:type_name -> Ydb.PersQueue.V1.StreamingWriteClientMessage.InitRequest
	40, // 2: Ydb.PersQueue.V1.StreamingWriteClientMessage.write_request:type_name -> Ydb.PersQueue.V1.StreamingWriteClientMessage.WriteRequest
	41, // 3: Ydb.PersQueue.V1.StreamingWriteClientMessage.update_token_request:type_name -> Ydb.PersQueue.V1.StreamingWriteClientMessage.UpdateTokenRequest
	43, // 4: Ydb.PersQueue.V1.StreamingWriteServerMessage.init_response:type_name -> Ydb.PersQueue.V1.StreamingWriteServerMessage.InitResponse
	44, // 5: Ydb.PersQueue.V1.StreamingWriteServerMessage.batch_write_response:type_name -> Ydb.PersQueue.V1.StreamingWriteServerMessage.BatchWriteResponse
	45, // 6: Ydb.PersQueue.V1.StreamingWriteServerMessage.update_token_response:type_name -> Ydb.PersQueue.V1.StreamingWriteServerMessage.UpdateTokenResponse
	82, // 7: Ydb.PersQueue.V1.StreamingWriteServerMessage.status:type_name -> Ydb.StatusIds.StatusCode
	83, // 8: Ydb.PersQueue.V1.StreamingWriteServerMessage.issues:type_name -> Ydb.Issue.IssueMessage
	47, // 9: Ydb.PersQueue.V1.StreamingReadClientMessageNew.init_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest
	48, // 10: Ydb.PersQueue.V1.StreamingReadClientMessageNew.read_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.ReadRequest
	49, // 11: Ydb.PersQueue.V1.StreamingReadClientMessageNew.create_partition_stream_response:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.CreatePartitionStreamResponse
	53, // 12: Ydb.PersQueue.V1.StreamingReadClientMessageNew.commit_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.CommitRequest
	50, // 13: Ydb.PersQueue.V1.StreamingReadClientMessageNew.destroy_partition_stream_response:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.DestroyPartitionStreamResponse
	51, // 14: Ydb.PersQueue.V1.StreamingReadClientMessageNew.stop_read_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.StopReadRequest
	52, // 15: Ydb.PersQueue.V1.StreamingReadClientMessageNew.resume_read_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.ResumeReadRequest
	54, // 16: Ydb.PersQueue.V1.StreamingReadClientMessageNew.partition_stream_status_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.PartitionStreamStatusRequest
	55, // 17: Ydb.PersQueue.V1.StreamingReadClientMessageNew.add_topic_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.AddTopicRequest
	56, // 18: Ydb.PersQueue.V1.StreamingReadClientMessageNew.remove_topic_request:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.RemoveTopicRequest
	61, // 19: Ydb.PersQueue.V1.StreamingReadServerMessageNew.init_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.InitResponse
	65, // 20: Ydb.PersQueue.V1.StreamingReadServerMessageNew.batch_read_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse
	62, // 21: Ydb.PersQueue.V1.StreamingReadServerMessageNew.create_partition_stream_request:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.CreatePartitionStreamRequest
	63, // 22: Ydb.PersQueue.V1.StreamingReadServerMessageNew.destroy_partition_stream_request:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.DestroyPartitionStreamRequest
	64, // 23: Ydb.PersQueue.V1.StreamingReadServerMessageNew.commit_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.CommitResponse
	66, // 24: Ydb.PersQueue.V1.StreamingReadServerMessageNew.partition_stream_status_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.PartitionStreamStatusResponse
	67, // 25: Ydb.PersQueue.V1.StreamingReadServerMessageNew.stop_read_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.StopReadResponse
	68, // 26: Ydb.PersQueue.V1.StreamingReadServerMessageNew.resume_read_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.ResumeReadResponse
	69, // 27: Ydb.PersQueue.V1.StreamingReadServerMessageNew.add_topic_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.AddTopicResponse
	70, // 28: Ydb.PersQueue.V1.StreamingReadServerMessageNew.remove_topic_response:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.RemoveTopicResponse
	82, // 29: Ydb.PersQueue.V1.StreamingReadServerMessageNew.status:type_name -> Ydb.StatusIds.StatusCode
	83, // 30: Ydb.PersQueue.V1.StreamingReadServerMessageNew.issues:type_name -> Ydb.Issue.IssueMessage
	84, // 31: Ydb.PersQueue.V1.ReadInfoRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	7,  // 32: Ydb.PersQueue.V1.ReadInfoRequest.topics:type_name -> Ydb.PersQueue.V1.Path
	7,  // 33: Ydb.PersQueue.V1.ReadInfoRequest.consumer:type_name -> Ydb.PersQueue.V1.Path
	85, // 34: Ydb.PersQueue.V1.ReadInfoResponse.operation:type_name -> Ydb.Operations.Operation
	76, // 35: Ydb.PersQueue.V1.ReadInfoResult.topics:type_name -> Ydb.PersQueue.V1.ReadInfoResult.TopicInfo
	84, // 36: Ydb.PersQueue.V1.DropTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	85, // 37: Ydb.PersQueue.V1.DropTopicResponse.operation:type_name -> Ydb.Operations.Operation
	78, // 38: Ydb.PersQueue.V1.Credentials.iam:type_name -> Ydb.PersQueue.V1.Credentials.Iam
	2,  // 39: Ydb.PersQueue.V1.TopicSettings.supported_format:type_name -> Ydb.PersQueue.V1.TopicSettings.Format
	0,  // 40: Ydb.PersQueue.V1.TopicSettings.supported_codecs:type_name -> Ydb.PersQueue.V1.Codec
	79, // 41: Ydb.PersQueue.V1.TopicSettings.read_rules:type_name -> Ydb.PersQueue.V1.TopicSettings.ReadRule
	80, // 42: Ydb.PersQueue.V1.TopicSettings.attributes:type_name -> Ydb.PersQueue.V1.TopicSettings.AttributesEntry
	81, // 43: Ydb.PersQueue.V1.TopicSettings.remote_mirror_rule:type_name -> Ydb.PersQueue.V1.TopicSettings.RemoteMirrorRule
	84, // 44: Ydb.PersQueue.V1.CreateTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	22, // 45: Ydb.PersQueue.V1.CreateTopicRequest.settings:type_name -> Ydb.PersQueue.V1.TopicSettings
	85, // 46: Ydb.PersQueue.V1.CreateTopicResponse.operation:type_name -> Ydb.Operations.Operation
	84, // 47: Ydb.PersQueue.V1.AlterTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	22, // 48: Ydb.PersQueue.V1.AlterTopicRequest.settings:type_name -> Ydb.PersQueue.V1.TopicSettings
	85, // 49: Ydb.PersQueue.V1.AlterTopicResponse.operation:type_name -> Ydb.Operations.Operation
	84, // 50: Ydb.PersQueue.V1.AddReadRuleRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	79, // 51: Ydb.PersQueue.V1.AddReadRuleRequest.read_rule:type_name -> Ydb.PersQueue.V1.TopicSettings.ReadRule
	85, // 52: Ydb.PersQueue.V1.AddReadRuleResponse.operation:type_name -> Ydb.Operations.Operation
	84, // 53: Ydb.PersQueue.V1.RemoveReadRuleRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	85, // 54: Ydb.PersQueue.V1.RemoveReadRuleResponse.operation:type_name -> Ydb.Operations.Operation
	84, // 55: Ydb.PersQueue.V1.DescribeTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	85, // 56: Ydb.PersQueue.V1.DescribeTopicResponse.operation:type_name -> Ydb.Operations.Operation
	86, // 57: Ydb.PersQueue.V1.DescribeTopicResult.self:type_name -> Ydb.Scheme.Entry
	22, // 58: Ydb.PersQueue.V1.DescribeTopicResult.settings:type_name -> Ydb.PersQueue.V1.TopicSettings
	42, // 59: Ydb.PersQueue.V1.StreamingWriteClientMessage.InitRequest.session_meta:type_name -> Ydb.PersQueue.V1.StreamingWriteClientMessage.InitRequest.SessionMetaEntry
	0,  // 60: Ydb.PersQueue.V1.StreamingWriteServerMessage.InitResponse.supported_codecs:type_name -> Ydb.PersQueue.V1.Codec
	46, // 61: Ydb.PersQueue.V1.StreamingWriteServerMessage.BatchWriteResponse.write_statistics:type_name -> Ydb.PersQueue.V1.StreamingWriteServerMessage.WriteStatistics
	57, // 62: Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.topics_read_settings:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.TopicReadSettings
	59, // 63: Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.state:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.State
	58, // 64: Ydb.PersQueue.V1.StreamingReadClientMessageNew.CommitRequest.commits:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.PartitionCommit
	57, // 65: Ydb.PersQueue.V1.StreamingReadClientMessageNew.AddTopicRequest.topic_read_settings:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.TopicReadSettings
	4,  // 66: Ydb.PersQueue.V1.StreamingReadClientMessageNew.PartitionCommit.offsets:type_name -> Ydb.PersQueue.V1.OffsetsRange
	60, // 67: Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.State.partition_streams_states:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.State.PartitionStreamState
	14, // 68: Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.State.PartitionStreamState.partition_stream:type_name -> Ydb.PersQueue.V1.PartitionStream
	4,  // 69: Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.State.PartitionStreamState.offset_ranges:type_name -> Ydb.PersQueue.V1.OffsetsRange
	1,  // 70: Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.State.PartitionStreamState.status:type_name -> Ydb.PersQueue.V1.StreamingReadClientMessageNew.InitRequest.State.PartitionStreamState.Status
	71, // 71: Ydb.PersQueue.V1.StreamingReadServerMessageNew.InitResponse.block_format_version_by_topic:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.InitResponse.BlockFormatVersionByTopicEntry
	14, // 72: Ydb.PersQueue.V1.StreamingReadServerMessageNew.CreatePartitionStreamRequest.partition_stream:type_name -> Ydb.PersQueue.V1.PartitionStream
	72, // 73: Ydb.PersQueue.V1.StreamingReadServerMessageNew.CommitResponse.partitions_committed_offsets:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.CommitResponse.PartitionCommittedOffset
	74, // 74: Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.skip_range:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.SkipRange
	73, // 75: Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.partitions:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.PartitionData
	3,  // 76: Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.PartitionData.message_session_meta:type_name -> Ydb.PersQueue.V1.SessionMetaValue
	75, // 77: Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.PartitionData.read_statistics:type_name -> Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.PartitionData.ReadStatistics
	4,  // 78: Ydb.PersQueue.V1.StreamingReadServerMessageNew.BatchReadResponse.SkipRange.skip_range:type_name -> Ydb.PersQueue.V1.OffsetsRange
	7,  // 79: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.topic:type_name -> Ydb.PersQueue.V1.Path
	82, // 80: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.status:type_name -> Ydb.StatusIds.StatusCode
	83, // 81: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.issues:type_name -> Ydb.Issue.IssueMessage
	77, // 82: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.partitions:type_name -> Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.PartitionInfo
	82, // 83: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.PartitionInfo.status:type_name -> Ydb.StatusIds.StatusCode
	83, // 84: Ydb.PersQueue.V1.ReadInfoResult.TopicInfo.PartitionInfo.issues:type_name -> Ydb.Issue.IssueMessage
	2,  // 85: Ydb.PersQueue.V1.TopicSettings.ReadRule.supported_format:type_name -> Ydb.PersQueue.V1.TopicSettings.Format
	0,  // 86: Ydb.PersQueue.V1.TopicSettings.ReadRule.supported_codecs:type_name -> Ydb.PersQueue.V1.Codec
	21, // 87: Ydb.PersQueue.V1.TopicSettings.RemoteMirrorRule.credentials:type_name -> Ydb.PersQueue.V1.Credentials
	88, // [88:88] is the sub-list for method output_type
	88, // [88:88] is the sub-list for method input_type
	88, // [88:88] is the sub-list for extension type_name
	88, // [88:88] is the sub-list for extension extendee
	0,  // [0:88] is the sub-list for field type_name
}

func init() { file_protos_ydb_persqueue_v1_proto_init() }
func file_protos_ydb_persqueue_v1_proto_init() {
	if File_protos_ydb_persqueue_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_ydb_persqueue_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionMetaValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetsRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitOffsetRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReadRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReadRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReadRuleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReadRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReadRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveReadRuleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteClientMessage_InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteClientMessage_WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteClientMessage_UpdateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteServerMessage_InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteServerMessage_BatchWriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteServerMessage_UpdateTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingWriteServerMessage_WriteStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_CreatePartitionStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_DestroyPartitionStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_StopReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_ResumeReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_PartitionStreamStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_AddTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_RemoveTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_TopicReadSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_PartitionCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_InitRequest_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadClientMessageNew_InitRequest_State_PartitionStreamState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_CreatePartitionStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_DestroyPartitionStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_CommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_BatchReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_PartitionStreamStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_StopReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_ResumeReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_AddTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_RemoveTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_CommitResponse_PartitionCommittedOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_BatchReadResponse_PartitionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_BatchReadResponse_SkipRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingReadServerMessageNew_BatchReadResponse_PartitionData_ReadStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInfoResult_TopicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadInfoResult_TopicInfo_PartitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials_Iam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicSettings_ReadRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_persqueue_v1_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicSettings_RemoteMirrorRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*StreamingWriteClientMessage_InitRequest_)(nil),
		(*StreamingWriteClientMessage_WriteRequest_)(nil),
		(*StreamingWriteClientMessage_UpdateTokenRequest_)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*StreamingWriteServerMessage_InitResponse_)(nil),
		(*StreamingWriteServerMessage_BatchWriteResponse_)(nil),
		(*StreamingWriteServerMessage_UpdateTokenResponse_)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*StreamingReadClientMessageNew_InitRequest_)(nil),
		(*StreamingReadClientMessageNew_ReadRequest_)(nil),
		(*StreamingReadClientMessageNew_CreatePartitionStreamResponse_)(nil),
		(*StreamingReadClientMessageNew_CommitRequest_)(nil),
		(*StreamingReadClientMessageNew_DestroyPartitionStreamResponse_)(nil),
		(*StreamingReadClientMessageNew_StopReadRequest_)(nil),
		(*StreamingReadClientMessageNew_ResumeReadRequest_)(nil),
		(*StreamingReadClientMessageNew_PartitionStreamStatusRequest_)(nil),
		(*StreamingReadClientMessageNew_AddTopicRequest_)(nil),
		(*StreamingReadClientMessageNew_RemoveTopicRequest_)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*StreamingReadServerMessageNew_InitResponse_)(nil),
		(*StreamingReadServerMessageNew_BatchReadResponse_)(nil),
		(*StreamingReadServerMessageNew_CreatePartitionStreamRequest_)(nil),
		(*StreamingReadServerMessageNew_DestroyPartitionStreamRequest_)(nil),
		(*StreamingReadServerMessageNew_CommitResponse_)(nil),
		(*StreamingReadServerMessageNew_PartitionStreamStatusResponse_)(nil),
		(*StreamingReadServerMessageNew_StopReadResponse_)(nil),
		(*StreamingReadServerMessageNew_ResumeReadResponse_)(nil),
		(*StreamingReadServerMessageNew_AddTopicResponse_)(nil),
		(*StreamingReadServerMessageNew_RemoveTopicResponse_)(nil),
	}
	file_protos_ydb_persqueue_v1_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Credentials_OauthToken)(nil),
		(*Credentials_JwtParams)(nil),
		(*Credentials_Iam_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_ydb_persqueue_v1_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   79,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_ydb_persqueue_v1_proto_goTypes,
		DependencyIndexes: file_protos_ydb_persqueue_v1_proto_depIdxs,
		EnumInfos:         file_protos_ydb_persqueue_v1_proto_enumTypes,
		MessageInfos:      file_protos_ydb_persqueue_v1_proto_msgTypes,
	}.Build()
	File_protos_ydb_persqueue_v1_proto = out.File
	file_protos_ydb_persqueue_v1_proto_rawDesc = nil
	file_protos_ydb_persqueue_v1_proto_goTypes = nil
	file_protos_ydb_persqueue_v1_proto_depIdxs = nil
}
