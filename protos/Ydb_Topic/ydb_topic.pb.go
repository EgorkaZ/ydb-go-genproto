// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: protos/ydb_topic.proto

package Ydb_Topic

import (
	Ydb "github.com/ydb-platform/ydb-go-genproto/protos/Ydb"
	Ydb_Issue "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Issue"
	Ydb_Operations "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Operations"
	Ydb_Scheme "github.com/ydb-platform/ydb-go-genproto/protos/Ydb_Scheme"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Codec int32

const (
	Codec_CODEC_UNSPECIFIED Codec = 0
	Codec_CODEC_RAW         Codec = 1
	Codec_CODEC_GZIP        Codec = 2
	Codec_CODEC_LZOP        Codec = 3
	Codec_CODEC_ZSTD        Codec = 4
	// User-defined codecs from 10000 to 19999
	Codec_CODEC_CUSTOM Codec = 10000
)

// Enum value maps for Codec.
var (
	Codec_name = map[int32]string{
		0:     "CODEC_UNSPECIFIED",
		1:     "CODEC_RAW",
		2:     "CODEC_GZIP",
		3:     "CODEC_LZOP",
		4:     "CODEC_ZSTD",
		10000: "CODEC_CUSTOM",
	}
	Codec_value = map[string]int32{
		"CODEC_UNSPECIFIED": 0,
		"CODEC_RAW":         1,
		"CODEC_GZIP":        2,
		"CODEC_LZOP":        3,
		"CODEC_ZSTD":        4,
		"CODEC_CUSTOM":      10000,
	}
)

func (x Codec) Enum() *Codec {
	p := new(Codec)
	*p = x
	return p
}

func (x Codec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Codec) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_topic_proto_enumTypes[0].Descriptor()
}

func (Codec) Type() protoreflect.EnumType {
	return &file_protos_ydb_topic_proto_enumTypes[0]
}

func (x Codec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Codec.Descriptor instead.
func (Codec) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{0}
}

type StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason int32

const (
	StreamWriteMessage_WriteResponse_WriteAck_Skipped_REASON_UNSPECIFIED     StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason = 0
	StreamWriteMessage_WriteResponse_WriteAck_Skipped_REASON_ALREADY_WRITTEN StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason = 1
)

// Enum value maps for StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason.
var (
	StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason_name = map[int32]string{
		0: "REASON_UNSPECIFIED",
		1: "REASON_ALREADY_WRITTEN",
	}
	StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason_value = map[string]int32{
		"REASON_UNSPECIFIED":     0,
		"REASON_ALREADY_WRITTEN": 1,
	}
)

func (x StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason) Enum() *StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason {
	p := new(StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason)
	*p = x
	return p
}

func (x StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_topic_proto_enumTypes[1].Descriptor()
}

func (StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason) Type() protoreflect.EnumType {
	return &file_protos_ydb_topic_proto_enumTypes[1]
}

func (x StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason.Descriptor instead.
func (StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 5, 0, 1, 0}
}

// Description of supported codecs.
type SupportedCodecs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of supported codecs.
	// See enum Codec above for values.
	Codecs []int32 `protobuf:"varint,1,rep,packed,name=codecs,proto3" json:"codecs,omitempty"`
}

func (x *SupportedCodecs) Reset() {
	*x = SupportedCodecs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupportedCodecs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupportedCodecs) ProtoMessage() {}

func (x *SupportedCodecs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupportedCodecs.ProtoReflect.Descriptor instead.
func (*SupportedCodecs) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{0}
}

func (x *SupportedCodecs) GetCodecs() []int32 {
	if x != nil {
		return x.Codecs
	}
	return nil
}

// Represents range [start, end).
// I.e. (end - 1) is the greatest of offsets, included in non-empty range.
type OffsetsRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *OffsetsRange) Reset() {
	*x = OffsetsRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetsRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetsRange) ProtoMessage() {}

func (x *OffsetsRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetsRange.ProtoReflect.Descriptor instead.
func (*OffsetsRange) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{1}
}

func (x *OffsetsRange) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *OffsetsRange) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

// In-session reauthentication and reauthorization, lets user increase session lifetime.
// Client should wait for UpdateTokenResponse before sending next UpdateTokenRequest.
type UpdateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateTokenRequest) Reset() {
	*x = UpdateTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenRequest) ProtoMessage() {}

func (x *UpdateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenRequest.ProtoReflect.Descriptor instead.
func (*UpdateTokenRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UpdateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTokenResponse) Reset() {
	*x = UpdateTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenResponse) ProtoMessage() {}

func (x *UpdateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenResponse.ProtoReflect.Descriptor instead.
func (*UpdateTokenResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{3}
}

// Messages for bidirectional streaming rpc StreamWrite
type StreamWriteMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamWriteMessage) Reset() {
	*x = StreamWriteMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage) ProtoMessage() {}

func (x *StreamWriteMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4}
}

// Messages for bidirectional streaming rpc StreamRead
type StreamReadMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamReadMessage) Reset() {
	*x = StreamReadMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage) ProtoMessage() {}

func (x *StreamReadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage.ProtoReflect.Descriptor instead.
func (*StreamReadMessage) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5}
}

// Consumer description.
type Consumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Must have valid not empty name as a key.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Consumer may be marked as 'important'. It means messages for this consumer will never expire due to retention.
	// User should take care that such consumer never stalls, to prevent running out of disk space.
	// Flag that this consumer is important.
	Important bool `protobuf:"varint,2,opt,name=important,proto3" json:"important,omitempty"`
	// All messages with smaller server written_at timestamp will be skipped.
	ReadFrom *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=read_from,json=readFrom,proto3" json:"read_from,omitempty"`
	// List of supported codecs by this consumer.
	// supported_codecs on topic must be contained inside this list.
	SupportedCodecs *SupportedCodecs `protobuf:"bytes,5,opt,name=supported_codecs,json=supportedCodecs,proto3" json:"supported_codecs,omitempty"`
	// Attributes of consumer
	Attributes map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Consumer) Reset() {
	*x = Consumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumer) ProtoMessage() {}

func (x *Consumer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumer.ProtoReflect.Descriptor instead.
func (*Consumer) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{6}
}

func (x *Consumer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Consumer) GetImportant() bool {
	if x != nil {
		return x.Important
	}
	return false
}

func (x *Consumer) GetReadFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ReadFrom
	}
	return nil
}

func (x *Consumer) GetSupportedCodecs() *SupportedCodecs {
	if x != nil {
		return x.SupportedCodecs
	}
	return nil
}

func (x *Consumer) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Consumer alter description.
type AlterConsumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Must have valid not empty name as a key.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Consumer may be marked as 'important'. It means messages for this consumer will never expire due to retention.
	// User should take care that such consumer never stalls, to prevent running out of disk space.
	// Flag that this consumer is important.
	SetImportant *bool `protobuf:"varint,2,opt,name=set_important,json=setImportant,proto3,oneof" json:"set_important,omitempty"`
	// All messages with smaller server written_at timestamp will be skipped.
	SetReadFrom *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=set_read_from,json=setReadFrom,proto3" json:"set_read_from,omitempty"`
	// List of supported codecs by this consumer.
	// supported_codecs on topic must be contained inside this list.
	SetSupportedCodecs *SupportedCodecs `protobuf:"bytes,5,opt,name=set_supported_codecs,json=setSupportedCodecs,proto3" json:"set_supported_codecs,omitempty"`
	// User and server attributes of consumer. Server attributes starts from "_" and will be validated by server.
	// Leave the value blank to drop an attribute.
	AlterAttributes map[string]string `protobuf:"bytes,6,rep,name=alter_attributes,json=alterAttributes,proto3" json:"alter_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AlterConsumer) Reset() {
	*x = AlterConsumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterConsumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterConsumer) ProtoMessage() {}

func (x *AlterConsumer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterConsumer.ProtoReflect.Descriptor instead.
func (*AlterConsumer) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{7}
}

func (x *AlterConsumer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlterConsumer) GetSetImportant() bool {
	if x != nil && x.SetImportant != nil {
		return *x.SetImportant
	}
	return false
}

func (x *AlterConsumer) GetSetReadFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.SetReadFrom
	}
	return nil
}

func (x *AlterConsumer) GetSetSupportedCodecs() *SupportedCodecs {
	if x != nil {
		return x.SetSupportedCodecs
	}
	return nil
}

func (x *AlterConsumer) GetAlterAttributes() map[string]string {
	if x != nil {
		return x.AlterAttributes
	}
	return nil
}

// Partitioning settings for topic.
type PartitioningSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum partition count auto merge would stop working at.
	// Zero value means default - 1.
	MinActivePartitions int64 `protobuf:"varint,1,opt,name=min_active_partitions,json=minActivePartitions,proto3" json:"min_active_partitions,omitempty"`
	// Limit for total partition count, including active (open for write) and read-only partitions.
	// Zero value means default - 100.
	PartitionCountLimit int64 `protobuf:"varint,2,opt,name=partition_count_limit,json=partitionCountLimit,proto3" json:"partition_count_limit,omitempty"`
}

func (x *PartitioningSettings) Reset() {
	*x = PartitioningSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitioningSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitioningSettings) ProtoMessage() {}

func (x *PartitioningSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitioningSettings.ProtoReflect.Descriptor instead.
func (*PartitioningSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{8}
}

func (x *PartitioningSettings) GetMinActivePartitions() int64 {
	if x != nil {
		return x.MinActivePartitions
	}
	return 0
}

func (x *PartitioningSettings) GetPartitionCountLimit() int64 {
	if x != nil {
		return x.PartitionCountLimit
	}
	return 0
}

// Partitioning settings for topic.
type AlterPartitioningSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum partition count auto merge would stop working at.
	// Zero value means default - 1.
	SetMinActivePartitions *int64 `protobuf:"varint,1,opt,name=set_min_active_partitions,json=setMinActivePartitions,proto3,oneof" json:"set_min_active_partitions,omitempty"`
	// Limit for total partition count, including active (open for write) and read-only partitions.
	// Zero value means default - 100.
	SetPartitionCountLimit *int64 `protobuf:"varint,2,opt,name=set_partition_count_limit,json=setPartitionCountLimit,proto3,oneof" json:"set_partition_count_limit,omitempty"`
}

func (x *AlterPartitioningSettings) Reset() {
	*x = AlterPartitioningSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterPartitioningSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterPartitioningSettings) ProtoMessage() {}

func (x *AlterPartitioningSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterPartitioningSettings.ProtoReflect.Descriptor instead.
func (*AlterPartitioningSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{9}
}

func (x *AlterPartitioningSettings) GetSetMinActivePartitions() int64 {
	if x != nil && x.SetMinActivePartitions != nil {
		return *x.SetMinActivePartitions
	}
	return 0
}

func (x *AlterPartitioningSettings) GetSetPartitionCountLimit() int64 {
	if x != nil && x.SetPartitionCountLimit != nil {
		return *x.SetPartitionCountLimit
	}
	return 0
}

// Create topic request sent from client to server.
type CreateTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Settings for partitioning
	PartitioningSettings *PartitioningSettings `protobuf:"bytes,3,opt,name=partitioning_settings,json=partitioningSettings,proto3" json:"partitioning_settings,omitempty"`
	// Retention settings.
	// Currently, only one limit may be set, so other should not be set.
	//
	// How long data in partition should be stored. Must be greater than 0 and less than limit for this database.
	// Default limit - 36 hours.
	RetentionPeriod *durationpb.Duration `protobuf:"bytes,4,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	// How much data in partition should be stored. Must be greater than 0 and less than limit for this database.
	// Zero value means infinite limit.
	RetentionStorageMb int64 `protobuf:"varint,5,opt,name=retention_storage_mb,json=retentionStorageMb,proto3" json:"retention_storage_mb,omitempty"`
	// List of allowed codecs for writers.
	// Writes with codec not from this list are forbidden.
	SupportedCodecs *SupportedCodecs `protobuf:"bytes,7,opt,name=supported_codecs,json=supportedCodecs,proto3" json:"supported_codecs,omitempty"`
	// Partition write speed in bytes per second. Must be less than database limit.
	// Zero value means default limit: 1 MB per second.
	PartitionWriteSpeedBytesPerSecond int64 `protobuf:"varint,8,opt,name=partition_write_speed_bytes_per_second,json=partitionWriteSpeedBytesPerSecond,proto3" json:"partition_write_speed_bytes_per_second,omitempty"`
	// Burst size for write in partition, in bytes. Must be less than database limit.
	// Zero value means default limit: 1 MB.
	PartitionWriteBurstBytes int64 `protobuf:"varint,9,opt,name=partition_write_burst_bytes,json=partitionWriteBurstBytes,proto3" json:"partition_write_burst_bytes,omitempty"`
	// User and server attributes of topic. Server attributes starts from "_" and will be validated by server.
	Attributes map[string]string `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of consumers for this topic.
	Consumers []*Consumer `protobuf:"bytes,11,rep,name=consumers,proto3" json:"consumers,omitempty"`
}

func (x *CreateTopicRequest) Reset() {
	*x = CreateTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicRequest) ProtoMessage() {}

func (x *CreateTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicRequest.ProtoReflect.Descriptor instead.
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{10}
}

func (x *CreateTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *CreateTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateTopicRequest) GetPartitioningSettings() *PartitioningSettings {
	if x != nil {
		return x.PartitioningSettings
	}
	return nil
}

func (x *CreateTopicRequest) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *CreateTopicRequest) GetRetentionStorageMb() int64 {
	if x != nil {
		return x.RetentionStorageMb
	}
	return 0
}

func (x *CreateTopicRequest) GetSupportedCodecs() *SupportedCodecs {
	if x != nil {
		return x.SupportedCodecs
	}
	return nil
}

func (x *CreateTopicRequest) GetPartitionWriteSpeedBytesPerSecond() int64 {
	if x != nil {
		return x.PartitionWriteSpeedBytesPerSecond
	}
	return 0
}

func (x *CreateTopicRequest) GetPartitionWriteBurstBytes() int64 {
	if x != nil {
		return x.PartitionWriteBurstBytes
	}
	return 0
}

func (x *CreateTopicRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateTopicRequest) GetConsumers() []*Consumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

// Create topic response sent from server to client.
// If topic is already exists then response status will be "ALREADY_EXISTS".
type CreateTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *CreateTopicResponse) Reset() {
	*x = CreateTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicResponse) ProtoMessage() {}

func (x *CreateTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicResponse.ProtoReflect.Descriptor instead.
func (*CreateTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{11}
}

func (x *CreateTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Create topic result message that will be inside CreateTopicResponse.operation.
type CreateTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTopicResult) Reset() {
	*x = CreateTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicResult) ProtoMessage() {}

func (x *CreateTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicResult.ProtoReflect.Descriptor instead.
func (*CreateTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{12}
}

// Describe topic request sent from client to server.
type DescribeTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DescribeTopicRequest) Reset() {
	*x = DescribeTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopicRequest) ProtoMessage() {}

func (x *DescribeTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopicRequest.ProtoReflect.Descriptor instead.
func (*DescribeTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{13}
}

func (x *DescribeTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *DescribeTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Describe topic response sent from server to client.
// If topic is not existed then response status will be "SCHEME_ERROR".
type DescribeTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DescribeTopicResponse) Reset() {
	*x = DescribeTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopicResponse) ProtoMessage() {}

func (x *DescribeTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopicResponse.ProtoReflect.Descriptor instead.
func (*DescribeTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{14}
}

func (x *DescribeTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Describe topic result message that will be inside DescribeTopicResponse.operation.
type DescribeTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of scheme object.
	Self *Ydb_Scheme.Entry `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	// Settings for partitioning
	PartitioningSettings *PartitioningSettings `protobuf:"bytes,2,opt,name=partitioning_settings,json=partitioningSettings,proto3" json:"partitioning_settings,omitempty"`
	// Partitions description.
	Partitions []*DescribeTopicResult_PartitionInfo `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty"`
	// Retention settings.
	// Currently, only one limit may be set, so other should not be set.
	//
	// How long data in partition should be stored.
	RetentionPeriod *durationpb.Duration `protobuf:"bytes,4,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	// How much data in partition should be stored.
	// Zero value means infinite limit.
	RetentionStorageMb int64 `protobuf:"varint,5,opt,name=retention_storage_mb,json=retentionStorageMb,proto3" json:"retention_storage_mb,omitempty"`
	// List of allowed codecs for writers.
	// Writes with codec not from this list are forbidden.
	SupportedCodecs *SupportedCodecs `protobuf:"bytes,7,opt,name=supported_codecs,json=supportedCodecs,proto3" json:"supported_codecs,omitempty"`
	// Partition write speed in bytes per second.
	// Zero value means default limit: 1 MB per second.
	PartitionWriteSpeedBytesPerSecond int64 `protobuf:"varint,8,opt,name=partition_write_speed_bytes_per_second,json=partitionWriteSpeedBytesPerSecond,proto3" json:"partition_write_speed_bytes_per_second,omitempty"`
	// Burst size for write in partition, in bytes.
	// Zero value means default limit: 1 MB.
	PartitionWriteBurstBytes int64 `protobuf:"varint,9,opt,name=partition_write_burst_bytes,json=partitionWriteBurstBytes,proto3" json:"partition_write_burst_bytes,omitempty"`
	// User and server attributes of topic. Server attributes starts from "_" and will be validated by server.
	Attributes map[string]string `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of consumers for this topic.
	Consumers []*Consumer `protobuf:"bytes,11,rep,name=consumers,proto3" json:"consumers,omitempty"`
}

func (x *DescribeTopicResult) Reset() {
	*x = DescribeTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopicResult) ProtoMessage() {}

func (x *DescribeTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopicResult.ProtoReflect.Descriptor instead.
func (*DescribeTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{15}
}

func (x *DescribeTopicResult) GetSelf() *Ydb_Scheme.Entry {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *DescribeTopicResult) GetPartitioningSettings() *PartitioningSettings {
	if x != nil {
		return x.PartitioningSettings
	}
	return nil
}

func (x *DescribeTopicResult) GetPartitions() []*DescribeTopicResult_PartitionInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *DescribeTopicResult) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *DescribeTopicResult) GetRetentionStorageMb() int64 {
	if x != nil {
		return x.RetentionStorageMb
	}
	return 0
}

func (x *DescribeTopicResult) GetSupportedCodecs() *SupportedCodecs {
	if x != nil {
		return x.SupportedCodecs
	}
	return nil
}

func (x *DescribeTopicResult) GetPartitionWriteSpeedBytesPerSecond() int64 {
	if x != nil {
		return x.PartitionWriteSpeedBytesPerSecond
	}
	return 0
}

func (x *DescribeTopicResult) GetPartitionWriteBurstBytes() int64 {
	if x != nil {
		return x.PartitionWriteBurstBytes
	}
	return 0
}

func (x *DescribeTopicResult) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DescribeTopicResult) GetConsumers() []*Consumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

// Update existing topic request sent from client to server.
type AlterTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path                      string                     `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	AlterPartitioningSettings *AlterPartitioningSettings `protobuf:"bytes,3,opt,name=alter_partitioning_settings,json=alterPartitioningSettings,proto3" json:"alter_partitioning_settings,omitempty"` // partitioning_settings
	// Retention settings.
	// Currently, only one limit may be set, so other should not be set.
	//
	// How long data in partition should be stored. Must be greater than 0 and less than limit for this database.
	// Default limit - 36 hours.
	SetRetentionPeriod *durationpb.Duration `protobuf:"bytes,4,opt,name=set_retention_period,json=setRetentionPeriod,proto3" json:"set_retention_period,omitempty"`
	// How much data in partition should be stored. Must be greater than 0 and less than limit for this database.
	SetRetentionStorageMb *int64 `protobuf:"varint,5,opt,name=set_retention_storage_mb,json=setRetentionStorageMb,proto3,oneof" json:"set_retention_storage_mb,omitempty"`
	// List of allowed codecs for writers.
	// Writes with codec not from this list are forbidden.
	SetSupportedCodecs *SupportedCodecs `protobuf:"bytes,7,opt,name=set_supported_codecs,json=setSupportedCodecs,proto3" json:"set_supported_codecs,omitempty"`
	// Partition write speed in bytes per second. Must be less than database limit. Default limit - 1 MB/s.
	SetPartitionWriteSpeedBytesPerSecond *int64 `protobuf:"varint,8,opt,name=set_partition_write_speed_bytes_per_second,json=setPartitionWriteSpeedBytesPerSecond,proto3,oneof" json:"set_partition_write_speed_bytes_per_second,omitempty"`
	// Burst size for write in partition, in bytes. Must be less than database limit. Default limit - 1 MB.
	SetPartitionWriteBurstBytes *int64 `protobuf:"varint,9,opt,name=set_partition_write_burst_bytes,json=setPartitionWriteBurstBytes,proto3,oneof" json:"set_partition_write_burst_bytes,omitempty"`
	// User and server attributes of topic. Server attributes starts from "_" and will be validated by server.
	// Leave the value blank to drop an attribute.
	AlterAttributes map[string]string `protobuf:"bytes,10,rep,name=alter_attributes,json=alterAttributes,proto3" json:"alter_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Add consumers.
	AddConsumers []*Consumer `protobuf:"bytes,11,rep,name=add_consumers,json=addConsumers,proto3" json:"add_consumers,omitempty"`
	// Remove consumers (by its names)
	DropConsumers []string `protobuf:"bytes,12,rep,name=drop_consumers,json=dropConsumers,proto3" json:"drop_consumers,omitempty"`
	// Alter consumers
	AlterConsumers []*AlterConsumer `protobuf:"bytes,13,rep,name=alter_consumers,json=alterConsumers,proto3" json:"alter_consumers,omitempty"`
}

func (x *AlterTopicRequest) Reset() {
	*x = AlterTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTopicRequest) ProtoMessage() {}

func (x *AlterTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTopicRequest.ProtoReflect.Descriptor instead.
func (*AlterTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{16}
}

func (x *AlterTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *AlterTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AlterTopicRequest) GetAlterPartitioningSettings() *AlterPartitioningSettings {
	if x != nil {
		return x.AlterPartitioningSettings
	}
	return nil
}

func (x *AlterTopicRequest) GetSetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.SetRetentionPeriod
	}
	return nil
}

func (x *AlterTopicRequest) GetSetRetentionStorageMb() int64 {
	if x != nil && x.SetRetentionStorageMb != nil {
		return *x.SetRetentionStorageMb
	}
	return 0
}

func (x *AlterTopicRequest) GetSetSupportedCodecs() *SupportedCodecs {
	if x != nil {
		return x.SetSupportedCodecs
	}
	return nil
}

func (x *AlterTopicRequest) GetSetPartitionWriteSpeedBytesPerSecond() int64 {
	if x != nil && x.SetPartitionWriteSpeedBytesPerSecond != nil {
		return *x.SetPartitionWriteSpeedBytesPerSecond
	}
	return 0
}

func (x *AlterTopicRequest) GetSetPartitionWriteBurstBytes() int64 {
	if x != nil && x.SetPartitionWriteBurstBytes != nil {
		return *x.SetPartitionWriteBurstBytes
	}
	return 0
}

func (x *AlterTopicRequest) GetAlterAttributes() map[string]string {
	if x != nil {
		return x.AlterAttributes
	}
	return nil
}

func (x *AlterTopicRequest) GetAddConsumers() []*Consumer {
	if x != nil {
		return x.AddConsumers
	}
	return nil
}

func (x *AlterTopicRequest) GetDropConsumers() []string {
	if x != nil {
		return x.DropConsumers
	}
	return nil
}

func (x *AlterTopicRequest) GetAlterConsumers() []*AlterConsumer {
	if x != nil {
		return x.AlterConsumers
	}
	return nil
}

// Update topic response sent from server to client.
type AlterTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *AlterTopicResponse) Reset() {
	*x = AlterTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTopicResponse) ProtoMessage() {}

func (x *AlterTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTopicResponse.ProtoReflect.Descriptor instead.
func (*AlterTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{17}
}

func (x *AlterTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Update topic result message that will be inside UpdateTopicResponse.operation.
type AlterTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AlterTopicResult) Reset() {
	*x = AlterTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTopicResult) ProtoMessage() {}

func (x *AlterTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTopicResult.ProtoReflect.Descriptor instead.
func (*AlterTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{18}
}

// Drop topic request sent from client to server.
type DropTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Topic path.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DropTopicRequest) Reset() {
	*x = DropTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTopicRequest) ProtoMessage() {}

func (x *DropTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTopicRequest.ProtoReflect.Descriptor instead.
func (*DropTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{19}
}

func (x *DropTopicRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *DropTopicRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Drop topic response sent from server to client.
// If topic not exists then response status will be "SCHEME_ERROR".
type DropTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of request will be inside operation.
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DropTopicResponse) Reset() {
	*x = DropTopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTopicResponse) ProtoMessage() {}

func (x *DropTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTopicResponse.ProtoReflect.Descriptor instead.
func (*DropTopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{20}
}

func (x *DropTopicResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Drop topic result message that will be inside DropTopicResponse.operation.
type DropTopicResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DropTopicResult) Reset() {
	*x = DropTopicResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTopicResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTopicResult) ProtoMessage() {}

func (x *DropTopicResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTopicResult.ProtoReflect.Descriptor instead.
func (*DropTopicResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{21}
}

// Client-server message for write session. Contains one of:
//     InitRequest - handshake request.
//     WriteRequest - portion of data to be written.
//     UpdateTokenRequest - user credentials if update is needed.
type StreamWriteMessage_FromClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ClientMessage:
	//	*StreamWriteMessage_FromClient_InitRequest
	//	*StreamWriteMessage_FromClient_WriteRequest
	//	*StreamWriteMessage_FromClient_UpdateTokenRequest
	ClientMessage isStreamWriteMessage_FromClient_ClientMessage `protobuf_oneof:"client_message"`
}

func (x *StreamWriteMessage_FromClient) Reset() {
	*x = StreamWriteMessage_FromClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_FromClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_FromClient) ProtoMessage() {}

func (x *StreamWriteMessage_FromClient) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_FromClient.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_FromClient) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 0}
}

func (m *StreamWriteMessage_FromClient) GetClientMessage() isStreamWriteMessage_FromClient_ClientMessage {
	if m != nil {
		return m.ClientMessage
	}
	return nil
}

func (x *StreamWriteMessage_FromClient) GetInitRequest() *StreamWriteMessage_InitRequest {
	if x, ok := x.GetClientMessage().(*StreamWriteMessage_FromClient_InitRequest); ok {
		return x.InitRequest
	}
	return nil
}

func (x *StreamWriteMessage_FromClient) GetWriteRequest() *StreamWriteMessage_WriteRequest {
	if x, ok := x.GetClientMessage().(*StreamWriteMessage_FromClient_WriteRequest); ok {
		return x.WriteRequest
	}
	return nil
}

func (x *StreamWriteMessage_FromClient) GetUpdateTokenRequest() *UpdateTokenRequest {
	if x, ok := x.GetClientMessage().(*StreamWriteMessage_FromClient_UpdateTokenRequest); ok {
		return x.UpdateTokenRequest
	}
	return nil
}

type isStreamWriteMessage_FromClient_ClientMessage interface {
	isStreamWriteMessage_FromClient_ClientMessage()
}

type StreamWriteMessage_FromClient_InitRequest struct {
	InitRequest *StreamWriteMessage_InitRequest `protobuf:"bytes,1,opt,name=init_request,json=initRequest,proto3,oneof"`
}

type StreamWriteMessage_FromClient_WriteRequest struct {
	WriteRequest *StreamWriteMessage_WriteRequest `protobuf:"bytes,2,opt,name=write_request,json=writeRequest,proto3,oneof"`
}

type StreamWriteMessage_FromClient_UpdateTokenRequest struct {
	UpdateTokenRequest *UpdateTokenRequest `protobuf:"bytes,3,opt,name=update_token_request,json=updateTokenRequest,proto3,oneof"`
}

func (*StreamWriteMessage_FromClient_InitRequest) isStreamWriteMessage_FromClient_ClientMessage() {}

func (*StreamWriteMessage_FromClient_WriteRequest) isStreamWriteMessage_FromClient_ClientMessage() {}

func (*StreamWriteMessage_FromClient_UpdateTokenRequest) isStreamWriteMessage_FromClient_ClientMessage() {
}

// Server-client message for write session. Contains either non-success status, or one of:
//     InitResponse - correct handshake response.
//     WriteResponse - acknowledgment of storing client messages.
//     UpdateTokenResponse - acknowledgment of reauthentication and reauthorization.
type StreamWriteMessage_FromServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server status of response.
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Issues if any.
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	// Types that are assignable to ServerMessage:
	//	*StreamWriteMessage_FromServer_InitResponse
	//	*StreamWriteMessage_FromServer_WriteResponse
	//	*StreamWriteMessage_FromServer_UpdateTokenResponse
	ServerMessage isStreamWriteMessage_FromServer_ServerMessage `protobuf_oneof:"server_message"`
}

func (x *StreamWriteMessage_FromServer) Reset() {
	*x = StreamWriteMessage_FromServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_FromServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_FromServer) ProtoMessage() {}

func (x *StreamWriteMessage_FromServer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_FromServer.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_FromServer) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 1}
}

func (x *StreamWriteMessage_FromServer) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *StreamWriteMessage_FromServer) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (m *StreamWriteMessage_FromServer) GetServerMessage() isStreamWriteMessage_FromServer_ServerMessage {
	if m != nil {
		return m.ServerMessage
	}
	return nil
}

func (x *StreamWriteMessage_FromServer) GetInitResponse() *StreamWriteMessage_InitResponse {
	if x, ok := x.GetServerMessage().(*StreamWriteMessage_FromServer_InitResponse); ok {
		return x.InitResponse
	}
	return nil
}

func (x *StreamWriteMessage_FromServer) GetWriteResponse() *StreamWriteMessage_WriteResponse {
	if x, ok := x.GetServerMessage().(*StreamWriteMessage_FromServer_WriteResponse); ok {
		return x.WriteResponse
	}
	return nil
}

func (x *StreamWriteMessage_FromServer) GetUpdateTokenResponse() *UpdateTokenResponse {
	if x, ok := x.GetServerMessage().(*StreamWriteMessage_FromServer_UpdateTokenResponse); ok {
		return x.UpdateTokenResponse
	}
	return nil
}

type isStreamWriteMessage_FromServer_ServerMessage interface {
	isStreamWriteMessage_FromServer_ServerMessage()
}

type StreamWriteMessage_FromServer_InitResponse struct {
	InitResponse *StreamWriteMessage_InitResponse `protobuf:"bytes,3,opt,name=init_response,json=initResponse,proto3,oneof"`
}

type StreamWriteMessage_FromServer_WriteResponse struct {
	WriteResponse *StreamWriteMessage_WriteResponse `protobuf:"bytes,4,opt,name=write_response,json=writeResponse,proto3,oneof"`
}

type StreamWriteMessage_FromServer_UpdateTokenResponse struct {
	UpdateTokenResponse *UpdateTokenResponse `protobuf:"bytes,5,opt,name=update_token_response,json=updateTokenResponse,proto3,oneof"`
}

func (*StreamWriteMessage_FromServer_InitResponse) isStreamWriteMessage_FromServer_ServerMessage() {}

func (*StreamWriteMessage_FromServer_WriteResponse) isStreamWriteMessage_FromServer_ServerMessage() {}

func (*StreamWriteMessage_FromServer_UpdateTokenResponse) isStreamWriteMessage_FromServer_ServerMessage() {
}

// Handshake request that must be sent to server first.
type StreamWriteMessage_InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full path of topic to write to.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Producer identifier of client data stream.
	// Used for message deduplication by sequence numbers.
	ProducerId string `protobuf:"bytes,2,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"`
	// User metadata attached to this write session.
	// Reader will get this session meta data with each message read.
	WriteSessionMeta map[string]string `protobuf:"bytes,3,rep,name=write_session_meta,json=writeSessionMeta,proto3" json:"write_session_meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Option for setting order on messages.
	// If neither is set, no guarantees on ordering or partitions to write to.
	//
	// Types that are assignable to Partitioning:
	//	*StreamWriteMessage_InitRequest_MessageGroupId
	//	*StreamWriteMessage_InitRequest_PartitionId
	Partitioning isStreamWriteMessage_InitRequest_Partitioning `protobuf_oneof:"partitioning"`
	// Explicitly request for last sequential number
	// It may be expensive, if producer wrote to many partitions before.
	GetLastSeqNo bool `protobuf:"varint,6,opt,name=get_last_seq_no,json=getLastSeqNo,proto3" json:"get_last_seq_no,omitempty"`
}

func (x *StreamWriteMessage_InitRequest) Reset() {
	*x = StreamWriteMessage_InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_InitRequest) ProtoMessage() {}

func (x *StreamWriteMessage_InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_InitRequest.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_InitRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 2}
}

func (x *StreamWriteMessage_InitRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StreamWriteMessage_InitRequest) GetProducerId() string {
	if x != nil {
		return x.ProducerId
	}
	return ""
}

func (x *StreamWriteMessage_InitRequest) GetWriteSessionMeta() map[string]string {
	if x != nil {
		return x.WriteSessionMeta
	}
	return nil
}

func (m *StreamWriteMessage_InitRequest) GetPartitioning() isStreamWriteMessage_InitRequest_Partitioning {
	if m != nil {
		return m.Partitioning
	}
	return nil
}

func (x *StreamWriteMessage_InitRequest) GetMessageGroupId() string {
	if x, ok := x.GetPartitioning().(*StreamWriteMessage_InitRequest_MessageGroupId); ok {
		return x.MessageGroupId
	}
	return ""
}

func (x *StreamWriteMessage_InitRequest) GetPartitionId() int64 {
	if x, ok := x.GetPartitioning().(*StreamWriteMessage_InitRequest_PartitionId); ok {
		return x.PartitionId
	}
	return 0
}

func (x *StreamWriteMessage_InitRequest) GetGetLastSeqNo() bool {
	if x != nil {
		return x.GetLastSeqNo
	}
	return false
}

type isStreamWriteMessage_InitRequest_Partitioning interface {
	isStreamWriteMessage_InitRequest_Partitioning()
}

type StreamWriteMessage_InitRequest_MessageGroupId struct {
	// All messages with given pair (producer_id, message_group_id) go to single partition in order of writes.
	MessageGroupId string `protobuf:"bytes,4,opt,name=message_group_id,json=messageGroupId,proto3,oneof"`
}

type StreamWriteMessage_InitRequest_PartitionId struct {
	// Explicit partition id to write to.
	PartitionId int64 `protobuf:"varint,5,opt,name=partition_id,json=partitionId,proto3,oneof"`
}

func (*StreamWriteMessage_InitRequest_MessageGroupId) isStreamWriteMessage_InitRequest_Partitioning() {
}

func (*StreamWriteMessage_InitRequest_PartitionId) isStreamWriteMessage_InitRequest_Partitioning() {}

// Response for handshake.
type StreamWriteMessage_InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Last persisted message's sequence number for this producer.
	// Zero for new producer.
	LastSeqNo int64 `protobuf:"varint,1,opt,name=last_seq_no,json=lastSeqNo,proto3" json:"last_seq_no,omitempty"`
	// Unique identifier of write session. Used for debug purposes.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Identifier of partition that is matched for this write session.
	PartitionId int64 `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Client can only use compression codecs from this set to write messages to topic.
	// Otherwise session will be closed with BAD_REQUEST.
	SupportedCodecs *SupportedCodecs `protobuf:"bytes,4,opt,name=supported_codecs,json=supportedCodecs,proto3" json:"supported_codecs,omitempty"`
}

func (x *StreamWriteMessage_InitResponse) Reset() {
	*x = StreamWriteMessage_InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_InitResponse) ProtoMessage() {}

func (x *StreamWriteMessage_InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_InitResponse.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_InitResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 3}
}

func (x *StreamWriteMessage_InitResponse) GetLastSeqNo() int64 {
	if x != nil {
		return x.LastSeqNo
	}
	return 0
}

func (x *StreamWriteMessage_InitResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamWriteMessage_InitResponse) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *StreamWriteMessage_InitResponse) GetSupportedCodecs() *SupportedCodecs {
	if x != nil {
		return x.SupportedCodecs
	}
	return nil
}

// Represents portion of client messages.
type StreamWriteMessage_WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*StreamWriteMessage_WriteRequest_MessageData `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// Codec that is used for data compression.
	// See enum Codec above for values.
	Codec int32 `protobuf:"varint,2,opt,name=codec,proto3" json:"codec,omitempty"`
}

func (x *StreamWriteMessage_WriteRequest) Reset() {
	*x = StreamWriteMessage_WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_WriteRequest) ProtoMessage() {}

func (x *StreamWriteMessage_WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_WriteRequest.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_WriteRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 4}
}

func (x *StreamWriteMessage_WriteRequest) GetMessages() []*StreamWriteMessage_WriteRequest_MessageData {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *StreamWriteMessage_WriteRequest) GetCodec() int32 {
	if x != nil {
		return x.Codec
	}
	return 0
}

// Message that represents acknowledgment for sequence of client messages.
// This sequence is persisted together so write statistics is for messages batch.
type StreamWriteMessage_WriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of acks is equal to number of messages in the corresponding WriteRequests.
	Acks []*StreamWriteMessage_WriteResponse_WriteAck `protobuf:"bytes,1,rep,name=acks,proto3" json:"acks,omitempty"`
	// Assigned partition for all client messages inside this batch.
	// This actual partition may differ from that returned in InitResponse
	// or other WriteResponses in this write session.
	PartitionId int64 `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Write statistics for this sequence of client messages.
	WriteStatistics *StreamWriteMessage_WriteResponse_WriteStatistics `protobuf:"bytes,3,opt,name=write_statistics,json=writeStatistics,proto3" json:"write_statistics,omitempty"`
}

func (x *StreamWriteMessage_WriteResponse) Reset() {
	*x = StreamWriteMessage_WriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_WriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_WriteResponse) ProtoMessage() {}

func (x *StreamWriteMessage_WriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_WriteResponse.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_WriteResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 5}
}

func (x *StreamWriteMessage_WriteResponse) GetAcks() []*StreamWriteMessage_WriteResponse_WriteAck {
	if x != nil {
		return x.Acks
	}
	return nil
}

func (x *StreamWriteMessage_WriteResponse) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *StreamWriteMessage_WriteResponse) GetWriteStatistics() *StreamWriteMessage_WriteResponse_WriteStatistics {
	if x != nil {
		return x.WriteStatistics
	}
	return nil
}

type StreamWriteMessage_WriteRequest_MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message sequence number, provided by client for deduplication.
	// Starts at 1
	SeqNo int64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	// Creation timestamp
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Compressed client message body.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Uncompressed size of client message body.
	UncompressedSize int64 `protobuf:"varint,4,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// Per-message override for respective write session settings.
	//
	// Types that are assignable to Partitioning:
	//	*StreamWriteMessage_WriteRequest_MessageData_MessageGroupId
	//	*StreamWriteMessage_WriteRequest_MessageData_PartitionId
	Partitioning isStreamWriteMessage_WriteRequest_MessageData_Partitioning `protobuf_oneof:"partitioning"`
}

func (x *StreamWriteMessage_WriteRequest_MessageData) Reset() {
	*x = StreamWriteMessage_WriteRequest_MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_WriteRequest_MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_WriteRequest_MessageData) ProtoMessage() {}

func (x *StreamWriteMessage_WriteRequest_MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_WriteRequest_MessageData.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_WriteRequest_MessageData) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 4, 0}
}

func (x *StreamWriteMessage_WriteRequest_MessageData) GetSeqNo() int64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *StreamWriteMessage_WriteRequest_MessageData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *StreamWriteMessage_WriteRequest_MessageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamWriteMessage_WriteRequest_MessageData) GetUncompressedSize() int64 {
	if x != nil {
		return x.UncompressedSize
	}
	return 0
}

func (m *StreamWriteMessage_WriteRequest_MessageData) GetPartitioning() isStreamWriteMessage_WriteRequest_MessageData_Partitioning {
	if m != nil {
		return m.Partitioning
	}
	return nil
}

func (x *StreamWriteMessage_WriteRequest_MessageData) GetMessageGroupId() string {
	if x, ok := x.GetPartitioning().(*StreamWriteMessage_WriteRequest_MessageData_MessageGroupId); ok {
		return x.MessageGroupId
	}
	return ""
}

func (x *StreamWriteMessage_WriteRequest_MessageData) GetPartitionId() int64 {
	if x, ok := x.GetPartitioning().(*StreamWriteMessage_WriteRequest_MessageData_PartitionId); ok {
		return x.PartitionId
	}
	return 0
}

type isStreamWriteMessage_WriteRequest_MessageData_Partitioning interface {
	isStreamWriteMessage_WriteRequest_MessageData_Partitioning()
}

type StreamWriteMessage_WriteRequest_MessageData_MessageGroupId struct {
	// All messages with given pair (producer_id, message_group_id) go to single partition in order of writes.
	MessageGroupId string `protobuf:"bytes,5,opt,name=message_group_id,json=messageGroupId,proto3,oneof"`
}

type StreamWriteMessage_WriteRequest_MessageData_PartitionId struct {
	// Explicit partition id to write to.
	PartitionId int64 `protobuf:"varint,6,opt,name=partition_id,json=partitionId,proto3,oneof"`
}

func (*StreamWriteMessage_WriteRequest_MessageData_MessageGroupId) isStreamWriteMessage_WriteRequest_MessageData_Partitioning() {
}

func (*StreamWriteMessage_WriteRequest_MessageData_PartitionId) isStreamWriteMessage_WriteRequest_MessageData_Partitioning() {
}

// Acknowledgment for one persistently written message.
type StreamWriteMessage_WriteResponse_WriteAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence number as in WriteRequest.
	SeqNo int64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	// Either message is written for the first time or duplicate.
	//
	// Types that are assignable to MessageWriteStatus:
	//	*StreamWriteMessage_WriteResponse_WriteAck_Written_
	//	*StreamWriteMessage_WriteResponse_WriteAck_Skipped_
	MessageWriteStatus isStreamWriteMessage_WriteResponse_WriteAck_MessageWriteStatus `protobuf_oneof:"message_write_status"`
}

func (x *StreamWriteMessage_WriteResponse_WriteAck) Reset() {
	*x = StreamWriteMessage_WriteResponse_WriteAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_WriteResponse_WriteAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_WriteResponse_WriteAck) ProtoMessage() {}

func (x *StreamWriteMessage_WriteResponse_WriteAck) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_WriteResponse_WriteAck.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_WriteResponse_WriteAck) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 5, 0}
}

func (x *StreamWriteMessage_WriteResponse_WriteAck) GetSeqNo() int64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (m *StreamWriteMessage_WriteResponse_WriteAck) GetMessageWriteStatus() isStreamWriteMessage_WriteResponse_WriteAck_MessageWriteStatus {
	if m != nil {
		return m.MessageWriteStatus
	}
	return nil
}

func (x *StreamWriteMessage_WriteResponse_WriteAck) GetWritten() *StreamWriteMessage_WriteResponse_WriteAck_Written {
	if x, ok := x.GetMessageWriteStatus().(*StreamWriteMessage_WriteResponse_WriteAck_Written_); ok {
		return x.Written
	}
	return nil
}

func (x *StreamWriteMessage_WriteResponse_WriteAck) GetSkipped() *StreamWriteMessage_WriteResponse_WriteAck_Skipped {
	if x, ok := x.GetMessageWriteStatus().(*StreamWriteMessage_WriteResponse_WriteAck_Skipped_); ok {
		return x.Skipped
	}
	return nil
}

type isStreamWriteMessage_WriteResponse_WriteAck_MessageWriteStatus interface {
	isStreamWriteMessage_WriteResponse_WriteAck_MessageWriteStatus()
}

type StreamWriteMessage_WriteResponse_WriteAck_Written_ struct {
	Written *StreamWriteMessage_WriteResponse_WriteAck_Written `protobuf:"bytes,2,opt,name=written,proto3,oneof"`
}

type StreamWriteMessage_WriteResponse_WriteAck_Skipped_ struct {
	Skipped *StreamWriteMessage_WriteResponse_WriteAck_Skipped `protobuf:"bytes,3,opt,name=skipped,proto3,oneof"`
}

func (*StreamWriteMessage_WriteResponse_WriteAck_Written_) isStreamWriteMessage_WriteResponse_WriteAck_MessageWriteStatus() {
}

func (*StreamWriteMessage_WriteResponse_WriteAck_Skipped_) isStreamWriteMessage_WriteResponse_WriteAck_MessageWriteStatus() {
}

// Message with write statistics.
type StreamWriteMessage_WriteResponse_WriteStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time spent in persisting of data. Same for each message in response.
	PersistingTime *durationpb.Duration `protobuf:"bytes,1,opt,name=persisting_time,json=persistingTime,proto3" json:"persisting_time,omitempty"`
	// Time spent in queue before persisting, minimal of all messages in response.
	MinQueueWaitTime *durationpb.Duration `protobuf:"bytes,2,opt,name=min_queue_wait_time,json=minQueueWaitTime,proto3" json:"min_queue_wait_time,omitempty"`
	// Time spent in queue before persisting, maximal of all messages in response.
	MaxQueueWaitTime *durationpb.Duration `protobuf:"bytes,3,opt,name=max_queue_wait_time,json=maxQueueWaitTime,proto3" json:"max_queue_wait_time,omitempty"`
	// Time spent awaiting for partition write quota. Same for each message in response.
	PartitionQuotaWaitTime *durationpb.Duration `protobuf:"bytes,4,opt,name=partition_quota_wait_time,json=partitionQuotaWaitTime,proto3" json:"partition_quota_wait_time,omitempty"`
	// Time spent awaiting for topic write quota. Same for each message in response.
	TopicQuotaWaitTime *durationpb.Duration `protobuf:"bytes,5,opt,name=topic_quota_wait_time,json=topicQuotaWaitTime,proto3" json:"topic_quota_wait_time,omitempty"`
}

func (x *StreamWriteMessage_WriteResponse_WriteStatistics) Reset() {
	*x = StreamWriteMessage_WriteResponse_WriteStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_WriteResponse_WriteStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_WriteResponse_WriteStatistics) ProtoMessage() {}

func (x *StreamWriteMessage_WriteResponse_WriteStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_WriteResponse_WriteStatistics.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_WriteResponse_WriteStatistics) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 5, 1}
}

func (x *StreamWriteMessage_WriteResponse_WriteStatistics) GetPersistingTime() *durationpb.Duration {
	if x != nil {
		return x.PersistingTime
	}
	return nil
}

func (x *StreamWriteMessage_WriteResponse_WriteStatistics) GetMinQueueWaitTime() *durationpb.Duration {
	if x != nil {
		return x.MinQueueWaitTime
	}
	return nil
}

func (x *StreamWriteMessage_WriteResponse_WriteStatistics) GetMaxQueueWaitTime() *durationpb.Duration {
	if x != nil {
		return x.MaxQueueWaitTime
	}
	return nil
}

func (x *StreamWriteMessage_WriteResponse_WriteStatistics) GetPartitionQuotaWaitTime() *durationpb.Duration {
	if x != nil {
		return x.PartitionQuotaWaitTime
	}
	return nil
}

func (x *StreamWriteMessage_WriteResponse_WriteStatistics) GetTopicQuotaWaitTime() *durationpb.Duration {
	if x != nil {
		return x.TopicQuotaWaitTime
	}
	return nil
}

type StreamWriteMessage_WriteResponse_WriteAck_Written struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Assigned partition offset.
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *StreamWriteMessage_WriteResponse_WriteAck_Written) Reset() {
	*x = StreamWriteMessage_WriteResponse_WriteAck_Written{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_WriteResponse_WriteAck_Written) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_WriteResponse_WriteAck_Written) ProtoMessage() {}

func (x *StreamWriteMessage_WriteResponse_WriteAck_Written) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_WriteResponse_WriteAck_Written.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_WriteResponse_WriteAck_Written) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 5, 0, 0}
}

func (x *StreamWriteMessage_WriteResponse_WriteAck_Written) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type StreamWriteMessage_WriteResponse_WriteAck_Skipped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason `protobuf:"varint,1,opt,name=reason,proto3,enum=Ydb.Topic.StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason" json:"reason,omitempty"`
}

func (x *StreamWriteMessage_WriteResponse_WriteAck_Skipped) Reset() {
	*x = StreamWriteMessage_WriteResponse_WriteAck_Skipped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWriteMessage_WriteResponse_WriteAck_Skipped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteMessage_WriteResponse_WriteAck_Skipped) ProtoMessage() {}

func (x *StreamWriteMessage_WriteResponse_WriteAck_Skipped) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteMessage_WriteResponse_WriteAck_Skipped.ProtoReflect.Descriptor instead.
func (*StreamWriteMessage_WriteResponse_WriteAck_Skipped) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{4, 5, 0, 1}
}

func (x *StreamWriteMessage_WriteResponse_WriteAck_Skipped) GetReason() StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason {
	if x != nil {
		return x.Reason
	}
	return StreamWriteMessage_WriteResponse_WriteAck_Skipped_REASON_UNSPECIFIED
}

// Within a StreamRead session delivered messages are separated by partition.
// Reads from a single partition are represented by a partition session.
type StreamReadMessage_PartitionSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identitifier of partition session. Unique inside one RPC call.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Topic path of partition.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Partition identifier.
	PartitionId int64 `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *StreamReadMessage_PartitionSession) Reset() {
	*x = StreamReadMessage_PartitionSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_PartitionSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_PartitionSession) ProtoMessage() {}

func (x *StreamReadMessage_PartitionSession) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_PartitionSession.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_PartitionSession) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 0}
}

func (x *StreamReadMessage_PartitionSession) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamReadMessage_PartitionSession) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StreamReadMessage_PartitionSession) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

// Client-server message for read session. Contains one of:
//     InitRequest - handshake request.
//     ReadRequest - request for data.
//     CommitOffsetRequest - request for commit of some read data.
//     PartitionSessionStatusRequest - request for session status
//     UpdateTokenRequest - request to update auth token
//
//     StartPartitionSessionResponse - Response to StreamReadServerMessage.StartPartitionSessionRequest.
//         Client signals it is ready to get data from partition.
//     StopPartitionSessionResponse - Response to StreamReadServerMessage.StopPartitionSessionRequest.
//         Client signals it has finished working with partition. Mandatory for graceful stop, optional otherwise.
type StreamReadMessage_FromClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ClientMessage:
	//	*StreamReadMessage_FromClient_InitRequest
	//	*StreamReadMessage_FromClient_ReadRequest
	//	*StreamReadMessage_FromClient_CommitOffsetRequest
	//	*StreamReadMessage_FromClient_PartitionSessionStatusRequest
	//	*StreamReadMessage_FromClient_UpdateTokenRequest
	//	*StreamReadMessage_FromClient_StartPartitionSessionResponse
	//	*StreamReadMessage_FromClient_StopPartitionSessionResponse
	ClientMessage isStreamReadMessage_FromClient_ClientMessage `protobuf_oneof:"client_message"`
}

func (x *StreamReadMessage_FromClient) Reset() {
	*x = StreamReadMessage_FromClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_FromClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_FromClient) ProtoMessage() {}

func (x *StreamReadMessage_FromClient) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_FromClient.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_FromClient) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 1}
}

func (m *StreamReadMessage_FromClient) GetClientMessage() isStreamReadMessage_FromClient_ClientMessage {
	if m != nil {
		return m.ClientMessage
	}
	return nil
}

func (x *StreamReadMessage_FromClient) GetInitRequest() *StreamReadMessage_InitRequest {
	if x, ok := x.GetClientMessage().(*StreamReadMessage_FromClient_InitRequest); ok {
		return x.InitRequest
	}
	return nil
}

func (x *StreamReadMessage_FromClient) GetReadRequest() *StreamReadMessage_ReadRequest {
	if x, ok := x.GetClientMessage().(*StreamReadMessage_FromClient_ReadRequest); ok {
		return x.ReadRequest
	}
	return nil
}

func (x *StreamReadMessage_FromClient) GetCommitOffsetRequest() *StreamReadMessage_CommitOffsetRequest {
	if x, ok := x.GetClientMessage().(*StreamReadMessage_FromClient_CommitOffsetRequest); ok {
		return x.CommitOffsetRequest
	}
	return nil
}

func (x *StreamReadMessage_FromClient) GetPartitionSessionStatusRequest() *StreamReadMessage_PartitionSessionStatusRequest {
	if x, ok := x.GetClientMessage().(*StreamReadMessage_FromClient_PartitionSessionStatusRequest); ok {
		return x.PartitionSessionStatusRequest
	}
	return nil
}

func (x *StreamReadMessage_FromClient) GetUpdateTokenRequest() *UpdateTokenRequest {
	if x, ok := x.GetClientMessage().(*StreamReadMessage_FromClient_UpdateTokenRequest); ok {
		return x.UpdateTokenRequest
	}
	return nil
}

func (x *StreamReadMessage_FromClient) GetStartPartitionSessionResponse() *StreamReadMessage_StartPartitionSessionResponse {
	if x, ok := x.GetClientMessage().(*StreamReadMessage_FromClient_StartPartitionSessionResponse); ok {
		return x.StartPartitionSessionResponse
	}
	return nil
}

func (x *StreamReadMessage_FromClient) GetStopPartitionSessionResponse() *StreamReadMessage_StopPartitionSessionResponse {
	if x, ok := x.GetClientMessage().(*StreamReadMessage_FromClient_StopPartitionSessionResponse); ok {
		return x.StopPartitionSessionResponse
	}
	return nil
}

type isStreamReadMessage_FromClient_ClientMessage interface {
	isStreamReadMessage_FromClient_ClientMessage()
}

type StreamReadMessage_FromClient_InitRequest struct {
	// Client requests.
	InitRequest *StreamReadMessage_InitRequest `protobuf:"bytes,1,opt,name=init_request,json=initRequest,proto3,oneof"`
}

type StreamReadMessage_FromClient_ReadRequest struct {
	ReadRequest *StreamReadMessage_ReadRequest `protobuf:"bytes,2,opt,name=read_request,json=readRequest,proto3,oneof"`
}

type StreamReadMessage_FromClient_CommitOffsetRequest struct {
	CommitOffsetRequest *StreamReadMessage_CommitOffsetRequest `protobuf:"bytes,3,opt,name=commit_offset_request,json=commitOffsetRequest,proto3,oneof"`
}

type StreamReadMessage_FromClient_PartitionSessionStatusRequest struct {
	PartitionSessionStatusRequest *StreamReadMessage_PartitionSessionStatusRequest `protobuf:"bytes,4,opt,name=partition_session_status_request,json=partitionSessionStatusRequest,proto3,oneof"`
}

type StreamReadMessage_FromClient_UpdateTokenRequest struct {
	UpdateTokenRequest *UpdateTokenRequest `protobuf:"bytes,5,opt,name=update_token_request,json=updateTokenRequest,proto3,oneof"`
}

type StreamReadMessage_FromClient_StartPartitionSessionResponse struct {
	// Responses to respective server commands.
	StartPartitionSessionResponse *StreamReadMessage_StartPartitionSessionResponse `protobuf:"bytes,6,opt,name=start_partition_session_response,json=startPartitionSessionResponse,proto3,oneof"`
}

type StreamReadMessage_FromClient_StopPartitionSessionResponse struct {
	StopPartitionSessionResponse *StreamReadMessage_StopPartitionSessionResponse `protobuf:"bytes,7,opt,name=stop_partition_session_response,json=stopPartitionSessionResponse,proto3,oneof"`
}

func (*StreamReadMessage_FromClient_InitRequest) isStreamReadMessage_FromClient_ClientMessage() {}

func (*StreamReadMessage_FromClient_ReadRequest) isStreamReadMessage_FromClient_ClientMessage() {}

func (*StreamReadMessage_FromClient_CommitOffsetRequest) isStreamReadMessage_FromClient_ClientMessage() {
}

func (*StreamReadMessage_FromClient_PartitionSessionStatusRequest) isStreamReadMessage_FromClient_ClientMessage() {
}

func (*StreamReadMessage_FromClient_UpdateTokenRequest) isStreamReadMessage_FromClient_ClientMessage() {
}

func (*StreamReadMessage_FromClient_StartPartitionSessionResponse) isStreamReadMessage_FromClient_ClientMessage() {
}

func (*StreamReadMessage_FromClient_StopPartitionSessionResponse) isStreamReadMessage_FromClient_ClientMessage() {
}

// Server-client message for read session. Contains one of:
//     InitResponse - handshake response from server.
//     ReadResponse - portion of data.
//     CommitOffsetResponse - acknowledgment for commit.
//     PartitionSessionStatusResponse - server response with partition session status.
//     UpdateTokenResponse - acknowledgment of token update.
//
//     StartPartitionSessionRequest - command from server to create a partition session.
//     StopPartitionSessionRequest - command from server to destroy a partition session.
type StreamReadMessage_FromServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server status of response.
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Issues if any.
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	// Types that are assignable to ServerMessage:
	//	*StreamReadMessage_FromServer_InitResponse
	//	*StreamReadMessage_FromServer_ReadResponse
	//	*StreamReadMessage_FromServer_CommitOffsetResponse
	//	*StreamReadMessage_FromServer_PartitionSessionStatusResponse
	//	*StreamReadMessage_FromServer_UpdateTokenResponse
	//	*StreamReadMessage_FromServer_StartPartitionSessionRequest
	//	*StreamReadMessage_FromServer_StopPartitionSessionRequest
	ServerMessage isStreamReadMessage_FromServer_ServerMessage `protobuf_oneof:"server_message"`
}

func (x *StreamReadMessage_FromServer) Reset() {
	*x = StreamReadMessage_FromServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_FromServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_FromServer) ProtoMessage() {}

func (x *StreamReadMessage_FromServer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_FromServer.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_FromServer) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 2}
}

func (x *StreamReadMessage_FromServer) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *StreamReadMessage_FromServer) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (m *StreamReadMessage_FromServer) GetServerMessage() isStreamReadMessage_FromServer_ServerMessage {
	if m != nil {
		return m.ServerMessage
	}
	return nil
}

func (x *StreamReadMessage_FromServer) GetInitResponse() *StreamReadMessage_InitResponse {
	if x, ok := x.GetServerMessage().(*StreamReadMessage_FromServer_InitResponse); ok {
		return x.InitResponse
	}
	return nil
}

func (x *StreamReadMessage_FromServer) GetReadResponse() *StreamReadMessage_ReadResponse {
	if x, ok := x.GetServerMessage().(*StreamReadMessage_FromServer_ReadResponse); ok {
		return x.ReadResponse
	}
	return nil
}

func (x *StreamReadMessage_FromServer) GetCommitOffsetResponse() *StreamReadMessage_CommitOffsetResponse {
	if x, ok := x.GetServerMessage().(*StreamReadMessage_FromServer_CommitOffsetResponse); ok {
		return x.CommitOffsetResponse
	}
	return nil
}

func (x *StreamReadMessage_FromServer) GetPartitionSessionStatusResponse() *StreamReadMessage_PartitionSessionStatusResponse {
	if x, ok := x.GetServerMessage().(*StreamReadMessage_FromServer_PartitionSessionStatusResponse); ok {
		return x.PartitionSessionStatusResponse
	}
	return nil
}

func (x *StreamReadMessage_FromServer) GetUpdateTokenResponse() *UpdateTokenResponse {
	if x, ok := x.GetServerMessage().(*StreamReadMessage_FromServer_UpdateTokenResponse); ok {
		return x.UpdateTokenResponse
	}
	return nil
}

func (x *StreamReadMessage_FromServer) GetStartPartitionSessionRequest() *StreamReadMessage_StartPartitionSessionRequest {
	if x, ok := x.GetServerMessage().(*StreamReadMessage_FromServer_StartPartitionSessionRequest); ok {
		return x.StartPartitionSessionRequest
	}
	return nil
}

func (x *StreamReadMessage_FromServer) GetStopPartitionSessionRequest() *StreamReadMessage_StopPartitionSessionRequest {
	if x, ok := x.GetServerMessage().(*StreamReadMessage_FromServer_StopPartitionSessionRequest); ok {
		return x.StopPartitionSessionRequest
	}
	return nil
}

type isStreamReadMessage_FromServer_ServerMessage interface {
	isStreamReadMessage_FromServer_ServerMessage()
}

type StreamReadMessage_FromServer_InitResponse struct {
	// Responses to respective client requests.
	InitResponse *StreamReadMessage_InitResponse `protobuf:"bytes,3,opt,name=init_response,json=initResponse,proto3,oneof"`
}

type StreamReadMessage_FromServer_ReadResponse struct {
	ReadResponse *StreamReadMessage_ReadResponse `protobuf:"bytes,4,opt,name=read_response,json=readResponse,proto3,oneof"`
}

type StreamReadMessage_FromServer_CommitOffsetResponse struct {
	CommitOffsetResponse *StreamReadMessage_CommitOffsetResponse `protobuf:"bytes,5,opt,name=commit_offset_response,json=commitOffsetResponse,proto3,oneof"`
}

type StreamReadMessage_FromServer_PartitionSessionStatusResponse struct {
	PartitionSessionStatusResponse *StreamReadMessage_PartitionSessionStatusResponse `protobuf:"bytes,6,opt,name=partition_session_status_response,json=partitionSessionStatusResponse,proto3,oneof"`
}

type StreamReadMessage_FromServer_UpdateTokenResponse struct {
	UpdateTokenResponse *UpdateTokenResponse `protobuf:"bytes,7,opt,name=update_token_response,json=updateTokenResponse,proto3,oneof"`
}

type StreamReadMessage_FromServer_StartPartitionSessionRequest struct {
	// Server commands.
	StartPartitionSessionRequest *StreamReadMessage_StartPartitionSessionRequest `protobuf:"bytes,8,opt,name=start_partition_session_request,json=startPartitionSessionRequest,proto3,oneof"`
}

type StreamReadMessage_FromServer_StopPartitionSessionRequest struct {
	StopPartitionSessionRequest *StreamReadMessage_StopPartitionSessionRequest `protobuf:"bytes,9,opt,name=stop_partition_session_request,json=stopPartitionSessionRequest,proto3,oneof"`
}

func (*StreamReadMessage_FromServer_InitResponse) isStreamReadMessage_FromServer_ServerMessage() {}

func (*StreamReadMessage_FromServer_ReadResponse) isStreamReadMessage_FromServer_ServerMessage() {}

func (*StreamReadMessage_FromServer_CommitOffsetResponse) isStreamReadMessage_FromServer_ServerMessage() {
}

func (*StreamReadMessage_FromServer_PartitionSessionStatusResponse) isStreamReadMessage_FromServer_ServerMessage() {
}

func (*StreamReadMessage_FromServer_UpdateTokenResponse) isStreamReadMessage_FromServer_ServerMessage() {
}

func (*StreamReadMessage_FromServer_StartPartitionSessionRequest) isStreamReadMessage_FromServer_ServerMessage() {
}

func (*StreamReadMessage_FromServer_StopPartitionSessionRequest) isStreamReadMessage_FromServer_ServerMessage() {
}

// Handshake request.
type StreamReadMessage_InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message that describes topic to read.
	// Topics that will be read by this session.
	TopicsReadSettings []*StreamReadMessage_InitRequest_TopicReadSettings `protobuf:"bytes,1,rep,name=topics_read_settings,json=topicsReadSettings,proto3" json:"topics_read_settings,omitempty"`
	// Path of consumer that is used for reading by this session.
	Consumer string `protobuf:"bytes,2,opt,name=consumer,proto3" json:"consumer,omitempty"`
}

func (x *StreamReadMessage_InitRequest) Reset() {
	*x = StreamReadMessage_InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_InitRequest) ProtoMessage() {}

func (x *StreamReadMessage_InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_InitRequest.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_InitRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 3}
}

func (x *StreamReadMessage_InitRequest) GetTopicsReadSettings() []*StreamReadMessage_InitRequest_TopicReadSettings {
	if x != nil {
		return x.TopicsReadSettings
	}
	return nil
}

func (x *StreamReadMessage_InitRequest) GetConsumer() string {
	if x != nil {
		return x.Consumer
	}
	return ""
}

// Handshake response.
type StreamReadMessage_InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read session identifier for debug purposes.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *StreamReadMessage_InitResponse) Reset() {
	*x = StreamReadMessage_InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_InitResponse) ProtoMessage() {}

func (x *StreamReadMessage_InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_InitResponse.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_InitResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 4}
}

func (x *StreamReadMessage_InitResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Message that represents client readiness for receiving more data.
type StreamReadMessage_ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server and client each keep track of total bytes size of all ReadResponses.
	// When client is ready to receive N more bytes in responses (to increment possible total by N),
	// it sends a ReadRequest with bytes_size = N.
	// bytes_size value must be positive.
	// So in expression 'A = (sum of bytes_size in all ReadRequests) - (sum of bytes_size in all ReadResponses)'
	//   server will keep A (available size for responses) non-negative.
	// But there is an exception. If server receives ReadRequest, and the first message in response exceeds A -
	// then it will still be delivered, and A will become negative until enough additional ReadRequests.
	//
	// Example:
	// 1) Let client have 200 bytes buffer. It sends ReadRequest with bytes_size = 200;
	// 2) Server may return one ReadResponse with bytes_size = 70 and than another 80 bytes response;
	//    now client buffer has 50 free bytes, server is free to send up to 50 bytes in responses.
	// 3) Client processes 100 bytes from buffer, now buffer free space is 150 bytes,
	//    so client sends ReadRequest with bytes_size = 100;
	// 4) Server is free to send up to 50 + 100 = 150 bytes. But the next read message is too big,
	//    and it sends 160 bytes ReadResponse.
	// 5) Let's assume client somehow processes it, and its 200 bytes buffer is free again.
	//    It shoud account for excess 10 bytes and send ReadRequest with bytes_size = 210.
	BytesSize int64 `protobuf:"varint,1,opt,name=bytes_size,json=bytesSize,proto3" json:"bytes_size,omitempty"`
}

func (x *StreamReadMessage_ReadRequest) Reset() {
	*x = StreamReadMessage_ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_ReadRequest) ProtoMessage() {}

func (x *StreamReadMessage_ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_ReadRequest.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_ReadRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 5}
}

func (x *StreamReadMessage_ReadRequest) GetBytesSize() int64 {
	if x != nil {
		return x.BytesSize
	}
	return 0
}

// Data read.
type StreamReadMessage_ReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client messages, divided by partitions.
	PartitionData []*StreamReadMessage_ReadResponse_PartitionData `protobuf:"bytes,1,rep,name=partition_data,json=partitionData,proto3" json:"partition_data,omitempty"`
	// Total size in bytes of this response as calculated by server.
	// See ReadRequest comment above.
	BytesSize int64 `protobuf:"varint,2,opt,name=bytes_size,json=bytesSize,proto3" json:"bytes_size,omitempty"`
}

func (x *StreamReadMessage_ReadResponse) Reset() {
	*x = StreamReadMessage_ReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_ReadResponse) ProtoMessage() {}

func (x *StreamReadMessage_ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_ReadResponse.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_ReadResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 6}
}

func (x *StreamReadMessage_ReadResponse) GetPartitionData() []*StreamReadMessage_ReadResponse_PartitionData {
	if x != nil {
		return x.PartitionData
	}
	return nil
}

func (x *StreamReadMessage_ReadResponse) GetBytesSize() int64 {
	if x != nil {
		return x.BytesSize
	}
	return 0
}

// Signal for server that client processed some read data.
type StreamReadMessage_CommitOffsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition offsets that indicates processed data.
	CommitOffsets []*StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset `protobuf:"bytes,1,rep,name=commit_offsets,json=commitOffsets,proto3" json:"commit_offsets,omitempty"`
}

func (x *StreamReadMessage_CommitOffsetRequest) Reset() {
	*x = StreamReadMessage_CommitOffsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_CommitOffsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_CommitOffsetRequest) ProtoMessage() {}

func (x *StreamReadMessage_CommitOffsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_CommitOffsetRequest.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_CommitOffsetRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 7}
}

func (x *StreamReadMessage_CommitOffsetRequest) GetCommitOffsets() []*StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset {
	if x != nil {
		return x.CommitOffsets
	}
	return nil
}

// Acknowledgement for commits.
type StreamReadMessage_CommitOffsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partitions with progress.
	PartitionsCommittedOffsets []*StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset `protobuf:"bytes,1,rep,name=partitions_committed_offsets,json=partitionsCommittedOffsets,proto3" json:"partitions_committed_offsets,omitempty"`
}

func (x *StreamReadMessage_CommitOffsetResponse) Reset() {
	*x = StreamReadMessage_CommitOffsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_CommitOffsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_CommitOffsetResponse) ProtoMessage() {}

func (x *StreamReadMessage_CommitOffsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_CommitOffsetResponse.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_CommitOffsetResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 8}
}

func (x *StreamReadMessage_CommitOffsetResponse) GetPartitionsCommittedOffsets() []*StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset {
	if x != nil {
		return x.PartitionsCommittedOffsets
	}
	return nil
}

type StreamReadMessage_PartitionSessionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
}

func (x *StreamReadMessage_PartitionSessionStatusRequest) Reset() {
	*x = StreamReadMessage_PartitionSessionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_PartitionSessionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_PartitionSessionStatusRequest) ProtoMessage() {}

func (x *StreamReadMessage_PartitionSessionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_PartitionSessionStatusRequest.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_PartitionSessionStatusRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 9}
}

func (x *StreamReadMessage_PartitionSessionStatusRequest) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

// Response for status request.
type StreamReadMessage_PartitionSessionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of partition session whose status was requested.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Partition contains messages with offsets in range [start, end).
	PartitionOffsets *OffsetsRange `protobuf:"bytes,2,opt,name=partition_offsets,json=partitionOffsets,proto3" json:"partition_offsets,omitempty"`
	// Each offset up to and including (committed_offset - 1) was fully processed.
	CommittedOffset int64 `protobuf:"varint,3,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
	// Write timestamp of next message written to this partition will be no less than write_time_high_watermark.
	WriteTimeHighWatermark *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=write_time_high_watermark,json=writeTimeHighWatermark,proto3" json:"write_time_high_watermark,omitempty"`
}

func (x *StreamReadMessage_PartitionSessionStatusResponse) Reset() {
	*x = StreamReadMessage_PartitionSessionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_PartitionSessionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_PartitionSessionStatusResponse) ProtoMessage() {}

func (x *StreamReadMessage_PartitionSessionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_PartitionSessionStatusResponse.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_PartitionSessionStatusResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 10}
}

func (x *StreamReadMessage_PartitionSessionStatusResponse) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamReadMessage_PartitionSessionStatusResponse) GetPartitionOffsets() *OffsetsRange {
	if x != nil {
		return x.PartitionOffsets
	}
	return nil
}

func (x *StreamReadMessage_PartitionSessionStatusResponse) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

func (x *StreamReadMessage_PartitionSessionStatusResponse) GetWriteTimeHighWatermark() *timestamppb.Timestamp {
	if x != nil {
		return x.WriteTimeHighWatermark
	}
	return nil
}

// Command from server to create and start a partition session.
// Client must respond with StartPartitionSessionResponse when ready to receive data from this partition.
type StreamReadMessage_StartPartitionSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition session description.
	PartitionSession *StreamReadMessage_PartitionSession `protobuf:"bytes,1,opt,name=partition_session,json=partitionSession,proto3" json:"partition_session,omitempty"`
	// Each offset up to and including (committed_offset - 1) was fully processed.
	CommittedOffset int64 `protobuf:"varint,2,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
	// Partition contains messages with offsets in range [start, end).
	PartitionOffsets *OffsetsRange `protobuf:"bytes,3,opt,name=partition_offsets,json=partitionOffsets,proto3" json:"partition_offsets,omitempty"`
}

func (x *StreamReadMessage_StartPartitionSessionRequest) Reset() {
	*x = StreamReadMessage_StartPartitionSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_StartPartitionSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_StartPartitionSessionRequest) ProtoMessage() {}

func (x *StreamReadMessage_StartPartitionSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_StartPartitionSessionRequest.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_StartPartitionSessionRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 11}
}

func (x *StreamReadMessage_StartPartitionSessionRequest) GetPartitionSession() *StreamReadMessage_PartitionSession {
	if x != nil {
		return x.PartitionSession
	}
	return nil
}

func (x *StreamReadMessage_StartPartitionSessionRequest) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

func (x *StreamReadMessage_StartPartitionSessionRequest) GetPartitionOffsets() *OffsetsRange {
	if x != nil {
		return x.PartitionOffsets
	}
	return nil
}

// Signal for server that cient is ready to recive data for partition.
type StreamReadMessage_StartPartitionSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition session identifier of partition to start read.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Reads in this partition session will start from offset no less than read_offset.
	// If read_offset is set, server will check that read_offset is no less that actual committed offset.
	// If check fails then server will send an error message (status != SUCCESS) and close stream.
	//
	// If read_offset is not set, no check will be made.
	// InitRequest.max_lag and InitRequest.read_from could lead to skip of more messages.
	// Server will return data starting from offset that is maximum of actual committed offset, read_offset (if set)
	// and offsets calculated from InitRequest.max_lag and InitRequest.read_from.
	ReadOffset *int64 `protobuf:"varint,2,opt,name=read_offset,json=readOffset,proto3,oneof" json:"read_offset,omitempty"`
	// All messages with offset less than commit_offset are processed by client.
	// Server will commit this position if this is not done yet.
	CommitOffset *int64 `protobuf:"varint,3,opt,name=commit_offset,json=commitOffset,proto3,oneof" json:"commit_offset,omitempty"`
}

func (x *StreamReadMessage_StartPartitionSessionResponse) Reset() {
	*x = StreamReadMessage_StartPartitionSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_StartPartitionSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_StartPartitionSessionResponse) ProtoMessage() {}

func (x *StreamReadMessage_StartPartitionSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_StartPartitionSessionResponse.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_StartPartitionSessionResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 12}
}

func (x *StreamReadMessage_StartPartitionSessionResponse) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamReadMessage_StartPartitionSessionResponse) GetReadOffset() int64 {
	if x != nil && x.ReadOffset != nil {
		return *x.ReadOffset
	}
	return 0
}

func (x *StreamReadMessage_StartPartitionSessionResponse) GetCommitOffset() int64 {
	if x != nil && x.CommitOffset != nil {
		return *x.CommitOffset
	}
	return 0
}

// Command from server to stop and destroy concrete partition session.
type StreamReadMessage_StopPartitionSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of partition session that is ready to be closed by server.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Flag of graceful stop.
	// If set, server will wait for response from client before giving this partition to other read session.
	// Server will not send more data from this partition.
	// Client can process all received data and wait for commit and only after send response.
	// If False then server gives partition for other session right now.
	// All further commits for this partition session has no effect. Server is not waiting for response.
	Graceful bool `protobuf:"varint,2,opt,name=graceful,proto3" json:"graceful,omitempty"`
	// Upper bound for committed offsets.
	CommittedOffset int64 `protobuf:"varint,3,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
}

func (x *StreamReadMessage_StopPartitionSessionRequest) Reset() {
	*x = StreamReadMessage_StopPartitionSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_StopPartitionSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_StopPartitionSessionRequest) ProtoMessage() {}

func (x *StreamReadMessage_StopPartitionSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_StopPartitionSessionRequest.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_StopPartitionSessionRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 13}
}

func (x *StreamReadMessage_StopPartitionSessionRequest) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamReadMessage_StopPartitionSessionRequest) GetGraceful() bool {
	if x != nil {
		return x.Graceful
	}
	return false
}

func (x *StreamReadMessage_StopPartitionSessionRequest) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

// Signal for server that client finished working with this partition.
// Must be sent only after corresponding StopPartitionSessionRequest from server.
// Server will give this partition to other read session only after StopPartitionSessionResponse signal.
type StreamReadMessage_StopPartitionSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition session identifier of partition session that is released by client.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
}

func (x *StreamReadMessage_StopPartitionSessionResponse) Reset() {
	*x = StreamReadMessage_StopPartitionSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_StopPartitionSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_StopPartitionSessionResponse) ProtoMessage() {}

func (x *StreamReadMessage_StopPartitionSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_StopPartitionSessionResponse.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_StopPartitionSessionResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 14}
}

func (x *StreamReadMessage_StopPartitionSessionResponse) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

type StreamReadMessage_InitRequest_TopicReadSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topic path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Partitions that will be read by this session.
	// If list is empty - then session will read all partitions.
	PartitionIds []int64 `protobuf:"varint,2,rep,packed,name=partition_ids,json=partitionIds,proto3" json:"partition_ids,omitempty"`
	// Skip all messages that has write timestamp smaller than now - max_lag.
	// Zero means infinite lag.
	MaxLag *durationpb.Duration `protobuf:"bytes,3,opt,name=max_lag,json=maxLag,proto3" json:"max_lag,omitempty"`
	// Read data only after this timestamp from this topic.
	// Read only messages with 'written_at' value greater or equal than this timestamp.
	ReadFrom *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=read_from,json=readFrom,proto3" json:"read_from,omitempty"`
}

func (x *StreamReadMessage_InitRequest_TopicReadSettings) Reset() {
	*x = StreamReadMessage_InitRequest_TopicReadSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_InitRequest_TopicReadSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_InitRequest_TopicReadSettings) ProtoMessage() {}

func (x *StreamReadMessage_InitRequest_TopicReadSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_InitRequest_TopicReadSettings.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_InitRequest_TopicReadSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 3, 0}
}

func (x *StreamReadMessage_InitRequest_TopicReadSettings) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *StreamReadMessage_InitRequest_TopicReadSettings) GetPartitionIds() []int64 {
	if x != nil {
		return x.PartitionIds
	}
	return nil
}

func (x *StreamReadMessage_InitRequest_TopicReadSettings) GetMaxLag() *durationpb.Duration {
	if x != nil {
		return x.MaxLag
	}
	return nil
}

func (x *StreamReadMessage_InitRequest_TopicReadSettings) GetReadFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.ReadFrom
	}
	return nil
}

// One client message representation.
type StreamReadMessage_ReadResponse_MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition offset in partition that assigned for message.
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"` //unique value for clientside deduplication - Topic:Partition:Offset
	// Sequence number that provided with message on write from client.
	SeqNo int64 `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	// Timestamp of creation of message provided on write from client.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Compressed client message body.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Uncompressed size of client message body.
	UncompressedSize int64 `protobuf:"varint,6,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressed_size,omitempty"`
	// Filled if message_group_id was set on message write.
	MessageGroupId string `protobuf:"bytes,7,opt,name=message_group_id,json=messageGroupId,proto3" json:"message_group_id,omitempty"`
}

func (x *StreamReadMessage_ReadResponse_MessageData) Reset() {
	*x = StreamReadMessage_ReadResponse_MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_ReadResponse_MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_ReadResponse_MessageData) ProtoMessage() {}

func (x *StreamReadMessage_ReadResponse_MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_ReadResponse_MessageData.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_ReadResponse_MessageData) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 6, 0}
}

func (x *StreamReadMessage_ReadResponse_MessageData) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *StreamReadMessage_ReadResponse_MessageData) GetSeqNo() int64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *StreamReadMessage_ReadResponse_MessageData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *StreamReadMessage_ReadResponse_MessageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamReadMessage_ReadResponse_MessageData) GetUncompressedSize() int64 {
	if x != nil {
		return x.UncompressedSize
	}
	return 0
}

func (x *StreamReadMessage_ReadResponse_MessageData) GetMessageGroupId() string {
	if x != nil {
		return x.MessageGroupId
	}
	return ""
}

// Representation of sequence of client messages from one write session.
type StreamReadMessage_ReadResponse_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of client messages.
	MessageData []*StreamReadMessage_ReadResponse_MessageData `protobuf:"bytes,1,rep,name=message_data,json=messageData,proto3" json:"message_data,omitempty"`
	// Producer identifier provided by client for this batch of client messages.
	ProducerId string `protobuf:"bytes,2,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"`
	// Client metadata attached to write session, the same for all messages in batch.
	WriteSessionMeta map[string]string `protobuf:"bytes,3,rep,name=write_session_meta,json=writeSessionMeta,proto3" json:"write_session_meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Codec that is used for data compression.
	// See enum Codec above for values.
	Codec int32 `protobuf:"varint,4,opt,name=codec,proto3" json:"codec,omitempty"`
	// Persist timestamp on server for batch.
	WrittenAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=written_at,json=writtenAt,proto3" json:"written_at,omitempty"`
}

func (x *StreamReadMessage_ReadResponse_Batch) Reset() {
	*x = StreamReadMessage_ReadResponse_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_ReadResponse_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_ReadResponse_Batch) ProtoMessage() {}

func (x *StreamReadMessage_ReadResponse_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_ReadResponse_Batch.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_ReadResponse_Batch) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 6, 1}
}

func (x *StreamReadMessage_ReadResponse_Batch) GetMessageData() []*StreamReadMessage_ReadResponse_MessageData {
	if x != nil {
		return x.MessageData
	}
	return nil
}

func (x *StreamReadMessage_ReadResponse_Batch) GetProducerId() string {
	if x != nil {
		return x.ProducerId
	}
	return ""
}

func (x *StreamReadMessage_ReadResponse_Batch) GetWriteSessionMeta() map[string]string {
	if x != nil {
		return x.WriteSessionMeta
	}
	return nil
}

func (x *StreamReadMessage_ReadResponse_Batch) GetCodec() int32 {
	if x != nil {
		return x.Codec
	}
	return 0
}

func (x *StreamReadMessage_ReadResponse_Batch) GetWrittenAt() *timestamppb.Timestamp {
	if x != nil {
		return x.WrittenAt
	}
	return nil
}

// Representation of sequence of messages from one partition.
type StreamReadMessage_ReadResponse_PartitionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Client messages, divided by write sessions.
	Batches []*StreamReadMessage_ReadResponse_Batch `protobuf:"bytes,2,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (x *StreamReadMessage_ReadResponse_PartitionData) Reset() {
	*x = StreamReadMessage_ReadResponse_PartitionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_ReadResponse_PartitionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_ReadResponse_PartitionData) ProtoMessage() {}

func (x *StreamReadMessage_ReadResponse_PartitionData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_ReadResponse_PartitionData.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_ReadResponse_PartitionData) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 6, 2}
}

func (x *StreamReadMessage_ReadResponse_PartitionData) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamReadMessage_ReadResponse_PartitionData) GetBatches() []*StreamReadMessage_ReadResponse_Batch {
	if x != nil {
		return x.Batches
	}
	return nil
}

// Message that is used for describing commit.
type StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of partition session with data to commit.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Processed offsets ranges, repeated in case of disjoint ranges.
	Offsets []*OffsetsRange `protobuf:"bytes,2,rep,name=offsets,proto3" json:"offsets,omitempty"`
}

func (x *StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset) Reset() {
	*x = StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset) ProtoMessage() {}

func (x *StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 7, 0}
}

func (x *StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset) GetOffsets() []*OffsetsRange {
	if x != nil {
		return x.Offsets
	}
	return nil
}

// Per-partition commit representation.
type StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition session identifier.
	PartitionSessionId int64 `protobuf:"varint,1,opt,name=partition_session_id,json=partitionSessionId,proto3" json:"partition_session_id,omitempty"`
	// Upper bound for committed offsets.
	CommittedOffset int64 `protobuf:"varint,2,opt,name=committed_offset,json=committedOffset,proto3" json:"committed_offset,omitempty"`
}

func (x *StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset) Reset() {
	*x = StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset) ProtoMessage() {}

func (x *StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset.ProtoReflect.Descriptor instead.
func (*StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{5, 8, 0}
}

func (x *StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset) GetPartitionSessionId() int64 {
	if x != nil {
		return x.PartitionSessionId
	}
	return 0
}

func (x *StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset) GetCommittedOffset() int64 {
	if x != nil {
		return x.CommittedOffset
	}
	return 0
}

type DescribeTopicResult_PartitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition identifier.
	PartitionId int64 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Is partition open for write.
	Active bool `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	// Ids of partitions which was formed when this partition was split or merged.
	ChildPartitionIds []int64 `protobuf:"varint,3,rep,packed,name=child_partition_ids,json=childPartitionIds,proto3" json:"child_partition_ids,omitempty"`
	// Ids of partitions from which this partition was formed by split or merge.
	ParentPartitionIds []int64 `protobuf:"varint,4,rep,packed,name=parent_partition_ids,json=parentPartitionIds,proto3" json:"parent_partition_ids,omitempty"`
}

func (x *DescribeTopicResult_PartitionInfo) Reset() {
	*x = DescribeTopicResult_PartitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_topic_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTopicResult_PartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTopicResult_PartitionInfo) ProtoMessage() {}

func (x *DescribeTopicResult_PartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_topic_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTopicResult_PartitionInfo.ProtoReflect.Descriptor instead.
func (*DescribeTopicResult_PartitionInfo) Descriptor() ([]byte, []int) {
	return file_protos_ydb_topic_proto_rawDescGZIP(), []int{15, 1}
}

func (x *DescribeTopicResult_PartitionInfo) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *DescribeTopicResult_PartitionInfo) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *DescribeTopicResult_PartitionInfo) GetChildPartitionIds() []int64 {
	if x != nil {
		return x.ChildPartitionIds
	}
	return nil
}

func (x *DescribeTopicResult_PartitionInfo) GetParentPartitionIds() []int64 {
	if x != nil {
		return x.ParentPartitionIds
	}
	return nil
}

var File_protos_ydb_topic_proto protoreflect.FileDescriptor

var file_protos_ydb_topic_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x79, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x79, 0x64, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a,
	0x0f, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73,
	0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x14, 0xb2, 0xe6, 0x2a, 0x0a, 0x5b, 0x31, 0x3b, 0x20, 0x31, 0x39, 0x39, 0x39, 0x39, 0x5d,
	0x9a, 0xe6, 0x2a, 0x02, 0x18, 0x64, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x22, 0x36,
	0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x2a, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x15, 0x0a, 0x12, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x94, 0x02, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x4e, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x51, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x81, 0x03, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xfe, 0x02, 0x0a, 0x0b,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x6d, 0x0a, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x1a, 0x43, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0xb7, 0x01, 0x0a,
	0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x73, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x1a, 0xfc, 0x02, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x1a, 0x81, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0xae, 0x08, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x52, 0x04, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xb7, 0x03, 0x0a,
	0x08, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f,
	0x12, 0x58, 0x0a, 0x07, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x58, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63,
	0x6b, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x1a, 0x21, 0x0a, 0x07, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0xa4, 0x01, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x3c, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x01, 0x42, 0x16,
	0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x8d, 0x03, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x15, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x57, 0x61,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x96, 0x25, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x7b, 0x0a, 0x10,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x8c, 0x06, 0x0a, 0x0a, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x85,
	0x01, 0x0a, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x82, 0x01, 0x0a, 0x1f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xf8, 0x06, 0x0a, 0x0a, 0x46, 0x72, 0x6f,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x69, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x21, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x1c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x7f, 0x0a, 0x1e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0xd3, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x14, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x1a, 0xb9, 0x01,
	0x0a, 0x11, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x67,
	0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x1a, 0x2d, 0x0a, 0x0c, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x2c, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x91, 0x07, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xe2, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x1a, 0x8d, 0x03, 0x0a, 0x05,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x58, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x73, 0x0a, 0x12, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x0a, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x77, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x41, 0x74, 0x1a, 0x43, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8c, 0x01, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x49, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x82, 0x02, 0x0a, 0x13, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x6d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x73, 0x1a, 0x7c, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x07,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x1a,
	0x9e, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x1c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x1a, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x77, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x1a, 0x51, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x1a, 0x9a, 0x02, 0x0a, 0x1e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x19, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x1a, 0xeb, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x1a, 0xc3,
	0x01, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x1a, 0x96, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x50, 0x0a,
	0x1c, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xc6, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x37,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x52, 0x0f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x43,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x91, 0x03, 0x0a, 0x0d, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x73, 0x52, 0x12, 0x73, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x1a, 0x42, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x92, 0x01, 0x0a,
	0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x13,
	0x6d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x13, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xeb, 0x01, 0x0a, 0x19, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x48, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x48, 0x00, 0x52, 0x16,
	0x73, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x19, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6,
	0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x48, 0x01, 0x52, 0x16, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x89, 0x06, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x54, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x10,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52, 0x12, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x62, 0x12, 0x45,
	0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x73, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x5b, 0x0a, 0x26, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x52,
	0x21, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x47, 0x0a, 0x1b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20,
	0x30, 0x52, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x42, 0x07, 0x9a, 0xe6, 0x2a, 0x03, 0x18, 0xb8, 0x17, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x4e, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x76, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x50, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x07, 0x0a, 0x13, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x54, 0x0a, 0x15, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a,
	0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4d, 0x62, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x52, 0x0f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x12, 0x51, 0x0a, 0x26,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xac, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xd1, 0x08, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x64, 0x0a, 0x1b, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x19, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x46,
	0x0a, 0x18, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x4d, 0x62, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x73,
	0x52, 0x12, 0x73, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x73, 0x12, 0x67, 0x0a, 0x2a, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d,
	0x20, 0x30, 0x48, 0x01, 0x52, 0x24, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a,
	0x1f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xb2, 0xe6, 0x2a, 0x04, 0x3e, 0x3d, 0x20, 0x30,
	0x48, 0x02, 0x52, 0x1b, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x5c, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x42, 0x07, 0x9a, 0xe6,
	0x2a, 0x03, 0x18, 0xb8, 0x17, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x07, 0x9a, 0xe6, 0x2a,
	0x03, 0x18, 0xb8, 0x17, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x42, 0x07, 0x9a, 0xe6, 0x2a, 0x03, 0x18, 0xb8, 0x17, 0x52,
	0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x1a,
	0x42, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x62,
	0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42,
	0x22, 0x0a, 0x20, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x4d, 0x0a, 0x12, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x72, 0x0a, 0x10,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x4c, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x11,
	0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2a, 0x83, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4f, 0x44, 0x45, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x52, 0x41, 0x57, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x4c, 0x5a, 0x4f, 0x50, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x5a, 0x53, 0x54, 0x44, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x10, 0x90, 0x4e, 0x22, 0x05, 0x08, 0x05, 0x10, 0x8f, 0x4e, 0x22, 0x0a, 0x08, 0xa0, 0x9c,
	0x01, 0x10, 0xff, 0xff, 0xff, 0xff, 0x07, 0x42, 0x4d, 0x0a, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x2e,
	0x79, 0x64, 0x62, 0x2e, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x59, 0x64, 0x62, 0x5f, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_ydb_topic_proto_rawDescOnce sync.Once
	file_protos_ydb_topic_proto_rawDescData = file_protos_ydb_topic_proto_rawDesc
)

func file_protos_ydb_topic_proto_rawDescGZIP() []byte {
	file_protos_ydb_topic_proto_rawDescOnce.Do(func() {
		file_protos_ydb_topic_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_ydb_topic_proto_rawDescData)
	})
	return file_protos_ydb_topic_proto_rawDescData
}

var file_protos_ydb_topic_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_ydb_topic_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_protos_ydb_topic_proto_goTypes = []interface{}{
	(Codec)(0), // 0: Ydb.Topic.Codec
	(StreamWriteMessage_WriteResponse_WriteAck_Skipped_Reason)(0), // 1: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck.Skipped.Reason
	(*SupportedCodecs)(nil),                                   // 2: Ydb.Topic.SupportedCodecs
	(*OffsetsRange)(nil),                                      // 3: Ydb.Topic.OffsetsRange
	(*UpdateTokenRequest)(nil),                                // 4: Ydb.Topic.UpdateTokenRequest
	(*UpdateTokenResponse)(nil),                               // 5: Ydb.Topic.UpdateTokenResponse
	(*StreamWriteMessage)(nil),                                // 6: Ydb.Topic.StreamWriteMessage
	(*StreamReadMessage)(nil),                                 // 7: Ydb.Topic.StreamReadMessage
	(*Consumer)(nil),                                          // 8: Ydb.Topic.Consumer
	(*AlterConsumer)(nil),                                     // 9: Ydb.Topic.AlterConsumer
	(*PartitioningSettings)(nil),                              // 10: Ydb.Topic.PartitioningSettings
	(*AlterPartitioningSettings)(nil),                         // 11: Ydb.Topic.AlterPartitioningSettings
	(*CreateTopicRequest)(nil),                                // 12: Ydb.Topic.CreateTopicRequest
	(*CreateTopicResponse)(nil),                               // 13: Ydb.Topic.CreateTopicResponse
	(*CreateTopicResult)(nil),                                 // 14: Ydb.Topic.CreateTopicResult
	(*DescribeTopicRequest)(nil),                              // 15: Ydb.Topic.DescribeTopicRequest
	(*DescribeTopicResponse)(nil),                             // 16: Ydb.Topic.DescribeTopicResponse
	(*DescribeTopicResult)(nil),                               // 17: Ydb.Topic.DescribeTopicResult
	(*AlterTopicRequest)(nil),                                 // 18: Ydb.Topic.AlterTopicRequest
	(*AlterTopicResponse)(nil),                                // 19: Ydb.Topic.AlterTopicResponse
	(*AlterTopicResult)(nil),                                  // 20: Ydb.Topic.AlterTopicResult
	(*DropTopicRequest)(nil),                                  // 21: Ydb.Topic.DropTopicRequest
	(*DropTopicResponse)(nil),                                 // 22: Ydb.Topic.DropTopicResponse
	(*DropTopicResult)(nil),                                   // 23: Ydb.Topic.DropTopicResult
	(*StreamWriteMessage_FromClient)(nil),                     // 24: Ydb.Topic.StreamWriteMessage.FromClient
	(*StreamWriteMessage_FromServer)(nil),                     // 25: Ydb.Topic.StreamWriteMessage.FromServer
	(*StreamWriteMessage_InitRequest)(nil),                    // 26: Ydb.Topic.StreamWriteMessage.InitRequest
	(*StreamWriteMessage_InitResponse)(nil),                   // 27: Ydb.Topic.StreamWriteMessage.InitResponse
	(*StreamWriteMessage_WriteRequest)(nil),                   // 28: Ydb.Topic.StreamWriteMessage.WriteRequest
	(*StreamWriteMessage_WriteResponse)(nil),                  // 29: Ydb.Topic.StreamWriteMessage.WriteResponse
	nil,                                                       // 30: Ydb.Topic.StreamWriteMessage.InitRequest.WriteSessionMetaEntry
	(*StreamWriteMessage_WriteRequest_MessageData)(nil),       // 31: Ydb.Topic.StreamWriteMessage.WriteRequest.MessageData
	(*StreamWriteMessage_WriteResponse_WriteAck)(nil),         // 32: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck
	(*StreamWriteMessage_WriteResponse_WriteStatistics)(nil),  // 33: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteStatistics
	(*StreamWriteMessage_WriteResponse_WriteAck_Written)(nil), // 34: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck.Written
	(*StreamWriteMessage_WriteResponse_WriteAck_Skipped)(nil), // 35: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck.Skipped
	(*StreamReadMessage_PartitionSession)(nil),                // 36: Ydb.Topic.StreamReadMessage.PartitionSession
	(*StreamReadMessage_FromClient)(nil),                      // 37: Ydb.Topic.StreamReadMessage.FromClient
	(*StreamReadMessage_FromServer)(nil),                      // 38: Ydb.Topic.StreamReadMessage.FromServer
	(*StreamReadMessage_InitRequest)(nil),                     // 39: Ydb.Topic.StreamReadMessage.InitRequest
	(*StreamReadMessage_InitResponse)(nil),                    // 40: Ydb.Topic.StreamReadMessage.InitResponse
	(*StreamReadMessage_ReadRequest)(nil),                     // 41: Ydb.Topic.StreamReadMessage.ReadRequest
	(*StreamReadMessage_ReadResponse)(nil),                    // 42: Ydb.Topic.StreamReadMessage.ReadResponse
	(*StreamReadMessage_CommitOffsetRequest)(nil),             // 43: Ydb.Topic.StreamReadMessage.CommitOffsetRequest
	(*StreamReadMessage_CommitOffsetResponse)(nil),            // 44: Ydb.Topic.StreamReadMessage.CommitOffsetResponse
	(*StreamReadMessage_PartitionSessionStatusRequest)(nil),   // 45: Ydb.Topic.StreamReadMessage.PartitionSessionStatusRequest
	(*StreamReadMessage_PartitionSessionStatusResponse)(nil),  // 46: Ydb.Topic.StreamReadMessage.PartitionSessionStatusResponse
	(*StreamReadMessage_StartPartitionSessionRequest)(nil),    // 47: Ydb.Topic.StreamReadMessage.StartPartitionSessionRequest
	(*StreamReadMessage_StartPartitionSessionResponse)(nil),   // 48: Ydb.Topic.StreamReadMessage.StartPartitionSessionResponse
	(*StreamReadMessage_StopPartitionSessionRequest)(nil),     // 49: Ydb.Topic.StreamReadMessage.StopPartitionSessionRequest
	(*StreamReadMessage_StopPartitionSessionResponse)(nil),    // 50: Ydb.Topic.StreamReadMessage.StopPartitionSessionResponse
	(*StreamReadMessage_InitRequest_TopicReadSettings)(nil),   // 51: Ydb.Topic.StreamReadMessage.InitRequest.TopicReadSettings
	(*StreamReadMessage_ReadResponse_MessageData)(nil),        // 52: Ydb.Topic.StreamReadMessage.ReadResponse.MessageData
	(*StreamReadMessage_ReadResponse_Batch)(nil),              // 53: Ydb.Topic.StreamReadMessage.ReadResponse.Batch
	(*StreamReadMessage_ReadResponse_PartitionData)(nil),      // 54: Ydb.Topic.StreamReadMessage.ReadResponse.PartitionData
	nil, // 55: Ydb.Topic.StreamReadMessage.ReadResponse.Batch.WriteSessionMetaEntry
	(*StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset)(nil),     // 56: Ydb.Topic.StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset
	(*StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset)(nil), // 57: Ydb.Topic.StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset
	nil, // 58: Ydb.Topic.Consumer.AttributesEntry
	nil, // 59: Ydb.Topic.AlterConsumer.AlterAttributesEntry
	nil, // 60: Ydb.Topic.CreateTopicRequest.AttributesEntry
	nil, // 61: Ydb.Topic.DescribeTopicResult.AttributesEntry
	(*DescribeTopicResult_PartitionInfo)(nil), // 62: Ydb.Topic.DescribeTopicResult.PartitionInfo
	nil,                                    // 63: Ydb.Topic.AlterTopicRequest.AlterAttributesEntry
	(*timestamppb.Timestamp)(nil),          // 64: google.protobuf.Timestamp
	(*Ydb_Operations.OperationParams)(nil), // 65: Ydb.Operations.OperationParams
	(*durationpb.Duration)(nil),            // 66: google.protobuf.Duration
	(*Ydb_Operations.Operation)(nil),       // 67: Ydb.Operations.Operation
	(*Ydb_Scheme.Entry)(nil),               // 68: Ydb.Scheme.Entry
	(Ydb.StatusIds_StatusCode)(0),          // 69: Ydb.StatusIds.StatusCode
	(*Ydb_Issue.IssueMessage)(nil),         // 70: Ydb.Issue.IssueMessage
}
var file_protos_ydb_topic_proto_depIdxs = []int32{
	64, // 0: Ydb.Topic.Consumer.read_from:type_name -> google.protobuf.Timestamp
	2,  // 1: Ydb.Topic.Consumer.supported_codecs:type_name -> Ydb.Topic.SupportedCodecs
	58, // 2: Ydb.Topic.Consumer.attributes:type_name -> Ydb.Topic.Consumer.AttributesEntry
	64, // 3: Ydb.Topic.AlterConsumer.set_read_from:type_name -> google.protobuf.Timestamp
	2,  // 4: Ydb.Topic.AlterConsumer.set_supported_codecs:type_name -> Ydb.Topic.SupportedCodecs
	59, // 5: Ydb.Topic.AlterConsumer.alter_attributes:type_name -> Ydb.Topic.AlterConsumer.AlterAttributesEntry
	65, // 6: Ydb.Topic.CreateTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	10, // 7: Ydb.Topic.CreateTopicRequest.partitioning_settings:type_name -> Ydb.Topic.PartitioningSettings
	66, // 8: Ydb.Topic.CreateTopicRequest.retention_period:type_name -> google.protobuf.Duration
	2,  // 9: Ydb.Topic.CreateTopicRequest.supported_codecs:type_name -> Ydb.Topic.SupportedCodecs
	60, // 10: Ydb.Topic.CreateTopicRequest.attributes:type_name -> Ydb.Topic.CreateTopicRequest.AttributesEntry
	8,  // 11: Ydb.Topic.CreateTopicRequest.consumers:type_name -> Ydb.Topic.Consumer
	67, // 12: Ydb.Topic.CreateTopicResponse.operation:type_name -> Ydb.Operations.Operation
	65, // 13: Ydb.Topic.DescribeTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	67, // 14: Ydb.Topic.DescribeTopicResponse.operation:type_name -> Ydb.Operations.Operation
	68, // 15: Ydb.Topic.DescribeTopicResult.self:type_name -> Ydb.Scheme.Entry
	10, // 16: Ydb.Topic.DescribeTopicResult.partitioning_settings:type_name -> Ydb.Topic.PartitioningSettings
	62, // 17: Ydb.Topic.DescribeTopicResult.partitions:type_name -> Ydb.Topic.DescribeTopicResult.PartitionInfo
	66, // 18: Ydb.Topic.DescribeTopicResult.retention_period:type_name -> google.protobuf.Duration
	2,  // 19: Ydb.Topic.DescribeTopicResult.supported_codecs:type_name -> Ydb.Topic.SupportedCodecs
	61, // 20: Ydb.Topic.DescribeTopicResult.attributes:type_name -> Ydb.Topic.DescribeTopicResult.AttributesEntry
	8,  // 21: Ydb.Topic.DescribeTopicResult.consumers:type_name -> Ydb.Topic.Consumer
	65, // 22: Ydb.Topic.AlterTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	11, // 23: Ydb.Topic.AlterTopicRequest.alter_partitioning_settings:type_name -> Ydb.Topic.AlterPartitioningSettings
	66, // 24: Ydb.Topic.AlterTopicRequest.set_retention_period:type_name -> google.protobuf.Duration
	2,  // 25: Ydb.Topic.AlterTopicRequest.set_supported_codecs:type_name -> Ydb.Topic.SupportedCodecs
	63, // 26: Ydb.Topic.AlterTopicRequest.alter_attributes:type_name -> Ydb.Topic.AlterTopicRequest.AlterAttributesEntry
	8,  // 27: Ydb.Topic.AlterTopicRequest.add_consumers:type_name -> Ydb.Topic.Consumer
	9,  // 28: Ydb.Topic.AlterTopicRequest.alter_consumers:type_name -> Ydb.Topic.AlterConsumer
	67, // 29: Ydb.Topic.AlterTopicResponse.operation:type_name -> Ydb.Operations.Operation
	65, // 30: Ydb.Topic.DropTopicRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	67, // 31: Ydb.Topic.DropTopicResponse.operation:type_name -> Ydb.Operations.Operation
	26, // 32: Ydb.Topic.StreamWriteMessage.FromClient.init_request:type_name -> Ydb.Topic.StreamWriteMessage.InitRequest
	28, // 33: Ydb.Topic.StreamWriteMessage.FromClient.write_request:type_name -> Ydb.Topic.StreamWriteMessage.WriteRequest
	4,  // 34: Ydb.Topic.StreamWriteMessage.FromClient.update_token_request:type_name -> Ydb.Topic.UpdateTokenRequest
	69, // 35: Ydb.Topic.StreamWriteMessage.FromServer.status:type_name -> Ydb.StatusIds.StatusCode
	70, // 36: Ydb.Topic.StreamWriteMessage.FromServer.issues:type_name -> Ydb.Issue.IssueMessage
	27, // 37: Ydb.Topic.StreamWriteMessage.FromServer.init_response:type_name -> Ydb.Topic.StreamWriteMessage.InitResponse
	29, // 38: Ydb.Topic.StreamWriteMessage.FromServer.write_response:type_name -> Ydb.Topic.StreamWriteMessage.WriteResponse
	5,  // 39: Ydb.Topic.StreamWriteMessage.FromServer.update_token_response:type_name -> Ydb.Topic.UpdateTokenResponse
	30, // 40: Ydb.Topic.StreamWriteMessage.InitRequest.write_session_meta:type_name -> Ydb.Topic.StreamWriteMessage.InitRequest.WriteSessionMetaEntry
	2,  // 41: Ydb.Topic.StreamWriteMessage.InitResponse.supported_codecs:type_name -> Ydb.Topic.SupportedCodecs
	31, // 42: Ydb.Topic.StreamWriteMessage.WriteRequest.messages:type_name -> Ydb.Topic.StreamWriteMessage.WriteRequest.MessageData
	32, // 43: Ydb.Topic.StreamWriteMessage.WriteResponse.acks:type_name -> Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck
	33, // 44: Ydb.Topic.StreamWriteMessage.WriteResponse.write_statistics:type_name -> Ydb.Topic.StreamWriteMessage.WriteResponse.WriteStatistics
	64, // 45: Ydb.Topic.StreamWriteMessage.WriteRequest.MessageData.created_at:type_name -> google.protobuf.Timestamp
	34, // 46: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck.written:type_name -> Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck.Written
	35, // 47: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck.skipped:type_name -> Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck.Skipped
	66, // 48: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteStatistics.persisting_time:type_name -> google.protobuf.Duration
	66, // 49: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteStatistics.min_queue_wait_time:type_name -> google.protobuf.Duration
	66, // 50: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteStatistics.max_queue_wait_time:type_name -> google.protobuf.Duration
	66, // 51: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteStatistics.partition_quota_wait_time:type_name -> google.protobuf.Duration
	66, // 52: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteStatistics.topic_quota_wait_time:type_name -> google.protobuf.Duration
	1,  // 53: Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck.Skipped.reason:type_name -> Ydb.Topic.StreamWriteMessage.WriteResponse.WriteAck.Skipped.Reason
	39, // 54: Ydb.Topic.StreamReadMessage.FromClient.init_request:type_name -> Ydb.Topic.StreamReadMessage.InitRequest
	41, // 55: Ydb.Topic.StreamReadMessage.FromClient.read_request:type_name -> Ydb.Topic.StreamReadMessage.ReadRequest
	43, // 56: Ydb.Topic.StreamReadMessage.FromClient.commit_offset_request:type_name -> Ydb.Topic.StreamReadMessage.CommitOffsetRequest
	45, // 57: Ydb.Topic.StreamReadMessage.FromClient.partition_session_status_request:type_name -> Ydb.Topic.StreamReadMessage.PartitionSessionStatusRequest
	4,  // 58: Ydb.Topic.StreamReadMessage.FromClient.update_token_request:type_name -> Ydb.Topic.UpdateTokenRequest
	48, // 59: Ydb.Topic.StreamReadMessage.FromClient.start_partition_session_response:type_name -> Ydb.Topic.StreamReadMessage.StartPartitionSessionResponse
	50, // 60: Ydb.Topic.StreamReadMessage.FromClient.stop_partition_session_response:type_name -> Ydb.Topic.StreamReadMessage.StopPartitionSessionResponse
	69, // 61: Ydb.Topic.StreamReadMessage.FromServer.status:type_name -> Ydb.StatusIds.StatusCode
	70, // 62: Ydb.Topic.StreamReadMessage.FromServer.issues:type_name -> Ydb.Issue.IssueMessage
	40, // 63: Ydb.Topic.StreamReadMessage.FromServer.init_response:type_name -> Ydb.Topic.StreamReadMessage.InitResponse
	42, // 64: Ydb.Topic.StreamReadMessage.FromServer.read_response:type_name -> Ydb.Topic.StreamReadMessage.ReadResponse
	44, // 65: Ydb.Topic.StreamReadMessage.FromServer.commit_offset_response:type_name -> Ydb.Topic.StreamReadMessage.CommitOffsetResponse
	46, // 66: Ydb.Topic.StreamReadMessage.FromServer.partition_session_status_response:type_name -> Ydb.Topic.StreamReadMessage.PartitionSessionStatusResponse
	5,  // 67: Ydb.Topic.StreamReadMessage.FromServer.update_token_response:type_name -> Ydb.Topic.UpdateTokenResponse
	47, // 68: Ydb.Topic.StreamReadMessage.FromServer.start_partition_session_request:type_name -> Ydb.Topic.StreamReadMessage.StartPartitionSessionRequest
	49, // 69: Ydb.Topic.StreamReadMessage.FromServer.stop_partition_session_request:type_name -> Ydb.Topic.StreamReadMessage.StopPartitionSessionRequest
	51, // 70: Ydb.Topic.StreamReadMessage.InitRequest.topics_read_settings:type_name -> Ydb.Topic.StreamReadMessage.InitRequest.TopicReadSettings
	54, // 71: Ydb.Topic.StreamReadMessage.ReadResponse.partition_data:type_name -> Ydb.Topic.StreamReadMessage.ReadResponse.PartitionData
	56, // 72: Ydb.Topic.StreamReadMessage.CommitOffsetRequest.commit_offsets:type_name -> Ydb.Topic.StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset
	57, // 73: Ydb.Topic.StreamReadMessage.CommitOffsetResponse.partitions_committed_offsets:type_name -> Ydb.Topic.StreamReadMessage.CommitOffsetResponse.PartitionCommittedOffset
	3,  // 74: Ydb.Topic.StreamReadMessage.PartitionSessionStatusResponse.partition_offsets:type_name -> Ydb.Topic.OffsetsRange
	64, // 75: Ydb.Topic.StreamReadMessage.PartitionSessionStatusResponse.write_time_high_watermark:type_name -> google.protobuf.Timestamp
	36, // 76: Ydb.Topic.StreamReadMessage.StartPartitionSessionRequest.partition_session:type_name -> Ydb.Topic.StreamReadMessage.PartitionSession
	3,  // 77: Ydb.Topic.StreamReadMessage.StartPartitionSessionRequest.partition_offsets:type_name -> Ydb.Topic.OffsetsRange
	66, // 78: Ydb.Topic.StreamReadMessage.InitRequest.TopicReadSettings.max_lag:type_name -> google.protobuf.Duration
	64, // 79: Ydb.Topic.StreamReadMessage.InitRequest.TopicReadSettings.read_from:type_name -> google.protobuf.Timestamp
	64, // 80: Ydb.Topic.StreamReadMessage.ReadResponse.MessageData.created_at:type_name -> google.protobuf.Timestamp
	52, // 81: Ydb.Topic.StreamReadMessage.ReadResponse.Batch.message_data:type_name -> Ydb.Topic.StreamReadMessage.ReadResponse.MessageData
	55, // 82: Ydb.Topic.StreamReadMessage.ReadResponse.Batch.write_session_meta:type_name -> Ydb.Topic.StreamReadMessage.ReadResponse.Batch.WriteSessionMetaEntry
	64, // 83: Ydb.Topic.StreamReadMessage.ReadResponse.Batch.written_at:type_name -> google.protobuf.Timestamp
	53, // 84: Ydb.Topic.StreamReadMessage.ReadResponse.PartitionData.batches:type_name -> Ydb.Topic.StreamReadMessage.ReadResponse.Batch
	3,  // 85: Ydb.Topic.StreamReadMessage.CommitOffsetRequest.PartitionCommitOffset.offsets:type_name -> Ydb.Topic.OffsetsRange
	86, // [86:86] is the sub-list for method output_type
	86, // [86:86] is the sub-list for method input_type
	86, // [86:86] is the sub-list for extension type_name
	86, // [86:86] is the sub-list for extension extendee
	0,  // [0:86] is the sub-list for field type_name
}

func init() { file_protos_ydb_topic_proto_init() }
func file_protos_ydb_topic_proto_init() {
	if File_protos_ydb_topic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_ydb_topic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupportedCodecs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetsRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterConsumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitioningSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterPartitioningSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTopicResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_FromClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_FromServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_WriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_WriteRequest_MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_WriteResponse_WriteAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_WriteResponse_WriteStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_WriteResponse_WriteAck_Written); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamWriteMessage_WriteResponse_WriteAck_Skipped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_PartitionSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_FromClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_FromServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_ReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_CommitOffsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_CommitOffsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_PartitionSessionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_PartitionSessionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_StartPartitionSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_StartPartitionSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_StopPartitionSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_StopPartitionSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_InitRequest_TopicReadSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_ReadResponse_MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_ReadResponse_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_ReadResponse_PartitionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_CommitOffsetRequest_PartitionCommitOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamReadMessage_CommitOffsetResponse_PartitionCommittedOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_topic_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTopicResult_PartitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_ydb_topic_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_protos_ydb_topic_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_protos_ydb_topic_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_protos_ydb_topic_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*StreamWriteMessage_FromClient_InitRequest)(nil),
		(*StreamWriteMessage_FromClient_WriteRequest)(nil),
		(*StreamWriteMessage_FromClient_UpdateTokenRequest)(nil),
	}
	file_protos_ydb_topic_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*StreamWriteMessage_FromServer_InitResponse)(nil),
		(*StreamWriteMessage_FromServer_WriteResponse)(nil),
		(*StreamWriteMessage_FromServer_UpdateTokenResponse)(nil),
	}
	file_protos_ydb_topic_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*StreamWriteMessage_InitRequest_MessageGroupId)(nil),
		(*StreamWriteMessage_InitRequest_PartitionId)(nil),
	}
	file_protos_ydb_topic_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*StreamWriteMessage_WriteRequest_MessageData_MessageGroupId)(nil),
		(*StreamWriteMessage_WriteRequest_MessageData_PartitionId)(nil),
	}
	file_protos_ydb_topic_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*StreamWriteMessage_WriteResponse_WriteAck_Written_)(nil),
		(*StreamWriteMessage_WriteResponse_WriteAck_Skipped_)(nil),
	}
	file_protos_ydb_topic_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*StreamReadMessage_FromClient_InitRequest)(nil),
		(*StreamReadMessage_FromClient_ReadRequest)(nil),
		(*StreamReadMessage_FromClient_CommitOffsetRequest)(nil),
		(*StreamReadMessage_FromClient_PartitionSessionStatusRequest)(nil),
		(*StreamReadMessage_FromClient_UpdateTokenRequest)(nil),
		(*StreamReadMessage_FromClient_StartPartitionSessionResponse)(nil),
		(*StreamReadMessage_FromClient_StopPartitionSessionResponse)(nil),
	}
	file_protos_ydb_topic_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*StreamReadMessage_FromServer_InitResponse)(nil),
		(*StreamReadMessage_FromServer_ReadResponse)(nil),
		(*StreamReadMessage_FromServer_CommitOffsetResponse)(nil),
		(*StreamReadMessage_FromServer_PartitionSessionStatusResponse)(nil),
		(*StreamReadMessage_FromServer_UpdateTokenResponse)(nil),
		(*StreamReadMessage_FromServer_StartPartitionSessionRequest)(nil),
		(*StreamReadMessage_FromServer_StopPartitionSessionRequest)(nil),
	}
	file_protos_ydb_topic_proto_msgTypes[46].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_ydb_topic_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_ydb_topic_proto_goTypes,
		DependencyIndexes: file_protos_ydb_topic_proto_depIdxs,
		EnumInfos:         file_protos_ydb_topic_proto_enumTypes,
		MessageInfos:      file_protos_ydb_topic_proto_msgTypes,
	}.Build()
	File_protos_ydb_topic_proto = out.File
	file_protos_ydb_topic_proto_rawDesc = nil
	file_protos_ydb_topic_proto_goTypes = nil
	file_protos_ydb_topic_proto_depIdxs = nil
}
