// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: protos/ydb_table.proto

package Ydb_Table

import (
	Ydb "github.com/YandexDatabase/ydb-go-genproto/protos/Ydb"
	Ydb_Issue "github.com/YandexDatabase/ydb-go-genproto/protos/Ydb_Issue"
	Ydb_Operations "github.com/YandexDatabase/ydb-go-genproto/protos/Ydb_Operations"
	Ydb_Scheme "github.com/YandexDatabase/ydb-go-genproto/protos/Ydb_Scheme"
	Ydb_TableStats "github.com/YandexDatabase/ydb-go-genproto/protos/Ydb_TableStats"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TableIndexDescription_Status int32

const (
	TableIndexDescription_STATUS_UNSPECIFIED TableIndexDescription_Status = 0
	// Index is ready to use
	TableIndexDescription_STATUS_READY TableIndexDescription_Status = 1
	// index is being built
	TableIndexDescription_STATUS_BUILDING TableIndexDescription_Status = 2
)

// Enum value maps for TableIndexDescription_Status.
var (
	TableIndexDescription_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_READY",
		2: "STATUS_BUILDING",
	}
	TableIndexDescription_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_READY":       1,
		"STATUS_BUILDING":    2,
	}
)

func (x TableIndexDescription_Status) Enum() *TableIndexDescription_Status {
	p := new(TableIndexDescription_Status)
	*p = x
	return p
}

func (x TableIndexDescription_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableIndexDescription_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_table_proto_enumTypes[0].Descriptor()
}

func (TableIndexDescription_Status) Type() protoreflect.EnumType {
	return &file_protos_ydb_table_proto_enumTypes[0]
}

func (x TableIndexDescription_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableIndexDescription_Status.Descriptor instead.
func (TableIndexDescription_Status) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{8, 0}
}

type IndexBuildState_State int32

const (
	IndexBuildState_STATE_UNSPECIFIED      IndexBuildState_State = 0
	IndexBuildState_STATE_PREPARING        IndexBuildState_State = 1
	IndexBuildState_STATE_TRANSFERING_DATA IndexBuildState_State = 2
	IndexBuildState_STATE_APPLYING         IndexBuildState_State = 3
	IndexBuildState_STATE_DONE             IndexBuildState_State = 4
	IndexBuildState_STATE_CANCELLATION     IndexBuildState_State = 5
	IndexBuildState_STATE_CANCELLED        IndexBuildState_State = 6
	IndexBuildState_STATE_REJECTION        IndexBuildState_State = 7
	IndexBuildState_STATE_REJECTED         IndexBuildState_State = 8
)

// Enum value maps for IndexBuildState_State.
var (
	IndexBuildState_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_PREPARING",
		2: "STATE_TRANSFERING_DATA",
		3: "STATE_APPLYING",
		4: "STATE_DONE",
		5: "STATE_CANCELLATION",
		6: "STATE_CANCELLED",
		7: "STATE_REJECTION",
		8: "STATE_REJECTED",
	}
	IndexBuildState_State_value = map[string]int32{
		"STATE_UNSPECIFIED":      0,
		"STATE_PREPARING":        1,
		"STATE_TRANSFERING_DATA": 2,
		"STATE_APPLYING":         3,
		"STATE_DONE":             4,
		"STATE_CANCELLATION":     5,
		"STATE_CANCELLED":        6,
		"STATE_REJECTION":        7,
		"STATE_REJECTED":         8,
	}
)

func (x IndexBuildState_State) Enum() *IndexBuildState_State {
	p := new(IndexBuildState_State)
	*p = x
	return p
}

func (x IndexBuildState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexBuildState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_table_proto_enumTypes[1].Descriptor()
}

func (IndexBuildState_State) Type() protoreflect.EnumType {
	return &file_protos_ydb_table_proto_enumTypes[1]
}

func (x IndexBuildState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexBuildState_State.Descriptor instead.
func (IndexBuildState_State) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{9, 0}
}

type ColumnFamilyPolicy_Compression int32

const (
	ColumnFamilyPolicy_COMPRESSION_UNSPECIFIED ColumnFamilyPolicy_Compression = 0
	ColumnFamilyPolicy_UNCOMPRESSED            ColumnFamilyPolicy_Compression = 1
	ColumnFamilyPolicy_COMPRESSED              ColumnFamilyPolicy_Compression = 2
)

// Enum value maps for ColumnFamilyPolicy_Compression.
var (
	ColumnFamilyPolicy_Compression_name = map[int32]string{
		0: "COMPRESSION_UNSPECIFIED",
		1: "UNCOMPRESSED",
		2: "COMPRESSED",
	}
	ColumnFamilyPolicy_Compression_value = map[string]int32{
		"COMPRESSION_UNSPECIFIED": 0,
		"UNCOMPRESSED":            1,
		"COMPRESSED":              2,
	}
)

func (x ColumnFamilyPolicy_Compression) Enum() *ColumnFamilyPolicy_Compression {
	p := new(ColumnFamilyPolicy_Compression)
	*p = x
	return p
}

func (x ColumnFamilyPolicy_Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnFamilyPolicy_Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_table_proto_enumTypes[2].Descriptor()
}

func (ColumnFamilyPolicy_Compression) Type() protoreflect.EnumType {
	return &file_protos_ydb_table_proto_enumTypes[2]
}

func (x ColumnFamilyPolicy_Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnFamilyPolicy_Compression.Descriptor instead.
func (ColumnFamilyPolicy_Compression) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{14, 0}
}

type PartitioningPolicy_AutoPartitioningPolicy int32

const (
	PartitioningPolicy_AUTO_PARTITIONING_POLICY_UNSPECIFIED PartitioningPolicy_AutoPartitioningPolicy = 0
	PartitioningPolicy_DISABLED                             PartitioningPolicy_AutoPartitioningPolicy = 1
	PartitioningPolicy_AUTO_SPLIT                           PartitioningPolicy_AutoPartitioningPolicy = 2
	PartitioningPolicy_AUTO_SPLIT_MERGE                     PartitioningPolicy_AutoPartitioningPolicy = 3
)

// Enum value maps for PartitioningPolicy_AutoPartitioningPolicy.
var (
	PartitioningPolicy_AutoPartitioningPolicy_name = map[int32]string{
		0: "AUTO_PARTITIONING_POLICY_UNSPECIFIED",
		1: "DISABLED",
		2: "AUTO_SPLIT",
		3: "AUTO_SPLIT_MERGE",
	}
	PartitioningPolicy_AutoPartitioningPolicy_value = map[string]int32{
		"AUTO_PARTITIONING_POLICY_UNSPECIFIED": 0,
		"DISABLED":                             1,
		"AUTO_SPLIT":                           2,
		"AUTO_SPLIT_MERGE":                     3,
	}
)

func (x PartitioningPolicy_AutoPartitioningPolicy) Enum() *PartitioningPolicy_AutoPartitioningPolicy {
	p := new(PartitioningPolicy_AutoPartitioningPolicy)
	*p = x
	return p
}

func (x PartitioningPolicy_AutoPartitioningPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitioningPolicy_AutoPartitioningPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_table_proto_enumTypes[3].Descriptor()
}

func (PartitioningPolicy_AutoPartitioningPolicy) Type() protoreflect.EnumType {
	return &file_protos_ydb_table_proto_enumTypes[3]
}

func (x PartitioningPolicy_AutoPartitioningPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitioningPolicy_AutoPartitioningPolicy.Descriptor instead.
func (PartitioningPolicy_AutoPartitioningPolicy) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{19, 0}
}

type ValueSinceUnixEpochModeSettings_Unit int32

const (
	ValueSinceUnixEpochModeSettings_UNIT_UNSPECIFIED  ValueSinceUnixEpochModeSettings_Unit = 0
	ValueSinceUnixEpochModeSettings_UNIT_SECONDS      ValueSinceUnixEpochModeSettings_Unit = 1
	ValueSinceUnixEpochModeSettings_UNIT_MILLISECONDS ValueSinceUnixEpochModeSettings_Unit = 2
	ValueSinceUnixEpochModeSettings_UNIT_MICROSECONDS ValueSinceUnixEpochModeSettings_Unit = 3
	ValueSinceUnixEpochModeSettings_UNIT_NANOSECONDS  ValueSinceUnixEpochModeSettings_Unit = 4
)

// Enum value maps for ValueSinceUnixEpochModeSettings_Unit.
var (
	ValueSinceUnixEpochModeSettings_Unit_name = map[int32]string{
		0: "UNIT_UNSPECIFIED",
		1: "UNIT_SECONDS",
		2: "UNIT_MILLISECONDS",
		3: "UNIT_MICROSECONDS",
		4: "UNIT_NANOSECONDS",
	}
	ValueSinceUnixEpochModeSettings_Unit_value = map[string]int32{
		"UNIT_UNSPECIFIED":  0,
		"UNIT_SECONDS":      1,
		"UNIT_MILLISECONDS": 2,
		"UNIT_MICROSECONDS": 3,
		"UNIT_NANOSECONDS":  4,
	}
)

func (x ValueSinceUnixEpochModeSettings_Unit) Enum() *ValueSinceUnixEpochModeSettings_Unit {
	p := new(ValueSinceUnixEpochModeSettings_Unit)
	*p = x
	return p
}

func (x ValueSinceUnixEpochModeSettings_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueSinceUnixEpochModeSettings_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_table_proto_enumTypes[4].Descriptor()
}

func (ValueSinceUnixEpochModeSettings_Unit) Type() protoreflect.EnumType {
	return &file_protos_ydb_table_proto_enumTypes[4]
}

func (x ValueSinceUnixEpochModeSettings_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueSinceUnixEpochModeSettings_Unit.Descriptor instead.
func (ValueSinceUnixEpochModeSettings_Unit) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{26, 0}
}

type ColumnFamily_Compression int32

const (
	ColumnFamily_COMPRESSION_UNSPECIFIED ColumnFamily_Compression = 0
	ColumnFamily_COMPRESSION_NONE        ColumnFamily_Compression = 1
	ColumnFamily_COMPRESSION_LZ4         ColumnFamily_Compression = 2
)

// Enum value maps for ColumnFamily_Compression.
var (
	ColumnFamily_Compression_name = map[int32]string{
		0: "COMPRESSION_UNSPECIFIED",
		1: "COMPRESSION_NONE",
		2: "COMPRESSION_LZ4",
	}
	ColumnFamily_Compression_value = map[string]int32{
		"COMPRESSION_UNSPECIFIED": 0,
		"COMPRESSION_NONE":        1,
		"COMPRESSION_LZ4":         2,
	}
)

func (x ColumnFamily_Compression) Enum() *ColumnFamily_Compression {
	p := new(ColumnFamily_Compression)
	*p = x
	return p
}

func (x ColumnFamily_Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnFamily_Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_table_proto_enumTypes[5].Descriptor()
}

func (ColumnFamily_Compression) Type() protoreflect.EnumType {
	return &file_protos_ydb_table_proto_enumTypes[5]
}

func (x ColumnFamily_Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnFamily_Compression.Descriptor instead.
func (ColumnFamily_Compression) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{29, 0}
}

type QueryStatsCollection_Mode int32

const (
	QueryStatsCollection_STATS_COLLECTION_UNSPECIFIED QueryStatsCollection_Mode = 0
	QueryStatsCollection_STATS_COLLECTION_NONE        QueryStatsCollection_Mode = 1 // Stats collection is disabled
	QueryStatsCollection_STATS_COLLECTION_BASIC       QueryStatsCollection_Mode = 2 // Aggregated stats of reads, updates and deletes per table
	QueryStatsCollection_STATS_COLLECTION_FULL        QueryStatsCollection_Mode = 3 // Add execution stats and plan on top of STATS_COLLECTION_BASIC
)

// Enum value maps for QueryStatsCollection_Mode.
var (
	QueryStatsCollection_Mode_name = map[int32]string{
		0: "STATS_COLLECTION_UNSPECIFIED",
		1: "STATS_COLLECTION_NONE",
		2: "STATS_COLLECTION_BASIC",
		3: "STATS_COLLECTION_FULL",
	}
	QueryStatsCollection_Mode_value = map[string]int32{
		"STATS_COLLECTION_UNSPECIFIED": 0,
		"STATS_COLLECTION_NONE":        1,
		"STATS_COLLECTION_BASIC":       2,
		"STATS_COLLECTION_FULL":        3,
	}
)

func (x QueryStatsCollection_Mode) Enum() *QueryStatsCollection_Mode {
	p := new(QueryStatsCollection_Mode)
	*p = x
	return p
}

func (x QueryStatsCollection_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryStatsCollection_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_table_proto_enumTypes[6].Descriptor()
}

func (QueryStatsCollection_Mode) Type() protoreflect.EnumType {
	return &file_protos_ydb_table_proto_enumTypes[6]
}

func (x QueryStatsCollection_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryStatsCollection_Mode.Descriptor instead.
func (QueryStatsCollection_Mode) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{58, 0}
}

type KeepAliveResult_SessionStatus int32

const (
	KeepAliveResult_SESSION_STATUS_UNSPECIFIED KeepAliveResult_SessionStatus = 0
	KeepAliveResult_SESSION_STATUS_READY       KeepAliveResult_SessionStatus = 1
	KeepAliveResult_SESSION_STATUS_BUSY        KeepAliveResult_SessionStatus = 2
)

// Enum value maps for KeepAliveResult_SessionStatus.
var (
	KeepAliveResult_SessionStatus_name = map[int32]string{
		0: "SESSION_STATUS_UNSPECIFIED",
		1: "SESSION_STATUS_READY",
		2: "SESSION_STATUS_BUSY",
	}
	KeepAliveResult_SessionStatus_value = map[string]int32{
		"SESSION_STATUS_UNSPECIFIED": 0,
		"SESSION_STATUS_READY":       1,
		"SESSION_STATUS_BUSY":        2,
	}
)

func (x KeepAliveResult_SessionStatus) Enum() *KeepAliveResult_SessionStatus {
	p := new(KeepAliveResult_SessionStatus)
	*p = x
	return p
}

func (x KeepAliveResult_SessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeepAliveResult_SessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_table_proto_enumTypes[7].Descriptor()
}

func (KeepAliveResult_SessionStatus) Type() protoreflect.EnumType {
	return &file_protos_ydb_table_proto_enumTypes[7]
}

func (x KeepAliveResult_SessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeepAliveResult_SessionStatus.Descriptor instead.
func (KeepAliveResult_SessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{74, 0}
}

type ExecuteScanQueryRequest_Mode int32

const (
	ExecuteScanQueryRequest_MODE_UNSPECIFIED ExecuteScanQueryRequest_Mode = 0
	ExecuteScanQueryRequest_MODE_EXPLAIN     ExecuteScanQueryRequest_Mode = 1
	// MODE_PREPARE = 2;
	ExecuteScanQueryRequest_MODE_EXEC ExecuteScanQueryRequest_Mode = 3
)

// Enum value maps for ExecuteScanQueryRequest_Mode.
var (
	ExecuteScanQueryRequest_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_EXPLAIN",
		3: "MODE_EXEC",
	}
	ExecuteScanQueryRequest_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_EXPLAIN":     1,
		"MODE_EXEC":        3,
	}
)

func (x ExecuteScanQueryRequest_Mode) Enum() *ExecuteScanQueryRequest_Mode {
	p := new(ExecuteScanQueryRequest_Mode)
	*p = x
	return p
}

func (x ExecuteScanQueryRequest_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecuteScanQueryRequest_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_ydb_table_proto_enumTypes[8].Descriptor()
}

func (ExecuteScanQueryRequest_Mode) Type() protoreflect.EnumType {
	return &file_protos_ydb_table_proto_enumTypes[8]
}

func (x ExecuteScanQueryRequest_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecuteScanQueryRequest_Mode.Descriptor instead.
func (ExecuteScanQueryRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{100, 0}
}

// Create new session
type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

// Create new session
type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds CreateSessionResult in case of CreateSessionResult
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSessionResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type CreateSessionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *CreateSessionResult) Reset() {
	*x = CreateSessionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResult) ProtoMessage() {}

func (x *CreateSessionResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResult.ProtoReflect.Descriptor instead.
func (*CreateSessionResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSessionResult) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Delete session with given id string
type DeleteSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId       string                          `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,2,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *DeleteSessionRequest) Reset() {
	*x = DeleteSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionRequest) ProtoMessage() {}

func (x *DeleteSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DeleteSessionRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type DeleteSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DeleteSessionResponse) Reset() {
	*x = DeleteSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionResponse) ProtoMessage() {}

func (x *DeleteSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionResponse.ProtoReflect.Descriptor instead.
func (*DeleteSessionResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSessionResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type GlobalIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GlobalIndex) Reset() {
	*x = GlobalIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalIndex) ProtoMessage() {}

func (x *GlobalIndex) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalIndex.ProtoReflect.Descriptor instead.
func (*GlobalIndex) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{5}
}

type GlobalAsyncIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GlobalAsyncIndex) Reset() {
	*x = GlobalAsyncIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalAsyncIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalAsyncIndex) ProtoMessage() {}

func (x *GlobalAsyncIndex) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalAsyncIndex.ProtoReflect.Descriptor instead.
func (*GlobalAsyncIndex) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{6}
}

// Represent secondary index
type TableIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of index
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// list of columns
	IndexColumns []string `protobuf:"bytes,2,rep,name=index_columns,json=indexColumns,proto3" json:"index_columns,omitempty"`
	// Type of index
	//
	// Types that are assignable to Type:
	//	*TableIndex_GlobalIndex
	//	*TableIndex_GlobalAsyncIndex
	Type isTableIndex_Type `protobuf_oneof:"type"`
	// list of columns content to be copied in to index table
	DataColumns []string `protobuf:"bytes,5,rep,name=data_columns,json=dataColumns,proto3" json:"data_columns,omitempty"`
}

func (x *TableIndex) Reset() {
	*x = TableIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableIndex) ProtoMessage() {}

func (x *TableIndex) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableIndex.ProtoReflect.Descriptor instead.
func (*TableIndex) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{7}
}

func (x *TableIndex) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableIndex) GetIndexColumns() []string {
	if x != nil {
		return x.IndexColumns
	}
	return nil
}

func (m *TableIndex) GetType() isTableIndex_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TableIndex) GetGlobalIndex() *GlobalIndex {
	if x, ok := x.GetType().(*TableIndex_GlobalIndex); ok {
		return x.GlobalIndex
	}
	return nil
}

func (x *TableIndex) GetGlobalAsyncIndex() *GlobalAsyncIndex {
	if x, ok := x.GetType().(*TableIndex_GlobalAsyncIndex); ok {
		return x.GlobalAsyncIndex
	}
	return nil
}

func (x *TableIndex) GetDataColumns() []string {
	if x != nil {
		return x.DataColumns
	}
	return nil
}

type isTableIndex_Type interface {
	isTableIndex_Type()
}

type TableIndex_GlobalIndex struct {
	GlobalIndex *GlobalIndex `protobuf:"bytes,3,opt,name=global_index,json=globalIndex,proto3,oneof"`
}

type TableIndex_GlobalAsyncIndex struct {
	GlobalAsyncIndex *GlobalAsyncIndex `protobuf:"bytes,4,opt,name=global_async_index,json=globalAsyncIndex,proto3,oneof"`
}

func (*TableIndex_GlobalIndex) isTableIndex_Type() {}

func (*TableIndex_GlobalAsyncIndex) isTableIndex_Type() {}

// Represent secondary index with index state
type TableIndexDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of index
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// list of columns
	IndexColumns []string `protobuf:"bytes,2,rep,name=index_columns,json=indexColumns,proto3" json:"index_columns,omitempty"`
	// Type of index
	//
	// Types that are assignable to Type:
	//	*TableIndexDescription_GlobalIndex
	//	*TableIndexDescription_GlobalAsyncIndex
	Type   isTableIndexDescription_Type `protobuf_oneof:"type"`
	Status TableIndexDescription_Status `protobuf:"varint,4,opt,name=status,proto3,enum=Ydb.Table.TableIndexDescription_Status" json:"status,omitempty"`
	// list of columns content to be copied in to index table
	DataColumns []string `protobuf:"bytes,6,rep,name=data_columns,json=dataColumns,proto3" json:"data_columns,omitempty"`
}

func (x *TableIndexDescription) Reset() {
	*x = TableIndexDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableIndexDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableIndexDescription) ProtoMessage() {}

func (x *TableIndexDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableIndexDescription.ProtoReflect.Descriptor instead.
func (*TableIndexDescription) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{8}
}

func (x *TableIndexDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableIndexDescription) GetIndexColumns() []string {
	if x != nil {
		return x.IndexColumns
	}
	return nil
}

func (m *TableIndexDescription) GetType() isTableIndexDescription_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TableIndexDescription) GetGlobalIndex() *GlobalIndex {
	if x, ok := x.GetType().(*TableIndexDescription_GlobalIndex); ok {
		return x.GlobalIndex
	}
	return nil
}

func (x *TableIndexDescription) GetGlobalAsyncIndex() *GlobalAsyncIndex {
	if x, ok := x.GetType().(*TableIndexDescription_GlobalAsyncIndex); ok {
		return x.GlobalAsyncIndex
	}
	return nil
}

func (x *TableIndexDescription) GetStatus() TableIndexDescription_Status {
	if x != nil {
		return x.Status
	}
	return TableIndexDescription_STATUS_UNSPECIFIED
}

func (x *TableIndexDescription) GetDataColumns() []string {
	if x != nil {
		return x.DataColumns
	}
	return nil
}

type isTableIndexDescription_Type interface {
	isTableIndexDescription_Type()
}

type TableIndexDescription_GlobalIndex struct {
	GlobalIndex *GlobalIndex `protobuf:"bytes,3,opt,name=global_index,json=globalIndex,proto3,oneof"`
}

type TableIndexDescription_GlobalAsyncIndex struct {
	GlobalAsyncIndex *GlobalAsyncIndex `protobuf:"bytes,5,opt,name=global_async_index,json=globalAsyncIndex,proto3,oneof"`
}

func (*TableIndexDescription_GlobalIndex) isTableIndexDescription_Type() {}

func (*TableIndexDescription_GlobalAsyncIndex) isTableIndexDescription_Type() {}

// State of index building operation
type IndexBuildState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IndexBuildState) Reset() {
	*x = IndexBuildState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexBuildState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildState) ProtoMessage() {}

func (x *IndexBuildState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildState.ProtoReflect.Descriptor instead.
func (*IndexBuildState) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{9}
}

// Description of index building operation
type IndexBuildDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  string      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Index *TableIndex `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *IndexBuildDescription) Reset() {
	*x = IndexBuildDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexBuildDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildDescription) ProtoMessage() {}

func (x *IndexBuildDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildDescription.ProtoReflect.Descriptor instead.
func (*IndexBuildDescription) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{10}
}

func (x *IndexBuildDescription) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *IndexBuildDescription) GetIndex() *TableIndex {
	if x != nil {
		return x.Index
	}
	return nil
}

type IndexBuildMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *IndexBuildDescription `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	State       IndexBuildState_State  `protobuf:"varint,2,opt,name=state,proto3,enum=Ydb.Table.IndexBuildState_State" json:"state,omitempty"`
	Progress    float32                `protobuf:"fixed32,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *IndexBuildMetadata) Reset() {
	*x = IndexBuildMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexBuildMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexBuildMetadata) ProtoMessage() {}

func (x *IndexBuildMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexBuildMetadata.ProtoReflect.Descriptor instead.
func (*IndexBuildMetadata) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{11}
}

func (x *IndexBuildMetadata) GetDescription() *IndexBuildDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *IndexBuildMetadata) GetState() IndexBuildState_State {
	if x != nil {
		return x.State
	}
	return IndexBuildState_STATE_UNSPECIFIED
}

func (x *IndexBuildMetadata) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type StoragePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Media string `protobuf:"bytes,1,opt,name=media,proto3" json:"media,omitempty"`
}

func (x *StoragePool) Reset() {
	*x = StoragePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePool) ProtoMessage() {}

func (x *StoragePool) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePool.ProtoReflect.Descriptor instead.
func (*StoragePool) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{12}
}

func (x *StoragePool) GetMedia() string {
	if x != nil {
		return x.Media
	}
	return ""
}

type StoragePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetName     string                 `protobuf:"bytes,1,opt,name=preset_name,json=presetName,proto3" json:"preset_name,omitempty"`
	Syslog         *StoragePool           `protobuf:"bytes,2,opt,name=syslog,proto3" json:"syslog,omitempty"`
	Log            *StoragePool           `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Data           *StoragePool           `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	External       *StoragePool           `protobuf:"bytes,5,opt,name=external,proto3" json:"external,omitempty"`
	KeepInMemory   Ydb.FeatureFlag_Status `protobuf:"varint,6,opt,name=keep_in_memory,json=keepInMemory,proto3,enum=Ydb.FeatureFlag_Status" json:"keep_in_memory,omitempty"`
	ColumnFamilies []*ColumnFamilyPolicy  `protobuf:"bytes,7,rep,name=column_families,json=columnFamilies,proto3" json:"column_families,omitempty"`
}

func (x *StoragePolicy) Reset() {
	*x = StoragePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePolicy) ProtoMessage() {}

func (x *StoragePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePolicy.ProtoReflect.Descriptor instead.
func (*StoragePolicy) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{13}
}

func (x *StoragePolicy) GetPresetName() string {
	if x != nil {
		return x.PresetName
	}
	return ""
}

func (x *StoragePolicy) GetSyslog() *StoragePool {
	if x != nil {
		return x.Syslog
	}
	return nil
}

func (x *StoragePolicy) GetLog() *StoragePool {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *StoragePolicy) GetData() *StoragePool {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StoragePolicy) GetExternal() *StoragePool {
	if x != nil {
		return x.External
	}
	return nil
}

func (x *StoragePolicy) GetKeepInMemory() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.KeepInMemory
	}
	return Ydb.FeatureFlag_Status(0)
}

func (x *StoragePolicy) GetColumnFamilies() []*ColumnFamilyPolicy {
	if x != nil {
		return x.ColumnFamilies
	}
	return nil
}

type ColumnFamilyPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the column family, the name "default" must be used for the
	// primary column family that contains as least primary key columns
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Storage settings for the column group (default to values in storage policy)
	Data         *StoragePool           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	External     *StoragePool           `protobuf:"bytes,3,opt,name=external,proto3" json:"external,omitempty"`
	KeepInMemory Ydb.FeatureFlag_Status `protobuf:"varint,4,opt,name=keep_in_memory,json=keepInMemory,proto3,enum=Ydb.FeatureFlag_Status" json:"keep_in_memory,omitempty"`
	// Optionally specify whether data should be compressed
	Compression ColumnFamilyPolicy_Compression `protobuf:"varint,5,opt,name=compression,proto3,enum=Ydb.Table.ColumnFamilyPolicy_Compression" json:"compression,omitempty"`
}

func (x *ColumnFamilyPolicy) Reset() {
	*x = ColumnFamilyPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnFamilyPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnFamilyPolicy) ProtoMessage() {}

func (x *ColumnFamilyPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnFamilyPolicy.ProtoReflect.Descriptor instead.
func (*ColumnFamilyPolicy) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{14}
}

func (x *ColumnFamilyPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnFamilyPolicy) GetData() *StoragePool {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ColumnFamilyPolicy) GetExternal() *StoragePool {
	if x != nil {
		return x.External
	}
	return nil
}

func (x *ColumnFamilyPolicy) GetKeepInMemory() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.KeepInMemory
	}
	return Ydb.FeatureFlag_Status(0)
}

func (x *ColumnFamilyPolicy) GetCompression() ColumnFamilyPolicy_Compression {
	if x != nil {
		return x.Compression
	}
	return ColumnFamilyPolicy_COMPRESSION_UNSPECIFIED
}

type CompactionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetName string `protobuf:"bytes,1,opt,name=preset_name,json=presetName,proto3" json:"preset_name,omitempty"`
}

func (x *CompactionPolicy) Reset() {
	*x = CompactionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionPolicy) ProtoMessage() {}

func (x *CompactionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionPolicy.ProtoReflect.Descriptor instead.
func (*CompactionPolicy) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{15}
}

func (x *CompactionPolicy) GetPresetName() string {
	if x != nil {
		return x.PresetName
	}
	return ""
}

type ExplicitPartitions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify key values used to split table into partitions.
	// Each value becomes the first key of a new partition.
	// Key values should go in ascending order.
	// Total number of created partitions is number of specified
	// keys + 1.
	SplitPoints []*Ydb.TypedValue `protobuf:"bytes,1,rep,name=split_points,json=splitPoints,proto3" json:"split_points,omitempty"`
}

func (x *ExplicitPartitions) Reset() {
	*x = ExplicitPartitions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplicitPartitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplicitPartitions) ProtoMessage() {}

func (x *ExplicitPartitions) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplicitPartitions.ProtoReflect.Descriptor instead.
func (*ExplicitPartitions) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{16}
}

func (x *ExplicitPartitions) GetSplitPoints() []*Ydb.TypedValue {
	if x != nil {
		return x.SplitPoints
	}
	return nil
}

type PartitionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Approximate number of rows in shard
	RowsEstimate uint64 `protobuf:"varint,1,opt,name=rows_estimate,json=rowsEstimate,proto3" json:"rows_estimate,omitempty"`
	// Approximate size of shard (bytes)
	StoreSize uint64 `protobuf:"varint,2,opt,name=store_size,json=storeSize,proto3" json:"store_size,omitempty"`
}

func (x *PartitionStats) Reset() {
	*x = PartitionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionStats) ProtoMessage() {}

func (x *PartitionStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionStats.ProtoReflect.Descriptor instead.
func (*PartitionStats) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{17}
}

func (x *PartitionStats) GetRowsEstimate() uint64 {
	if x != nil {
		return x.RowsEstimate
	}
	return 0
}

func (x *PartitionStats) GetStoreSize() uint64 {
	if x != nil {
		return x.StoreSize
	}
	return 0
}

type TableStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stats for each partition
	PartitionStats []*PartitionStats `protobuf:"bytes,1,rep,name=partition_stats,json=partitionStats,proto3" json:"partition_stats,omitempty"`
	// Approximate number of rows in table
	RowsEstimate uint64 `protobuf:"varint,2,opt,name=rows_estimate,json=rowsEstimate,proto3" json:"rows_estimate,omitempty"`
	// Approximate size of table (bytes)
	StoreSize uint64 `protobuf:"varint,3,opt,name=store_size,json=storeSize,proto3" json:"store_size,omitempty"`
	// Number of partitions in table
	Partitions uint64 `protobuf:"varint,4,opt,name=partitions,proto3" json:"partitions,omitempty"`
	// Timestamp of table creation
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Timestamp of last modification
	ModificationTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=modification_time,json=modificationTime,proto3" json:"modification_time,omitempty"`
}

func (x *TableStats) Reset() {
	*x = TableStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableStats) ProtoMessage() {}

func (x *TableStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableStats.ProtoReflect.Descriptor instead.
func (*TableStats) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{18}
}

func (x *TableStats) GetPartitionStats() []*PartitionStats {
	if x != nil {
		return x.PartitionStats
	}
	return nil
}

func (x *TableStats) GetRowsEstimate() uint64 {
	if x != nil {
		return x.RowsEstimate
	}
	return 0
}

func (x *TableStats) GetStoreSize() uint64 {
	if x != nil {
		return x.StoreSize
	}
	return 0
}

func (x *TableStats) GetPartitions() uint64 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

func (x *TableStats) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *TableStats) GetModificationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModificationTime
	}
	return nil
}

type PartitioningPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetName       string                                    `protobuf:"bytes,1,opt,name=preset_name,json=presetName,proto3" json:"preset_name,omitempty"`
	AutoPartitioning PartitioningPolicy_AutoPartitioningPolicy `protobuf:"varint,2,opt,name=auto_partitioning,json=autoPartitioning,proto3,enum=Ydb.Table.PartitioningPolicy_AutoPartitioningPolicy" json:"auto_partitioning,omitempty"`
	// Types that are assignable to Partitions:
	//	*PartitioningPolicy_UniformPartitions
	//	*PartitioningPolicy_ExplicitPartitions
	Partitions isPartitioningPolicy_Partitions `protobuf_oneof:"partitions"`
}

func (x *PartitioningPolicy) Reset() {
	*x = PartitioningPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitioningPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitioningPolicy) ProtoMessage() {}

func (x *PartitioningPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitioningPolicy.ProtoReflect.Descriptor instead.
func (*PartitioningPolicy) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{19}
}

func (x *PartitioningPolicy) GetPresetName() string {
	if x != nil {
		return x.PresetName
	}
	return ""
}

func (x *PartitioningPolicy) GetAutoPartitioning() PartitioningPolicy_AutoPartitioningPolicy {
	if x != nil {
		return x.AutoPartitioning
	}
	return PartitioningPolicy_AUTO_PARTITIONING_POLICY_UNSPECIFIED
}

func (m *PartitioningPolicy) GetPartitions() isPartitioningPolicy_Partitions {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (x *PartitioningPolicy) GetUniformPartitions() uint64 {
	if x, ok := x.GetPartitions().(*PartitioningPolicy_UniformPartitions); ok {
		return x.UniformPartitions
	}
	return 0
}

func (x *PartitioningPolicy) GetExplicitPartitions() *ExplicitPartitions {
	if x, ok := x.GetPartitions().(*PartitioningPolicy_ExplicitPartitions); ok {
		return x.ExplicitPartitions
	}
	return nil
}

type isPartitioningPolicy_Partitions interface {
	isPartitioningPolicy_Partitions()
}

type PartitioningPolicy_UniformPartitions struct {
	// Allows to enable uniform sharding using given shards number.
	// The first components of primary key must have Uint32/Uint64 type.
	UniformPartitions uint64 `protobuf:"varint,3,opt,name=uniform_partitions,json=uniformPartitions,proto3,oneof"`
}

type PartitioningPolicy_ExplicitPartitions struct {
	// Explicitly specify key values which are used as borders for
	// created partitions.
	ExplicitPartitions *ExplicitPartitions `protobuf:"bytes,4,opt,name=explicit_partitions,json=explicitPartitions,proto3,oneof"`
}

func (*PartitioningPolicy_UniformPartitions) isPartitioningPolicy_Partitions() {}

func (*PartitioningPolicy_ExplicitPartitions) isPartitioningPolicy_Partitions() {}

type ExecutionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetName string `protobuf:"bytes,1,opt,name=preset_name,json=presetName,proto3" json:"preset_name,omitempty"`
}

func (x *ExecutionPolicy) Reset() {
	*x = ExecutionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPolicy) ProtoMessage() {}

func (x *ExecutionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionPolicy.ProtoReflect.Descriptor instead.
func (*ExecutionPolicy) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{20}
}

func (x *ExecutionPolicy) GetPresetName() string {
	if x != nil {
		return x.PresetName
	}
	return ""
}

type ReplicationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetName string `protobuf:"bytes,1,opt,name=preset_name,json=presetName,proto3" json:"preset_name,omitempty"`
	// If value is non-zero then it specifies a number of read-only
	// replicas to create for a table. Zero value means preset
	// setting usage.
	ReplicasCount uint32 `protobuf:"varint,2,opt,name=replicas_count,json=replicasCount,proto3" json:"replicas_count,omitempty"`
	// If this feature in enabled then requested number of replicas
	// will be created in each availability zone.
	CreatePerAvailabilityZone Ydb.FeatureFlag_Status `protobuf:"varint,3,opt,name=create_per_availability_zone,json=createPerAvailabilityZone,proto3,enum=Ydb.FeatureFlag_Status" json:"create_per_availability_zone,omitempty"`
	// If this feature in enabled then read-only replicas can be promoted
	// to master.
	AllowPromotion Ydb.FeatureFlag_Status `protobuf:"varint,4,opt,name=allow_promotion,json=allowPromotion,proto3,enum=Ydb.FeatureFlag_Status" json:"allow_promotion,omitempty"`
}

func (x *ReplicationPolicy) Reset() {
	*x = ReplicationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationPolicy) ProtoMessage() {}

func (x *ReplicationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationPolicy.ProtoReflect.Descriptor instead.
func (*ReplicationPolicy) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{21}
}

func (x *ReplicationPolicy) GetPresetName() string {
	if x != nil {
		return x.PresetName
	}
	return ""
}

func (x *ReplicationPolicy) GetReplicasCount() uint32 {
	if x != nil {
		return x.ReplicasCount
	}
	return 0
}

func (x *ReplicationPolicy) GetCreatePerAvailabilityZone() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.CreatePerAvailabilityZone
	}
	return Ydb.FeatureFlag_Status(0)
}

func (x *ReplicationPolicy) GetAllowPromotion() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.AllowPromotion
	}
	return Ydb.FeatureFlag_Status(0)
}

type CachingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetName string `protobuf:"bytes,1,opt,name=preset_name,json=presetName,proto3" json:"preset_name,omitempty"`
}

func (x *CachingPolicy) Reset() {
	*x = CachingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachingPolicy) ProtoMessage() {}

func (x *CachingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachingPolicy.ProtoReflect.Descriptor instead.
func (*CachingPolicy) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{22}
}

func (x *CachingPolicy) GetPresetName() string {
	if x != nil {
		return x.PresetName
	}
	return ""
}

type TableProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetName         string              `protobuf:"bytes,1,opt,name=preset_name,json=presetName,proto3" json:"preset_name,omitempty"`
	StoragePolicy      *StoragePolicy      `protobuf:"bytes,2,opt,name=storage_policy,json=storagePolicy,proto3" json:"storage_policy,omitempty"`
	CompactionPolicy   *CompactionPolicy   `protobuf:"bytes,3,opt,name=compaction_policy,json=compactionPolicy,proto3" json:"compaction_policy,omitempty"`
	PartitioningPolicy *PartitioningPolicy `protobuf:"bytes,4,opt,name=partitioning_policy,json=partitioningPolicy,proto3" json:"partitioning_policy,omitempty"`
	ExecutionPolicy    *ExecutionPolicy    `protobuf:"bytes,5,opt,name=execution_policy,json=executionPolicy,proto3" json:"execution_policy,omitempty"`
	ReplicationPolicy  *ReplicationPolicy  `protobuf:"bytes,6,opt,name=replication_policy,json=replicationPolicy,proto3" json:"replication_policy,omitempty"`
	CachingPolicy      *CachingPolicy      `protobuf:"bytes,7,opt,name=caching_policy,json=cachingPolicy,proto3" json:"caching_policy,omitempty"`
}

func (x *TableProfile) Reset() {
	*x = TableProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableProfile) ProtoMessage() {}

func (x *TableProfile) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableProfile.ProtoReflect.Descriptor instead.
func (*TableProfile) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{23}
}

func (x *TableProfile) GetPresetName() string {
	if x != nil {
		return x.PresetName
	}
	return ""
}

func (x *TableProfile) GetStoragePolicy() *StoragePolicy {
	if x != nil {
		return x.StoragePolicy
	}
	return nil
}

func (x *TableProfile) GetCompactionPolicy() *CompactionPolicy {
	if x != nil {
		return x.CompactionPolicy
	}
	return nil
}

func (x *TableProfile) GetPartitioningPolicy() *PartitioningPolicy {
	if x != nil {
		return x.PartitioningPolicy
	}
	return nil
}

func (x *TableProfile) GetExecutionPolicy() *ExecutionPolicy {
	if x != nil {
		return x.ExecutionPolicy
	}
	return nil
}

func (x *TableProfile) GetReplicationPolicy() *ReplicationPolicy {
	if x != nil {
		return x.ReplicationPolicy
	}
	return nil
}

func (x *TableProfile) GetCachingPolicy() *CachingPolicy {
	if x != nil {
		return x.CachingPolicy
	}
	return nil
}

type ColumnMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of column
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of column
	Type *Ydb.Type `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Column family name of the column
	Family string `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
}

func (x *ColumnMeta) Reset() {
	*x = ColumnMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMeta) ProtoMessage() {}

func (x *ColumnMeta) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMeta.ProtoReflect.Descriptor instead.
func (*ColumnMeta) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{24}
}

func (x *ColumnMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnMeta) GetType() *Ydb.Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ColumnMeta) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

type DateTypeColumnModeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column type must be a date type
	ColumnName         string `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ExpireAfterSeconds uint32 `protobuf:"varint,2,opt,name=expire_after_seconds,json=expireAfterSeconds,proto3" json:"expire_after_seconds,omitempty"`
}

func (x *DateTypeColumnModeSettings) Reset() {
	*x = DateTypeColumnModeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTypeColumnModeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTypeColumnModeSettings) ProtoMessage() {}

func (x *DateTypeColumnModeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTypeColumnModeSettings.ProtoReflect.Descriptor instead.
func (*DateTypeColumnModeSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{25}
}

func (x *DateTypeColumnModeSettings) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *DateTypeColumnModeSettings) GetExpireAfterSeconds() uint32 {
	if x != nil {
		return x.ExpireAfterSeconds
	}
	return 0
}

type ValueSinceUnixEpochModeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column type must be one of:
	// - Uint32
	// - Uint64
	// - DyNumber
	ColumnName string `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	// Interpretation of the value stored in <column_name>
	ColumnUnit ValueSinceUnixEpochModeSettings_Unit `protobuf:"varint,2,opt,name=column_unit,json=columnUnit,proto3,enum=Ydb.Table.ValueSinceUnixEpochModeSettings_Unit" json:"column_unit,omitempty"`
	// This option is always interpreted as seconds regardless of the
	// <column_unit> value.
	ExpireAfterSeconds uint32 `protobuf:"varint,3,opt,name=expire_after_seconds,json=expireAfterSeconds,proto3" json:"expire_after_seconds,omitempty"`
}

func (x *ValueSinceUnixEpochModeSettings) Reset() {
	*x = ValueSinceUnixEpochModeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueSinceUnixEpochModeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueSinceUnixEpochModeSettings) ProtoMessage() {}

func (x *ValueSinceUnixEpochModeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueSinceUnixEpochModeSettings.ProtoReflect.Descriptor instead.
func (*ValueSinceUnixEpochModeSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{26}
}

func (x *ValueSinceUnixEpochModeSettings) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ValueSinceUnixEpochModeSettings) GetColumnUnit() ValueSinceUnixEpochModeSettings_Unit {
	if x != nil {
		return x.ColumnUnit
	}
	return ValueSinceUnixEpochModeSettings_UNIT_UNSPECIFIED
}

func (x *ValueSinceUnixEpochModeSettings) GetExpireAfterSeconds() uint32 {
	if x != nil {
		return x.ExpireAfterSeconds
	}
	return 0
}

type TtlSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mode:
	//	*TtlSettings_DateTypeColumn
	//	*TtlSettings_ValueSinceUnixEpoch
	Mode isTtlSettings_Mode `protobuf_oneof:"mode"`
}

func (x *TtlSettings) Reset() {
	*x = TtlSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtlSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtlSettings) ProtoMessage() {}

func (x *TtlSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtlSettings.ProtoReflect.Descriptor instead.
func (*TtlSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{27}
}

func (m *TtlSettings) GetMode() isTtlSettings_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *TtlSettings) GetDateTypeColumn() *DateTypeColumnModeSettings {
	if x, ok := x.GetMode().(*TtlSettings_DateTypeColumn); ok {
		return x.DateTypeColumn
	}
	return nil
}

func (x *TtlSettings) GetValueSinceUnixEpoch() *ValueSinceUnixEpochModeSettings {
	if x, ok := x.GetMode().(*TtlSettings_ValueSinceUnixEpoch); ok {
		return x.ValueSinceUnixEpoch
	}
	return nil
}

type isTtlSettings_Mode interface {
	isTtlSettings_Mode()
}

type TtlSettings_DateTypeColumn struct {
	DateTypeColumn *DateTypeColumnModeSettings `protobuf:"bytes,1,opt,name=date_type_column,json=dateTypeColumn,proto3,oneof"`
}

type TtlSettings_ValueSinceUnixEpoch struct {
	ValueSinceUnixEpoch *ValueSinceUnixEpochModeSettings `protobuf:"bytes,2,opt,name=value_since_unix_epoch,json=valueSinceUnixEpoch,proto3,oneof"`
}

func (*TtlSettings_DateTypeColumn) isTtlSettings_Mode() {}

func (*TtlSettings_ValueSinceUnixEpoch) isTtlSettings_Mode() {}

type StorageSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This specifies internal channel 0 commit log storage pool
	// Fastest available storage recommended, negligible amounts of short-lived data
	TabletCommitLog0 *StoragePool `protobuf:"bytes,1,opt,name=tablet_commit_log0,json=tabletCommitLog0,proto3" json:"tablet_commit_log0,omitempty"`
	// This specifies internal channel 1 commit log storage pool
	// Fastest available storage recommended, small amounts of short-lived data
	TabletCommitLog1 *StoragePool `protobuf:"bytes,2,opt,name=tablet_commit_log1,json=tabletCommitLog1,proto3" json:"tablet_commit_log1,omitempty"`
	// This specifies external blobs storage pool
	External *StoragePool `protobuf:"bytes,4,opt,name=external,proto3" json:"external,omitempty"`
	// Optionally store large values in "external blobs"
	// Don't use unless required, restrictions apply:
	// * Table cannot split/merge when this is enabled
	// * Table cannot be copied or backed up when this is enabled
	// * This feature cannot be disabled once enabled for a table
	StoreExternalBlobs Ydb.FeatureFlag_Status `protobuf:"varint,5,opt,name=store_external_blobs,json=storeExternalBlobs,proto3,enum=Ydb.FeatureFlag_Status" json:"store_external_blobs,omitempty"`
}

func (x *StorageSettings) Reset() {
	*x = StorageSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSettings) ProtoMessage() {}

func (x *StorageSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSettings.ProtoReflect.Descriptor instead.
func (*StorageSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{28}
}

func (x *StorageSettings) GetTabletCommitLog0() *StoragePool {
	if x != nil {
		return x.TabletCommitLog0
	}
	return nil
}

func (x *StorageSettings) GetTabletCommitLog1() *StoragePool {
	if x != nil {
		return x.TabletCommitLog1
	}
	return nil
}

func (x *StorageSettings) GetExternal() *StoragePool {
	if x != nil {
		return x.External
	}
	return nil
}

func (x *StorageSettings) GetStoreExternalBlobs() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.StoreExternalBlobs
	}
	return Ydb.FeatureFlag_Status(0)
}

type ColumnFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the column family, the name "default" must be used for the
	// primary column family that contains at least primary key columns
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This specifies data storage settings for column family
	Data *StoragePool `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Optionally specify how data should be compressed
	Compression ColumnFamily_Compression `protobuf:"varint,3,opt,name=compression,proto3,enum=Ydb.Table.ColumnFamily_Compression" json:"compression,omitempty"`
	// When enabled keeps data pages in memory
	KeepInMemory Ydb.FeatureFlag_Status `protobuf:"varint,4,opt,name=keep_in_memory,json=keepInMemory,proto3,enum=Ydb.FeatureFlag_Status" json:"keep_in_memory,omitempty"`
}

func (x *ColumnFamily) Reset() {
	*x = ColumnFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnFamily) ProtoMessage() {}

func (x *ColumnFamily) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnFamily.ProtoReflect.Descriptor instead.
func (*ColumnFamily) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{29}
}

func (x *ColumnFamily) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnFamily) GetData() *StoragePool {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ColumnFamily) GetCompression() ColumnFamily_Compression {
	if x != nil {
		return x.Compression
	}
	return ColumnFamily_COMPRESSION_UNSPECIFIED
}

func (x *ColumnFamily) GetKeepInMemory() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.KeepInMemory
	}
	return Ydb.FeatureFlag_Status(0)
}

type PartitioningSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable auto partitioning on reaching upper or lower partition size bound
	PartitioningBySize Ydb.FeatureFlag_Status `protobuf:"varint,2,opt,name=partitioning_by_size,json=partitioningBySize,proto3,enum=Ydb.FeatureFlag_Status" json:"partitioning_by_size,omitempty"`
	// Preferred partition size for auto partitioning by size, Mb
	PartitionSizeMb uint64 `protobuf:"varint,3,opt,name=partition_size_mb,json=partitionSizeMb,proto3" json:"partition_size_mb,omitempty"`
	// Enable auto partitioning based on load on each partition
	PartitioningByLoad Ydb.FeatureFlag_Status `protobuf:"varint,4,opt,name=partitioning_by_load,json=partitioningByLoad,proto3,enum=Ydb.FeatureFlag_Status" json:"partitioning_by_load,omitempty"`
	// Minimum partitions count auto merge would stop working at
	MinPartitionsCount uint64 `protobuf:"varint,6,opt,name=min_partitions_count,json=minPartitionsCount,proto3" json:"min_partitions_count,omitempty"`
	// Maximum partitions count auto split would stop working at
	MaxPartitionsCount uint64 `protobuf:"varint,7,opt,name=max_partitions_count,json=maxPartitionsCount,proto3" json:"max_partitions_count,omitempty"`
}

func (x *PartitioningSettings) Reset() {
	*x = PartitioningSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitioningSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitioningSettings) ProtoMessage() {}

func (x *PartitioningSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitioningSettings.ProtoReflect.Descriptor instead.
func (*PartitioningSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{30}
}

func (x *PartitioningSettings) GetPartitioningBySize() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.PartitioningBySize
	}
	return Ydb.FeatureFlag_Status(0)
}

func (x *PartitioningSettings) GetPartitionSizeMb() uint64 {
	if x != nil {
		return x.PartitionSizeMb
	}
	return 0
}

func (x *PartitioningSettings) GetPartitioningByLoad() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.PartitioningByLoad
	}
	return Ydb.FeatureFlag_Status(0)
}

func (x *PartitioningSettings) GetMinPartitionsCount() uint64 {
	if x != nil {
		return x.MinPartitionsCount
	}
	return 0
}

func (x *PartitioningSettings) GetMaxPartitionsCount() uint64 {
	if x != nil {
		return x.MaxPartitionsCount
	}
	return 0
}

type AzReadReplicasSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AZ name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Read replicas count in this AZ
	ReadReplicasCount uint64 `protobuf:"varint,2,opt,name=read_replicas_count,json=readReplicasCount,proto3" json:"read_replicas_count,omitempty"`
}

func (x *AzReadReplicasSettings) Reset() {
	*x = AzReadReplicasSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzReadReplicasSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzReadReplicasSettings) ProtoMessage() {}

func (x *AzReadReplicasSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzReadReplicasSettings.ProtoReflect.Descriptor instead.
func (*AzReadReplicasSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{31}
}

func (x *AzReadReplicasSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AzReadReplicasSettings) GetReadReplicasCount() uint64 {
	if x != nil {
		return x.ReadReplicasCount
	}
	return 0
}

type ClusterReplicasSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of read replicas settings for each AZ
	AzReadReplicasSettings []*AzReadReplicasSettings `protobuf:"bytes,2,rep,name=az_read_replicas_settings,json=azReadReplicasSettings,proto3" json:"az_read_replicas_settings,omitempty"`
}

func (x *ClusterReplicasSettings) Reset() {
	*x = ClusterReplicasSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterReplicasSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterReplicasSettings) ProtoMessage() {}

func (x *ClusterReplicasSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterReplicasSettings.ProtoReflect.Descriptor instead.
func (*ClusterReplicasSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{32}
}

func (x *ClusterReplicasSettings) GetAzReadReplicasSettings() []*AzReadReplicasSettings {
	if x != nil {
		return x.AzReadReplicasSettings
	}
	return nil
}

type ReadReplicasSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Settings:
	//	*ReadReplicasSettings_PerAzReadReplicasCount
	//	*ReadReplicasSettings_AnyAzReadReplicasCount
	Settings isReadReplicasSettings_Settings `protobuf_oneof:"settings"`
}

func (x *ReadReplicasSettings) Reset() {
	*x = ReadReplicasSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadReplicasSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReplicasSettings) ProtoMessage() {}

func (x *ReadReplicasSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReplicasSettings.ProtoReflect.Descriptor instead.
func (*ReadReplicasSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{33}
}

func (m *ReadReplicasSettings) GetSettings() isReadReplicasSettings_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (x *ReadReplicasSettings) GetPerAzReadReplicasCount() uint64 {
	if x, ok := x.GetSettings().(*ReadReplicasSettings_PerAzReadReplicasCount); ok {
		return x.PerAzReadReplicasCount
	}
	return 0
}

func (x *ReadReplicasSettings) GetAnyAzReadReplicasCount() uint64 {
	if x, ok := x.GetSettings().(*ReadReplicasSettings_AnyAzReadReplicasCount); ok {
		return x.AnyAzReadReplicasCount
	}
	return 0
}

type isReadReplicasSettings_Settings interface {
	isReadReplicasSettings_Settings()
}

type ReadReplicasSettings_PerAzReadReplicasCount struct {
	// Set equal read replicas count for every AZ
	PerAzReadReplicasCount uint64 `protobuf:"varint,1,opt,name=per_az_read_replicas_count,json=perAzReadReplicasCount,proto3,oneof"`
}

type ReadReplicasSettings_AnyAzReadReplicasCount struct {
	// Set total replicas count between all AZs
	AnyAzReadReplicasCount uint64 `protobuf:"varint,2,opt,name=any_az_read_replicas_count,json=anyAzReadReplicasCount,proto3,oneof"`
}

func (*ReadReplicasSettings_PerAzReadReplicasCount) isReadReplicasSettings_Settings() {}

func (*ReadReplicasSettings_AnyAzReadReplicasCount) isReadReplicasSettings_Settings() {}

type CreateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Full path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Columns (name, type)
	Columns []*ColumnMeta `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
	// List of columns used as primary key
	PrimaryKey []string `protobuf:"bytes,4,rep,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	// Table profile
	Profile         *TableProfile                   `protobuf:"bytes,5,opt,name=profile,proto3" json:"profile,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,6,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// List of secondary indexes
	Indexes []*TableIndex `protobuf:"bytes,7,rep,name=indexes,proto3" json:"indexes,omitempty"`
	// Table rows time to live settings
	TtlSettings *TtlSettings `protobuf:"bytes,8,opt,name=ttl_settings,json=ttlSettings,proto3" json:"ttl_settings,omitempty"`
	// Storage settings for table
	StorageSettings *StorageSettings `protobuf:"bytes,9,opt,name=storage_settings,json=storageSettings,proto3" json:"storage_settings,omitempty"`
	// Column families
	ColumnFamilies []*ColumnFamily `protobuf:"bytes,10,rep,name=column_families,json=columnFamilies,proto3" json:"column_families,omitempty"`
	// Attributes. Total size is limited to 10 KB.
	Attributes map[string]string `protobuf:"bytes,11,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Predefined named set of settings for table compaction ["default", "small_table", "log_table"].
	CompactionPolicy string `protobuf:"bytes,12,opt,name=compaction_policy,json=compactionPolicy,proto3" json:"compaction_policy,omitempty"`
	// Either one of the following partitions options can be specified
	//
	// Types that are assignable to Partitions:
	//	*CreateTableRequest_UniformPartitions
	//	*CreateTableRequest_PartitionAtKeys
	Partitions isCreateTableRequest_Partitions `protobuf_oneof:"partitions"`
	// Partitioning settings for table
	PartitioningSettings *PartitioningSettings `protobuf:"bytes,15,opt,name=partitioning_settings,json=partitioningSettings,proto3" json:"partitioning_settings,omitempty"`
	// Bloom filter by key
	KeyBloomFilter Ydb.FeatureFlag_Status `protobuf:"varint,16,opt,name=key_bloom_filter,json=keyBloomFilter,proto3,enum=Ydb.FeatureFlag_Status" json:"key_bloom_filter,omitempty"`
	// Read replicas settings for table
	ReadReplicasSettings *ReadReplicasSettings `protobuf:"bytes,17,opt,name=read_replicas_settings,json=readReplicasSettings,proto3" json:"read_replicas_settings,omitempty"`
}

func (x *CreateTableRequest) Reset() {
	*x = CreateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequest) ProtoMessage() {}

func (x *CreateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequest.ProtoReflect.Descriptor instead.
func (*CreateTableRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{34}
}

func (x *CreateTableRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateTableRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateTableRequest) GetColumns() []*ColumnMeta {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *CreateTableRequest) GetPrimaryKey() []string {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

func (x *CreateTableRequest) GetProfile() *TableProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *CreateTableRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *CreateTableRequest) GetIndexes() []*TableIndex {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *CreateTableRequest) GetTtlSettings() *TtlSettings {
	if x != nil {
		return x.TtlSettings
	}
	return nil
}

func (x *CreateTableRequest) GetStorageSettings() *StorageSettings {
	if x != nil {
		return x.StorageSettings
	}
	return nil
}

func (x *CreateTableRequest) GetColumnFamilies() []*ColumnFamily {
	if x != nil {
		return x.ColumnFamilies
	}
	return nil
}

func (x *CreateTableRequest) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CreateTableRequest) GetCompactionPolicy() string {
	if x != nil {
		return x.CompactionPolicy
	}
	return ""
}

func (m *CreateTableRequest) GetPartitions() isCreateTableRequest_Partitions {
	if m != nil {
		return m.Partitions
	}
	return nil
}

func (x *CreateTableRequest) GetUniformPartitions() uint64 {
	if x, ok := x.GetPartitions().(*CreateTableRequest_UniformPartitions); ok {
		return x.UniformPartitions
	}
	return 0
}

func (x *CreateTableRequest) GetPartitionAtKeys() *ExplicitPartitions {
	if x, ok := x.GetPartitions().(*CreateTableRequest_PartitionAtKeys); ok {
		return x.PartitionAtKeys
	}
	return nil
}

func (x *CreateTableRequest) GetPartitioningSettings() *PartitioningSettings {
	if x != nil {
		return x.PartitioningSettings
	}
	return nil
}

func (x *CreateTableRequest) GetKeyBloomFilter() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.KeyBloomFilter
	}
	return Ydb.FeatureFlag_Status(0)
}

func (x *CreateTableRequest) GetReadReplicasSettings() *ReadReplicasSettings {
	if x != nil {
		return x.ReadReplicasSettings
	}
	return nil
}

type isCreateTableRequest_Partitions interface {
	isCreateTableRequest_Partitions()
}

type CreateTableRequest_UniformPartitions struct {
	// Enable uniform partitioning using given partitions count.
	// The first components of primary key must have Uint32/Uint64 type.
	UniformPartitions uint64 `protobuf:"varint,13,opt,name=uniform_partitions,json=uniformPartitions,proto3,oneof"`
}

type CreateTableRequest_PartitionAtKeys struct {
	// Explicitly specify key values which are used as borders for created partitions.
	PartitionAtKeys *ExplicitPartitions `protobuf:"bytes,14,opt,name=partition_at_keys,json=partitionAtKeys,proto3,oneof"`
}

func (*CreateTableRequest_UniformPartitions) isCreateTableRequest_Partitions() {}

func (*CreateTableRequest_PartitionAtKeys) isCreateTableRequest_Partitions() {}

type CreateTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *CreateTableResponse) Reset() {
	*x = CreateTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableResponse) ProtoMessage() {}

func (x *CreateTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableResponse.ProtoReflect.Descriptor instead.
func (*CreateTableResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{35}
}

func (x *CreateTableResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Drop table with given path
type DropTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Full path
	Path            string                          `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,4,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *DropTableRequest) Reset() {
	*x = DropTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTableRequest) ProtoMessage() {}

func (x *DropTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTableRequest.ProtoReflect.Descriptor instead.
func (*DropTableRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{36}
}

func (x *DropTableRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DropTableRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DropTableRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type DropTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DropTableResponse) Reset() {
	*x = DropTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTableResponse) ProtoMessage() {}

func (x *DropTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTableResponse.ProtoReflect.Descriptor instead.
func (*DropTableResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{37}
}

func (x *DropTableResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Alter table with given path
type AlterTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Full path
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Columns (name, type) to add
	AddColumns []*ColumnMeta `protobuf:"bytes,3,rep,name=add_columns,json=addColumns,proto3" json:"add_columns,omitempty"`
	// Columns to remove
	DropColumns     []string                        `protobuf:"bytes,4,rep,name=drop_columns,json=dropColumns,proto3" json:"drop_columns,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,5,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Columns to alter
	AlterColumns []*ColumnMeta `protobuf:"bytes,6,rep,name=alter_columns,json=alterColumns,proto3" json:"alter_columns,omitempty"`
	// Setup or remove time to live settings
	//
	// Types that are assignable to TtlAction:
	//	*AlterTableRequest_SetTtlSettings
	//	*AlterTableRequest_DropTtlSettings
	TtlAction isAlterTableRequest_TtlAction `protobuf_oneof:"ttl_action"`
	// Add secondary indexes
	AddIndexes []*TableIndex `protobuf:"bytes,9,rep,name=add_indexes,json=addIndexes,proto3" json:"add_indexes,omitempty"`
	// Remove secondary indexes
	DropIndexes []string `protobuf:"bytes,10,rep,name=drop_indexes,json=dropIndexes,proto3" json:"drop_indexes,omitempty"`
	// Change table storage settings
	AlterStorageSettings *StorageSettings `protobuf:"bytes,11,opt,name=alter_storage_settings,json=alterStorageSettings,proto3" json:"alter_storage_settings,omitempty"`
	// Add/alter column families
	AddColumnFamilies   []*ColumnFamily `protobuf:"bytes,12,rep,name=add_column_families,json=addColumnFamilies,proto3" json:"add_column_families,omitempty"`
	AlterColumnFamilies []*ColumnFamily `protobuf:"bytes,13,rep,name=alter_column_families,json=alterColumnFamilies,proto3" json:"alter_column_families,omitempty"`
	// Alter attributes. Leave the value blank to drop an attribute.
	// Cannot be used in combination with other fields (except session_id and path) at the moment.
	AlterAttributes map[string]string `protobuf:"bytes,14,rep,name=alter_attributes,json=alterAttributes,proto3" json:"alter_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Set predefined named set of settings for table compaction ["default", "small_table", "log_table"].
	// Set "default" to use default preset.
	SetCompactionPolicy string `protobuf:"bytes,15,opt,name=set_compaction_policy,json=setCompactionPolicy,proto3" json:"set_compaction_policy,omitempty"`
	// Change table partitioning settings
	AlterPartitioningSettings *PartitioningSettings `protobuf:"bytes,16,opt,name=alter_partitioning_settings,json=alterPartitioningSettings,proto3" json:"alter_partitioning_settings,omitempty"`
	// Enable/disable bloom filter by key
	SetKeyBloomFilter Ydb.FeatureFlag_Status `protobuf:"varint,17,opt,name=set_key_bloom_filter,json=setKeyBloomFilter,proto3,enum=Ydb.FeatureFlag_Status" json:"set_key_bloom_filter,omitempty"`
	// Set read replicas settings for table
	SetReadReplicasSettings *ReadReplicasSettings `protobuf:"bytes,18,opt,name=set_read_replicas_settings,json=setReadReplicasSettings,proto3" json:"set_read_replicas_settings,omitempty"`
}

func (x *AlterTableRequest) Reset() {
	*x = AlterTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequest) ProtoMessage() {}

func (x *AlterTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequest.ProtoReflect.Descriptor instead.
func (*AlterTableRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{38}
}

func (x *AlterTableRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AlterTableRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AlterTableRequest) GetAddColumns() []*ColumnMeta {
	if x != nil {
		return x.AddColumns
	}
	return nil
}

func (x *AlterTableRequest) GetDropColumns() []string {
	if x != nil {
		return x.DropColumns
	}
	return nil
}

func (x *AlterTableRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *AlterTableRequest) GetAlterColumns() []*ColumnMeta {
	if x != nil {
		return x.AlterColumns
	}
	return nil
}

func (m *AlterTableRequest) GetTtlAction() isAlterTableRequest_TtlAction {
	if m != nil {
		return m.TtlAction
	}
	return nil
}

func (x *AlterTableRequest) GetSetTtlSettings() *TtlSettings {
	if x, ok := x.GetTtlAction().(*AlterTableRequest_SetTtlSettings); ok {
		return x.SetTtlSettings
	}
	return nil
}

func (x *AlterTableRequest) GetDropTtlSettings() *emptypb.Empty {
	if x, ok := x.GetTtlAction().(*AlterTableRequest_DropTtlSettings); ok {
		return x.DropTtlSettings
	}
	return nil
}

func (x *AlterTableRequest) GetAddIndexes() []*TableIndex {
	if x != nil {
		return x.AddIndexes
	}
	return nil
}

func (x *AlterTableRequest) GetDropIndexes() []string {
	if x != nil {
		return x.DropIndexes
	}
	return nil
}

func (x *AlterTableRequest) GetAlterStorageSettings() *StorageSettings {
	if x != nil {
		return x.AlterStorageSettings
	}
	return nil
}

func (x *AlterTableRequest) GetAddColumnFamilies() []*ColumnFamily {
	if x != nil {
		return x.AddColumnFamilies
	}
	return nil
}

func (x *AlterTableRequest) GetAlterColumnFamilies() []*ColumnFamily {
	if x != nil {
		return x.AlterColumnFamilies
	}
	return nil
}

func (x *AlterTableRequest) GetAlterAttributes() map[string]string {
	if x != nil {
		return x.AlterAttributes
	}
	return nil
}

func (x *AlterTableRequest) GetSetCompactionPolicy() string {
	if x != nil {
		return x.SetCompactionPolicy
	}
	return ""
}

func (x *AlterTableRequest) GetAlterPartitioningSettings() *PartitioningSettings {
	if x != nil {
		return x.AlterPartitioningSettings
	}
	return nil
}

func (x *AlterTableRequest) GetSetKeyBloomFilter() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.SetKeyBloomFilter
	}
	return Ydb.FeatureFlag_Status(0)
}

func (x *AlterTableRequest) GetSetReadReplicasSettings() *ReadReplicasSettings {
	if x != nil {
		return x.SetReadReplicasSettings
	}
	return nil
}

type isAlterTableRequest_TtlAction interface {
	isAlterTableRequest_TtlAction()
}

type AlterTableRequest_SetTtlSettings struct {
	SetTtlSettings *TtlSettings `protobuf:"bytes,7,opt,name=set_ttl_settings,json=setTtlSettings,proto3,oneof"`
}

type AlterTableRequest_DropTtlSettings struct {
	DropTtlSettings *emptypb.Empty `protobuf:"bytes,8,opt,name=drop_ttl_settings,json=dropTtlSettings,proto3,oneof"`
}

func (*AlterTableRequest_SetTtlSettings) isAlterTableRequest_TtlAction() {}

func (*AlterTableRequest_DropTtlSettings) isAlterTableRequest_TtlAction() {}

type AlterTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *AlterTableResponse) Reset() {
	*x = AlterTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableResponse) ProtoMessage() {}

func (x *AlterTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableResponse.ProtoReflect.Descriptor instead.
func (*AlterTableResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{39}
}

func (x *AlterTableResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Copy table with given path
type CopyTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Copy from path
	SourcePath string `protobuf:"bytes,2,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	// Copy to path
	DestinationPath string                          `protobuf:"bytes,3,opt,name=destination_path,json=destinationPath,proto3" json:"destination_path,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,4,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *CopyTableRequest) Reset() {
	*x = CopyTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyTableRequest) ProtoMessage() {}

func (x *CopyTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyTableRequest.ProtoReflect.Descriptor instead.
func (*CopyTableRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{40}
}

func (x *CopyTableRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CopyTableRequest) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *CopyTableRequest) GetDestinationPath() string {
	if x != nil {
		return x.DestinationPath
	}
	return ""
}

func (x *CopyTableRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type CopyTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *CopyTableResponse) Reset() {
	*x = CopyTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyTableResponse) ProtoMessage() {}

func (x *CopyTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyTableResponse.ProtoReflect.Descriptor instead.
func (*CopyTableResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{41}
}

func (x *CopyTableResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type CopyTableItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Copy from path
	SourcePath string `protobuf:"bytes,1,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	// Copy to path
	DestinationPath string `protobuf:"bytes,2,opt,name=destination_path,json=destinationPath,proto3" json:"destination_path,omitempty"`
	// Copy options
	OmitIndexes bool `protobuf:"varint,3,opt,name=omit_indexes,json=omitIndexes,proto3" json:"omit_indexes,omitempty"`
}

func (x *CopyTableItem) Reset() {
	*x = CopyTableItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyTableItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyTableItem) ProtoMessage() {}

func (x *CopyTableItem) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyTableItem.ProtoReflect.Descriptor instead.
func (*CopyTableItem) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{42}
}

func (x *CopyTableItem) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *CopyTableItem) GetDestinationPath() string {
	if x != nil {
		return x.DestinationPath
	}
	return ""
}

func (x *CopyTableItem) GetOmitIndexes() bool {
	if x != nil {
		return x.OmitIndexes
	}
	return false
}

// Creates consistent copy of given tables.
type CopyTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Session identifier
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Source and destination paths which describe copies
	Tables []*CopyTableItem `protobuf:"bytes,3,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *CopyTablesRequest) Reset() {
	*x = CopyTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyTablesRequest) ProtoMessage() {}

func (x *CopyTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyTablesRequest.ProtoReflect.Descriptor instead.
func (*CopyTablesRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{43}
}

func (x *CopyTablesRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *CopyTablesRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CopyTablesRequest) GetTables() []*CopyTableItem {
	if x != nil {
		return x.Tables
	}
	return nil
}

type CopyTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *CopyTablesResponse) Reset() {
	*x = CopyTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyTablesResponse) ProtoMessage() {}

func (x *CopyTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyTablesResponse.ProtoReflect.Descriptor instead.
func (*CopyTablesResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{44}
}

func (x *CopyTablesResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type RenameTableItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full path
	SourcePath string `protobuf:"bytes,1,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	// Full path
	DestinationPath string `protobuf:"bytes,2,opt,name=destination_path,json=destinationPath,proto3" json:"destination_path,omitempty"`
	// Move options
	ReplaceDestination bool `protobuf:"varint,3,opt,name=replace_destination,json=replaceDestination,proto3" json:"replace_destination,omitempty"`
}

func (x *RenameTableItem) Reset() {
	*x = RenameTableItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameTableItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTableItem) ProtoMessage() {}

func (x *RenameTableItem) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTableItem.ProtoReflect.Descriptor instead.
func (*RenameTableItem) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{45}
}

func (x *RenameTableItem) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *RenameTableItem) GetDestinationPath() string {
	if x != nil {
		return x.DestinationPath
	}
	return ""
}

func (x *RenameTableItem) GetReplaceDestination() bool {
	if x != nil {
		return x.ReplaceDestination
	}
	return false
}

// Moves given tables
type RenameTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Session identifier
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Source and destination paths inside RenameTableItem describe rename actions
	Tables []*RenameTableItem `protobuf:"bytes,3,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *RenameTablesRequest) Reset() {
	*x = RenameTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTablesRequest) ProtoMessage() {}

func (x *RenameTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTablesRequest.ProtoReflect.Descriptor instead.
func (*RenameTablesRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{46}
}

func (x *RenameTablesRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *RenameTablesRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RenameTablesRequest) GetTables() []*RenameTableItem {
	if x != nil {
		return x.Tables
	}
	return nil
}

type RenameTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *RenameTablesResponse) Reset() {
	*x = RenameTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTablesResponse) ProtoMessage() {}

func (x *RenameTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTablesResponse.ProtoReflect.Descriptor instead.
func (*RenameTablesResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{47}
}

func (x *RenameTablesResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Describe table with given path
type DescribeTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Full path
	Path            string                          `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,4,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	// Includes shard key distribution info
	IncludeShardKeyBounds bool `protobuf:"varint,5,opt,name=include_shard_key_bounds,json=includeShardKeyBounds,proto3" json:"include_shard_key_bounds,omitempty"`
	// Includes table statistics
	IncludeTableStats bool `protobuf:"varint,6,opt,name=include_table_stats,json=includeTableStats,proto3" json:"include_table_stats,omitempty"`
	// Includes partition statistics (required include_table_statistics)
	IncludePartitionStats bool `protobuf:"varint,7,opt,name=include_partition_stats,json=includePartitionStats,proto3" json:"include_partition_stats,omitempty"`
}

func (x *DescribeTableRequest) Reset() {
	*x = DescribeTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTableRequest) ProtoMessage() {}

func (x *DescribeTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTableRequest.ProtoReflect.Descriptor instead.
func (*DescribeTableRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{48}
}

func (x *DescribeTableRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DescribeTableRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DescribeTableRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *DescribeTableRequest) GetIncludeShardKeyBounds() bool {
	if x != nil {
		return x.IncludeShardKeyBounds
	}
	return false
}

func (x *DescribeTableRequest) GetIncludeTableStats() bool {
	if x != nil {
		return x.IncludeTableStats
	}
	return false
}

func (x *DescribeTableRequest) GetIncludePartitionStats() bool {
	if x != nil {
		return x.IncludePartitionStats
	}
	return false
}

type DescribeTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds DescribeTableResult in case of successful call
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DescribeTableResponse) Reset() {
	*x = DescribeTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTableResponse) ProtoMessage() {}

func (x *DescribeTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTableResponse.ProtoReflect.Descriptor instead.
func (*DescribeTableResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{49}
}

func (x *DescribeTableResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type DescribeTableResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of scheme object
	Self *Ydb_Scheme.Entry `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty"`
	// List of columns
	Columns []*ColumnMeta `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// List of primary key columns
	PrimaryKey []string `protobuf:"bytes,3,rep,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	// List of key ranges for shard
	ShardKeyBounds []*Ydb.TypedValue `protobuf:"bytes,4,rep,name=shard_key_bounds,json=shardKeyBounds,proto3" json:"shard_key_bounds,omitempty"`
	// List of indexes
	Indexes []*TableIndexDescription `protobuf:"bytes,5,rep,name=indexes,proto3" json:"indexes,omitempty"`
	// Statistics of table
	TableStats *TableStats `protobuf:"bytes,6,opt,name=table_stats,json=tableStats,proto3" json:"table_stats,omitempty"`
	// TTL params
	TtlSettings *TtlSettings `protobuf:"bytes,7,opt,name=ttl_settings,json=ttlSettings,proto3" json:"ttl_settings,omitempty"`
	// Storage settings for table
	StorageSettings *StorageSettings `protobuf:"bytes,8,opt,name=storage_settings,json=storageSettings,proto3" json:"storage_settings,omitempty"`
	// Column families
	ColumnFamilies []*ColumnFamily `protobuf:"bytes,9,rep,name=column_families,json=columnFamilies,proto3" json:"column_families,omitempty"`
	// Attributes
	Attributes map[string]string `protobuf:"bytes,10,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Partitioning settings for table
	PartitioningSettings *PartitioningSettings `protobuf:"bytes,12,opt,name=partitioning_settings,json=partitioningSettings,proto3" json:"partitioning_settings,omitempty"`
	// Bloom filter by key
	KeyBloomFilter Ydb.FeatureFlag_Status `protobuf:"varint,13,opt,name=key_bloom_filter,json=keyBloomFilter,proto3,enum=Ydb.FeatureFlag_Status" json:"key_bloom_filter,omitempty"`
	// Read replicas settings for table
	ReadReplicasSettings *ReadReplicasSettings `protobuf:"bytes,14,opt,name=read_replicas_settings,json=readReplicasSettings,proto3" json:"read_replicas_settings,omitempty"`
}

func (x *DescribeTableResult) Reset() {
	*x = DescribeTableResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTableResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTableResult) ProtoMessage() {}

func (x *DescribeTableResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTableResult.ProtoReflect.Descriptor instead.
func (*DescribeTableResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{50}
}

func (x *DescribeTableResult) GetSelf() *Ydb_Scheme.Entry {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *DescribeTableResult) GetColumns() []*ColumnMeta {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DescribeTableResult) GetPrimaryKey() []string {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

func (x *DescribeTableResult) GetShardKeyBounds() []*Ydb.TypedValue {
	if x != nil {
		return x.ShardKeyBounds
	}
	return nil
}

func (x *DescribeTableResult) GetIndexes() []*TableIndexDescription {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *DescribeTableResult) GetTableStats() *TableStats {
	if x != nil {
		return x.TableStats
	}
	return nil
}

func (x *DescribeTableResult) GetTtlSettings() *TtlSettings {
	if x != nil {
		return x.TtlSettings
	}
	return nil
}

func (x *DescribeTableResult) GetStorageSettings() *StorageSettings {
	if x != nil {
		return x.StorageSettings
	}
	return nil
}

func (x *DescribeTableResult) GetColumnFamilies() []*ColumnFamily {
	if x != nil {
		return x.ColumnFamilies
	}
	return nil
}

func (x *DescribeTableResult) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DescribeTableResult) GetPartitioningSettings() *PartitioningSettings {
	if x != nil {
		return x.PartitioningSettings
	}
	return nil
}

func (x *DescribeTableResult) GetKeyBloomFilter() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.KeyBloomFilter
	}
	return Ydb.FeatureFlag_Status(0)
}

func (x *DescribeTableResult) GetReadReplicasSettings() *ReadReplicasSettings {
	if x != nil {
		return x.ReadReplicasSettings
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text of query or id prepared query
	//
	// Types that are assignable to Query:
	//	*Query_YqlText
	//	*Query_Id
	Query isQuery_Query `protobuf_oneof:"query"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{51}
}

func (m *Query) GetQuery() isQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *Query) GetYqlText() string {
	if x, ok := x.GetQuery().(*Query_YqlText); ok {
		return x.YqlText
	}
	return ""
}

func (x *Query) GetId() string {
	if x, ok := x.GetQuery().(*Query_Id); ok {
		return x.Id
	}
	return ""
}

type isQuery_Query interface {
	isQuery_Query()
}

type Query_YqlText struct {
	// SQL program
	YqlText string `protobuf:"bytes,1,opt,name=yql_text,json=yqlText,proto3,oneof"`
}

type Query_Id struct {
	// Prepared query id
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

func (*Query_YqlText) isQuery_Query() {}

func (*Query_Id) isQuery_Query() {}

type SerializableModeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SerializableModeSettings) Reset() {
	*x = SerializableModeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializableModeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializableModeSettings) ProtoMessage() {}

func (x *SerializableModeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializableModeSettings.ProtoReflect.Descriptor instead.
func (*SerializableModeSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{52}
}

type OnlineModeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowInconsistentReads bool `protobuf:"varint,1,opt,name=allow_inconsistent_reads,json=allowInconsistentReads,proto3" json:"allow_inconsistent_reads,omitempty"`
}

func (x *OnlineModeSettings) Reset() {
	*x = OnlineModeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineModeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineModeSettings) ProtoMessage() {}

func (x *OnlineModeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineModeSettings.ProtoReflect.Descriptor instead.
func (*OnlineModeSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{53}
}

func (x *OnlineModeSettings) GetAllowInconsistentReads() bool {
	if x != nil {
		return x.AllowInconsistentReads
	}
	return false
}

type StaleModeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StaleModeSettings) Reset() {
	*x = StaleModeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaleModeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaleModeSettings) ProtoMessage() {}

func (x *StaleModeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaleModeSettings.ProtoReflect.Descriptor instead.
func (*StaleModeSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{54}
}

type TransactionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TxMode:
	//	*TransactionSettings_SerializableReadWrite
	//	*TransactionSettings_OnlineReadOnly
	//	*TransactionSettings_StaleReadOnly
	TxMode isTransactionSettings_TxMode `protobuf_oneof:"tx_mode"`
}

func (x *TransactionSettings) Reset() {
	*x = TransactionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSettings) ProtoMessage() {}

func (x *TransactionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSettings.ProtoReflect.Descriptor instead.
func (*TransactionSettings) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{55}
}

func (m *TransactionSettings) GetTxMode() isTransactionSettings_TxMode {
	if m != nil {
		return m.TxMode
	}
	return nil
}

func (x *TransactionSettings) GetSerializableReadWrite() *SerializableModeSettings {
	if x, ok := x.GetTxMode().(*TransactionSettings_SerializableReadWrite); ok {
		return x.SerializableReadWrite
	}
	return nil
}

func (x *TransactionSettings) GetOnlineReadOnly() *OnlineModeSettings {
	if x, ok := x.GetTxMode().(*TransactionSettings_OnlineReadOnly); ok {
		return x.OnlineReadOnly
	}
	return nil
}

func (x *TransactionSettings) GetStaleReadOnly() *StaleModeSettings {
	if x, ok := x.GetTxMode().(*TransactionSettings_StaleReadOnly); ok {
		return x.StaleReadOnly
	}
	return nil
}

type isTransactionSettings_TxMode interface {
	isTransactionSettings_TxMode()
}

type TransactionSettings_SerializableReadWrite struct {
	SerializableReadWrite *SerializableModeSettings `protobuf:"bytes,1,opt,name=serializable_read_write,json=serializableReadWrite,proto3,oneof"`
}

type TransactionSettings_OnlineReadOnly struct {
	OnlineReadOnly *OnlineModeSettings `protobuf:"bytes,2,opt,name=online_read_only,json=onlineReadOnly,proto3,oneof"`
}

type TransactionSettings_StaleReadOnly struct {
	StaleReadOnly *StaleModeSettings `protobuf:"bytes,3,opt,name=stale_read_only,json=staleReadOnly,proto3,oneof"`
}

func (*TransactionSettings_SerializableReadWrite) isTransactionSettings_TxMode() {}

func (*TransactionSettings_OnlineReadOnly) isTransactionSettings_TxMode() {}

func (*TransactionSettings_StaleReadOnly) isTransactionSettings_TxMode() {}

type TransactionControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TxSelector:
	//	*TransactionControl_TxId
	//	*TransactionControl_BeginTx
	TxSelector isTransactionControl_TxSelector `protobuf_oneof:"tx_selector"`
	CommitTx   bool                            `protobuf:"varint,10,opt,name=commit_tx,json=commitTx,proto3" json:"commit_tx,omitempty"`
}

func (x *TransactionControl) Reset() {
	*x = TransactionControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionControl) ProtoMessage() {}

func (x *TransactionControl) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionControl.ProtoReflect.Descriptor instead.
func (*TransactionControl) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{56}
}

func (m *TransactionControl) GetTxSelector() isTransactionControl_TxSelector {
	if m != nil {
		return m.TxSelector
	}
	return nil
}

func (x *TransactionControl) GetTxId() string {
	if x, ok := x.GetTxSelector().(*TransactionControl_TxId); ok {
		return x.TxId
	}
	return ""
}

func (x *TransactionControl) GetBeginTx() *TransactionSettings {
	if x, ok := x.GetTxSelector().(*TransactionControl_BeginTx); ok {
		return x.BeginTx
	}
	return nil
}

func (x *TransactionControl) GetCommitTx() bool {
	if x != nil {
		return x.CommitTx
	}
	return false
}

type isTransactionControl_TxSelector interface {
	isTransactionControl_TxSelector()
}

type TransactionControl_TxId struct {
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3,oneof"`
}

type TransactionControl_BeginTx struct {
	BeginTx *TransactionSettings `protobuf:"bytes,2,opt,name=begin_tx,json=beginTx,proto3,oneof"`
}

func (*TransactionControl_TxId) isTransactionControl_TxSelector() {}

func (*TransactionControl_BeginTx) isTransactionControl_TxSelector() {}

type QueryCachePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeepInCache bool `protobuf:"varint,1,opt,name=keep_in_cache,json=keepInCache,proto3" json:"keep_in_cache,omitempty"`
}

func (x *QueryCachePolicy) Reset() {
	*x = QueryCachePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCachePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCachePolicy) ProtoMessage() {}

func (x *QueryCachePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCachePolicy.ProtoReflect.Descriptor instead.
func (*QueryCachePolicy) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{57}
}

func (x *QueryCachePolicy) GetKeepInCache() bool {
	if x != nil {
		return x.KeepInCache
	}
	return false
}

// Collect and return query execution stats
type QueryStatsCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryStatsCollection) Reset() {
	*x = QueryStatsCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatsCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatsCollection) ProtoMessage() {}

func (x *QueryStatsCollection) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatsCollection.ProtoReflect.Descriptor instead.
func (*QueryStatsCollection) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{58}
}

type ExecuteDataQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string              `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TxControl *TransactionControl `protobuf:"bytes,2,opt,name=tx_control,json=txControl,proto3" json:"tx_control,omitempty"`
	Query     *Query              `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// Map of query parameters (optional)
	Parameters       map[string]*Ydb.TypedValue      `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	QueryCachePolicy *QueryCachePolicy               `protobuf:"bytes,5,opt,name=query_cache_policy,json=queryCachePolicy,proto3" json:"query_cache_policy,omitempty"`
	OperationParams  *Ydb_Operations.OperationParams `protobuf:"bytes,6,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	CollectStats     QueryStatsCollection_Mode       `protobuf:"varint,7,opt,name=collect_stats,json=collectStats,proto3,enum=Ydb.Table.QueryStatsCollection_Mode" json:"collect_stats,omitempty"`
}

func (x *ExecuteDataQueryRequest) Reset() {
	*x = ExecuteDataQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteDataQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteDataQueryRequest) ProtoMessage() {}

func (x *ExecuteDataQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteDataQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteDataQueryRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{59}
}

func (x *ExecuteDataQueryRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ExecuteDataQueryRequest) GetTxControl() *TransactionControl {
	if x != nil {
		return x.TxControl
	}
	return nil
}

func (x *ExecuteDataQueryRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExecuteDataQueryRequest) GetParameters() map[string]*Ydb.TypedValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ExecuteDataQueryRequest) GetQueryCachePolicy() *QueryCachePolicy {
	if x != nil {
		return x.QueryCachePolicy
	}
	return nil
}

func (x *ExecuteDataQueryRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *ExecuteDataQueryRequest) GetCollectStats() QueryStatsCollection_Mode {
	if x != nil {
		return x.CollectStats
	}
	return QueryStatsCollection_STATS_COLLECTION_UNSPECIFIED
}

type ExecuteDataQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *ExecuteDataQueryResponse) Reset() {
	*x = ExecuteDataQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteDataQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteDataQueryResponse) ProtoMessage() {}

func (x *ExecuteDataQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteDataQueryResponse.ProtoReflect.Descriptor instead.
func (*ExecuteDataQueryResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{60}
}

func (x *ExecuteDataQueryResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type ExecuteSchemeQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// SQL text
	YqlText         string                          `protobuf:"bytes,2,opt,name=yql_text,json=yqlText,proto3" json:"yql_text,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *ExecuteSchemeQueryRequest) Reset() {
	*x = ExecuteSchemeQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSchemeQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSchemeQueryRequest) ProtoMessage() {}

func (x *ExecuteSchemeQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSchemeQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteSchemeQueryRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{61}
}

func (x *ExecuteSchemeQueryRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ExecuteSchemeQueryRequest) GetYqlText() string {
	if x != nil {
		return x.YqlText
	}
	return ""
}

func (x *ExecuteSchemeQueryRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type ExecuteSchemeQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *ExecuteSchemeQueryResponse) Reset() {
	*x = ExecuteSchemeQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSchemeQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSchemeQueryResponse) ProtoMessage() {}

func (x *ExecuteSchemeQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSchemeQueryResponse.ProtoReflect.Descriptor instead.
func (*ExecuteSchemeQueryResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{62}
}

func (x *ExecuteSchemeQueryResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// Holds transaction id
type TransactionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TransactionMeta) Reset() {
	*x = TransactionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMeta) ProtoMessage() {}

func (x *TransactionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMeta.ProtoReflect.Descriptor instead.
func (*TransactionMeta) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{63}
}

func (x *TransactionMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Holds query id and type of parameters
type QueryMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query identifier
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Type of parameters
	ParametersTypes map[string]*Ydb.Type `protobuf:"bytes,2,rep,name=parameters_types,json=parametersTypes,proto3" json:"parameters_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryMeta) Reset() {
	*x = QueryMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMeta) ProtoMessage() {}

func (x *QueryMeta) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMeta.ProtoReflect.Descriptor instead.
func (*QueryMeta) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{64}
}

func (x *QueryMeta) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryMeta) GetParametersTypes() map[string]*Ydb.Type {
	if x != nil {
		return x.ParametersTypes
	}
	return nil
}

// One QueryResult can contain multiple tables
type ExecuteQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result rets (for each table)
	ResultSets []*Ydb.ResultSet `protobuf:"bytes,1,rep,name=result_sets,json=resultSets,proto3" json:"result_sets,omitempty"`
	// Transaction metadata
	TxMeta *TransactionMeta `protobuf:"bytes,2,opt,name=tx_meta,json=txMeta,proto3" json:"tx_meta,omitempty"`
	// Query metadata
	QueryMeta *QueryMeta `protobuf:"bytes,3,opt,name=query_meta,json=queryMeta,proto3" json:"query_meta,omitempty"`
	// Query execution statistics
	QueryStats *Ydb_TableStats.QueryStats `protobuf:"bytes,4,opt,name=query_stats,json=queryStats,proto3" json:"query_stats,omitempty"`
}

func (x *ExecuteQueryResult) Reset() {
	*x = ExecuteQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteQueryResult) ProtoMessage() {}

func (x *ExecuteQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteQueryResult.ProtoReflect.Descriptor instead.
func (*ExecuteQueryResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{65}
}

func (x *ExecuteQueryResult) GetResultSets() []*Ydb.ResultSet {
	if x != nil {
		return x.ResultSets
	}
	return nil
}

func (x *ExecuteQueryResult) GetTxMeta() *TransactionMeta {
	if x != nil {
		return x.TxMeta
	}
	return nil
}

func (x *ExecuteQueryResult) GetQueryMeta() *QueryMeta {
	if x != nil {
		return x.QueryMeta
	}
	return nil
}

func (x *ExecuteQueryResult) GetQueryStats() *Ydb_TableStats.QueryStats {
	if x != nil {
		return x.QueryStats
	}
	return nil
}

// Explain data query
type ExplainDataQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// SQL text to explain
	YqlText         string                          `protobuf:"bytes,2,opt,name=yql_text,json=yqlText,proto3" json:"yql_text,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *ExplainDataQueryRequest) Reset() {
	*x = ExplainDataQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainDataQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainDataQueryRequest) ProtoMessage() {}

func (x *ExplainDataQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainDataQueryRequest.ProtoReflect.Descriptor instead.
func (*ExplainDataQueryRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{66}
}

func (x *ExplainDataQueryRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ExplainDataQueryRequest) GetYqlText() string {
	if x != nil {
		return x.YqlText
	}
	return ""
}

func (x *ExplainDataQueryRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type ExplainDataQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds ExplainQueryResult in case of successful call
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *ExplainDataQueryResponse) Reset() {
	*x = ExplainDataQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainDataQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainDataQueryResponse) ProtoMessage() {}

func (x *ExplainDataQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainDataQueryResponse.ProtoReflect.Descriptor instead.
func (*ExplainDataQueryResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{67}
}

func (x *ExplainDataQueryResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type ExplainQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryAst  string `protobuf:"bytes,1,opt,name=query_ast,json=queryAst,proto3" json:"query_ast,omitempty"`
	QueryPlan string `protobuf:"bytes,2,opt,name=query_plan,json=queryPlan,proto3" json:"query_plan,omitempty"`
}

func (x *ExplainQueryResult) Reset() {
	*x = ExplainQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainQueryResult) ProtoMessage() {}

func (x *ExplainQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainQueryResult.ProtoReflect.Descriptor instead.
func (*ExplainQueryResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{68}
}

func (x *ExplainQueryResult) GetQueryAst() string {
	if x != nil {
		return x.QueryAst
	}
	return ""
}

func (x *ExplainQueryResult) GetQueryPlan() string {
	if x != nil {
		return x.QueryPlan
	}
	return ""
}

// Prepare given program to execute
type PrepareDataQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// SQL text
	YqlText         string                          `protobuf:"bytes,2,opt,name=yql_text,json=yqlText,proto3" json:"yql_text,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *PrepareDataQueryRequest) Reset() {
	*x = PrepareDataQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareDataQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareDataQueryRequest) ProtoMessage() {}

func (x *PrepareDataQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareDataQueryRequest.ProtoReflect.Descriptor instead.
func (*PrepareDataQueryRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{69}
}

func (x *PrepareDataQueryRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PrepareDataQueryRequest) GetYqlText() string {
	if x != nil {
		return x.YqlText
	}
	return ""
}

func (x *PrepareDataQueryRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type PrepareDataQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds PrepareQueryResult in case of successful call
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *PrepareDataQueryResponse) Reset() {
	*x = PrepareDataQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareDataQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareDataQueryResponse) ProtoMessage() {}

func (x *PrepareDataQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareDataQueryResponse.ProtoReflect.Descriptor instead.
func (*PrepareDataQueryResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{70}
}

func (x *PrepareDataQueryResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type PrepareQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query id, used to perform ExecuteDataQuery
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Parameters type, used to fill in parameter values
	ParametersTypes map[string]*Ydb.Type `protobuf:"bytes,2,rep,name=parameters_types,json=parametersTypes,proto3" json:"parameters_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PrepareQueryResult) Reset() {
	*x = PrepareQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareQueryResult) ProtoMessage() {}

func (x *PrepareQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareQueryResult.ProtoReflect.Descriptor instead.
func (*PrepareQueryResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{71}
}

func (x *PrepareQueryResult) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *PrepareQueryResult) GetParametersTypes() map[string]*Ydb.Type {
	if x != nil {
		return x.ParametersTypes
	}
	return nil
}

// Keep session alive
type KeepAliveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId       string                          `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,2,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *KeepAliveRequest) Reset() {
	*x = KeepAliveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveRequest) ProtoMessage() {}

func (x *KeepAliveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveRequest.ProtoReflect.Descriptor instead.
func (*KeepAliveRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{72}
}

func (x *KeepAliveRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KeepAliveRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type KeepAliveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *KeepAliveResponse) Reset() {
	*x = KeepAliveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveResponse) ProtoMessage() {}

func (x *KeepAliveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveResponse.ProtoReflect.Descriptor instead.
func (*KeepAliveResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{73}
}

func (x *KeepAliveResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type KeepAliveResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionStatus KeepAliveResult_SessionStatus `protobuf:"varint,1,opt,name=session_status,json=sessionStatus,proto3,enum=Ydb.Table.KeepAliveResult_SessionStatus" json:"session_status,omitempty"`
}

func (x *KeepAliveResult) Reset() {
	*x = KeepAliveResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAliveResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAliveResult) ProtoMessage() {}

func (x *KeepAliveResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAliveResult.ProtoReflect.Descriptor instead.
func (*KeepAliveResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{74}
}

func (x *KeepAliveResult) GetSessionStatus() KeepAliveResult_SessionStatus {
	if x != nil {
		return x.SessionStatus
	}
	return KeepAliveResult_SESSION_STATUS_UNSPECIFIED
}

// Begin transaction on given session with given settings
type BeginTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId       string                          `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TxSettings      *TransactionSettings            `protobuf:"bytes,2,opt,name=tx_settings,json=txSettings,proto3" json:"tx_settings,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *BeginTransactionRequest) Reset() {
	*x = BeginTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTransactionRequest) ProtoMessage() {}

func (x *BeginTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTransactionRequest.ProtoReflect.Descriptor instead.
func (*BeginTransactionRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{75}
}

func (x *BeginTransactionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BeginTransactionRequest) GetTxSettings() *TransactionSettings {
	if x != nil {
		return x.TxSettings
	}
	return nil
}

func (x *BeginTransactionRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type BeginTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Holds BeginTransactionResult in case of successful call
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *BeginTransactionResponse) Reset() {
	*x = BeginTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTransactionResponse) ProtoMessage() {}

func (x *BeginTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTransactionResponse.ProtoReflect.Descriptor instead.
func (*BeginTransactionResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{76}
}

func (x *BeginTransactionResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type BeginTransactionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxMeta *TransactionMeta `protobuf:"bytes,1,opt,name=tx_meta,json=txMeta,proto3" json:"tx_meta,omitempty"`
}

func (x *BeginTransactionResult) Reset() {
	*x = BeginTransactionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginTransactionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginTransactionResult) ProtoMessage() {}

func (x *BeginTransactionResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginTransactionResult.ProtoReflect.Descriptor instead.
func (*BeginTransactionResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{77}
}

func (x *BeginTransactionResult) GetTxMeta() *TransactionMeta {
	if x != nil {
		return x.TxMeta
	}
	return nil
}

// Commit transaction with given session and tx id
type CommitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Transaction identifier
	TxId            string                          `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
	CollectStats    QueryStatsCollection_Mode       `protobuf:"varint,4,opt,name=collect_stats,json=collectStats,proto3,enum=Ydb.Table.QueryStatsCollection_Mode" json:"collect_stats,omitempty"`
}

func (x *CommitTransactionRequest) Reset() {
	*x = CommitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTransactionRequest) ProtoMessage() {}

func (x *CommitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTransactionRequest.ProtoReflect.Descriptor instead.
func (*CommitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{78}
}

func (x *CommitTransactionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CommitTransactionRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *CommitTransactionRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

func (x *CommitTransactionRequest) GetCollectStats() QueryStatsCollection_Mode {
	if x != nil {
		return x.CollectStats
	}
	return QueryStatsCollection_STATS_COLLECTION_UNSPECIFIED
}

type CommitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *CommitTransactionResponse) Reset() {
	*x = CommitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTransactionResponse) ProtoMessage() {}

func (x *CommitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTransactionResponse.ProtoReflect.Descriptor instead.
func (*CommitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{79}
}

func (x *CommitTransactionResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type CommitTransactionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryStats *Ydb_TableStats.QueryStats `protobuf:"bytes,1,opt,name=query_stats,json=queryStats,proto3" json:"query_stats,omitempty"`
}

func (x *CommitTransactionResult) Reset() {
	*x = CommitTransactionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitTransactionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitTransactionResult) ProtoMessage() {}

func (x *CommitTransactionResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitTransactionResult.ProtoReflect.Descriptor instead.
func (*CommitTransactionResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{80}
}

func (x *CommitTransactionResult) GetQueryStats() *Ydb_TableStats.QueryStats {
	if x != nil {
		return x.QueryStats
	}
	return nil
}

// Rollback transaction with given session and tx id
type RollbackTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Transaction identifier
	TxId            string                          `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *RollbackTransactionRequest) Reset() {
	*x = RollbackTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackTransactionRequest) ProtoMessage() {}

func (x *RollbackTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackTransactionRequest.ProtoReflect.Descriptor instead.
func (*RollbackTransactionRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{81}
}

func (x *RollbackTransactionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RollbackTransactionRequest) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *RollbackTransactionRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type RollbackTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *RollbackTransactionResponse) Reset() {
	*x = RollbackTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackTransactionResponse) ProtoMessage() {}

func (x *RollbackTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackTransactionResponse.ProtoReflect.Descriptor instead.
func (*RollbackTransactionResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{82}
}

func (x *RollbackTransactionResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type StoragePolicyDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StoragePolicyDescription) Reset() {
	*x = StoragePolicyDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePolicyDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePolicyDescription) ProtoMessage() {}

func (x *StoragePolicyDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePolicyDescription.ProtoReflect.Descriptor instead.
func (*StoragePolicyDescription) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{83}
}

func (x *StoragePolicyDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoragePolicyDescription) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CompactionPolicyDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CompactionPolicyDescription) Reset() {
	*x = CompactionPolicyDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionPolicyDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionPolicyDescription) ProtoMessage() {}

func (x *CompactionPolicyDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionPolicyDescription.ProtoReflect.Descriptor instead.
func (*CompactionPolicyDescription) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{84}
}

func (x *CompactionPolicyDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompactionPolicyDescription) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type PartitioningPolicyDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartitioningPolicyDescription) Reset() {
	*x = PartitioningPolicyDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitioningPolicyDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitioningPolicyDescription) ProtoMessage() {}

func (x *PartitioningPolicyDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitioningPolicyDescription.ProtoReflect.Descriptor instead.
func (*PartitioningPolicyDescription) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{85}
}

func (x *PartitioningPolicyDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitioningPolicyDescription) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ExecutionPolicyDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExecutionPolicyDescription) Reset() {
	*x = ExecutionPolicyDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPolicyDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPolicyDescription) ProtoMessage() {}

func (x *ExecutionPolicyDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionPolicyDescription.ProtoReflect.Descriptor instead.
func (*ExecutionPolicyDescription) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{86}
}

func (x *ExecutionPolicyDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutionPolicyDescription) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ReplicationPolicyDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReplicationPolicyDescription) Reset() {
	*x = ReplicationPolicyDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationPolicyDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationPolicyDescription) ProtoMessage() {}

func (x *ReplicationPolicyDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationPolicyDescription.ProtoReflect.Descriptor instead.
func (*ReplicationPolicyDescription) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{87}
}

func (x *ReplicationPolicyDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReplicationPolicyDescription) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CachingPolicyDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CachingPolicyDescription) Reset() {
	*x = CachingPolicyDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachingPolicyDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachingPolicyDescription) ProtoMessage() {}

func (x *CachingPolicyDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachingPolicyDescription.ProtoReflect.Descriptor instead.
func (*CachingPolicyDescription) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{88}
}

func (x *CachingPolicyDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CachingPolicyDescription) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type TableProfileDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels                      map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DefaultStoragePolicy        string            `protobuf:"bytes,3,opt,name=default_storage_policy,json=defaultStoragePolicy,proto3" json:"default_storage_policy,omitempty"`
	AllowedStoragePolicies      []string          `protobuf:"bytes,4,rep,name=allowed_storage_policies,json=allowedStoragePolicies,proto3" json:"allowed_storage_policies,omitempty"`
	DefaultCompactionPolicy     string            `protobuf:"bytes,5,opt,name=default_compaction_policy,json=defaultCompactionPolicy,proto3" json:"default_compaction_policy,omitempty"`
	AllowedCompactionPolicies   []string          `protobuf:"bytes,6,rep,name=allowed_compaction_policies,json=allowedCompactionPolicies,proto3" json:"allowed_compaction_policies,omitempty"`
	DefaultPartitioningPolicy   string            `protobuf:"bytes,7,opt,name=default_partitioning_policy,json=defaultPartitioningPolicy,proto3" json:"default_partitioning_policy,omitempty"`
	AllowedPartitioningPolicies []string          `protobuf:"bytes,8,rep,name=allowed_partitioning_policies,json=allowedPartitioningPolicies,proto3" json:"allowed_partitioning_policies,omitempty"`
	DefaultExecutionPolicy      string            `protobuf:"bytes,9,opt,name=default_execution_policy,json=defaultExecutionPolicy,proto3" json:"default_execution_policy,omitempty"`
	AllowedExecutionPolicies    []string          `protobuf:"bytes,10,rep,name=allowed_execution_policies,json=allowedExecutionPolicies,proto3" json:"allowed_execution_policies,omitempty"`
	DefaultReplicationPolicy    string            `protobuf:"bytes,11,opt,name=default_replication_policy,json=defaultReplicationPolicy,proto3" json:"default_replication_policy,omitempty"`
	AllowedReplicationPolicies  []string          `protobuf:"bytes,12,rep,name=allowed_replication_policies,json=allowedReplicationPolicies,proto3" json:"allowed_replication_policies,omitempty"`
	DefaultCachingPolicy        string            `protobuf:"bytes,13,opt,name=default_caching_policy,json=defaultCachingPolicy,proto3" json:"default_caching_policy,omitempty"`
	AllowedCachingPolicies      []string          `protobuf:"bytes,14,rep,name=allowed_caching_policies,json=allowedCachingPolicies,proto3" json:"allowed_caching_policies,omitempty"`
}

func (x *TableProfileDescription) Reset() {
	*x = TableProfileDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableProfileDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableProfileDescription) ProtoMessage() {}

func (x *TableProfileDescription) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableProfileDescription.ProtoReflect.Descriptor instead.
func (*TableProfileDescription) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{89}
}

func (x *TableProfileDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableProfileDescription) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TableProfileDescription) GetDefaultStoragePolicy() string {
	if x != nil {
		return x.DefaultStoragePolicy
	}
	return ""
}

func (x *TableProfileDescription) GetAllowedStoragePolicies() []string {
	if x != nil {
		return x.AllowedStoragePolicies
	}
	return nil
}

func (x *TableProfileDescription) GetDefaultCompactionPolicy() string {
	if x != nil {
		return x.DefaultCompactionPolicy
	}
	return ""
}

func (x *TableProfileDescription) GetAllowedCompactionPolicies() []string {
	if x != nil {
		return x.AllowedCompactionPolicies
	}
	return nil
}

func (x *TableProfileDescription) GetDefaultPartitioningPolicy() string {
	if x != nil {
		return x.DefaultPartitioningPolicy
	}
	return ""
}

func (x *TableProfileDescription) GetAllowedPartitioningPolicies() []string {
	if x != nil {
		return x.AllowedPartitioningPolicies
	}
	return nil
}

func (x *TableProfileDescription) GetDefaultExecutionPolicy() string {
	if x != nil {
		return x.DefaultExecutionPolicy
	}
	return ""
}

func (x *TableProfileDescription) GetAllowedExecutionPolicies() []string {
	if x != nil {
		return x.AllowedExecutionPolicies
	}
	return nil
}

func (x *TableProfileDescription) GetDefaultReplicationPolicy() string {
	if x != nil {
		return x.DefaultReplicationPolicy
	}
	return ""
}

func (x *TableProfileDescription) GetAllowedReplicationPolicies() []string {
	if x != nil {
		return x.AllowedReplicationPolicies
	}
	return nil
}

func (x *TableProfileDescription) GetDefaultCachingPolicy() string {
	if x != nil {
		return x.DefaultCachingPolicy
	}
	return ""
}

func (x *TableProfileDescription) GetAllowedCachingPolicies() []string {
	if x != nil {
		return x.AllowedCachingPolicies
	}
	return nil
}

type DescribeTableOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,1,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *DescribeTableOptionsRequest) Reset() {
	*x = DescribeTableOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTableOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTableOptionsRequest) ProtoMessage() {}

func (x *DescribeTableOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTableOptionsRequest.ProtoReflect.Descriptor instead.
func (*DescribeTableOptionsRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{90}
}

func (x *DescribeTableOptionsRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type DescribeTableOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// operation.result holds ListTableParametersResult
	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *DescribeTableOptionsResponse) Reset() {
	*x = DescribeTableOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTableOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTableOptionsResponse) ProtoMessage() {}

func (x *DescribeTableOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTableOptionsResponse.ProtoReflect.Descriptor instead.
func (*DescribeTableOptionsResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{91}
}

func (x *DescribeTableOptionsResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type DescribeTableOptionsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableProfilePresets       []*TableProfileDescription       `protobuf:"bytes,1,rep,name=table_profile_presets,json=tableProfilePresets,proto3" json:"table_profile_presets,omitempty"`
	StoragePolicyPresets      []*StoragePolicyDescription      `protobuf:"bytes,2,rep,name=storage_policy_presets,json=storagePolicyPresets,proto3" json:"storage_policy_presets,omitempty"`
	CompactionPolicyPresets   []*CompactionPolicyDescription   `protobuf:"bytes,3,rep,name=compaction_policy_presets,json=compactionPolicyPresets,proto3" json:"compaction_policy_presets,omitempty"`
	PartitioningPolicyPresets []*PartitioningPolicyDescription `protobuf:"bytes,4,rep,name=partitioning_policy_presets,json=partitioningPolicyPresets,proto3" json:"partitioning_policy_presets,omitempty"`
	ExecutionPolicyPresets    []*ExecutionPolicyDescription    `protobuf:"bytes,5,rep,name=execution_policy_presets,json=executionPolicyPresets,proto3" json:"execution_policy_presets,omitempty"`
	ReplicationPolicyPresets  []*ReplicationPolicyDescription  `protobuf:"bytes,6,rep,name=replication_policy_presets,json=replicationPolicyPresets,proto3" json:"replication_policy_presets,omitempty"`
	CachingPolicyPresets      []*CachingPolicyDescription      `protobuf:"bytes,7,rep,name=caching_policy_presets,json=cachingPolicyPresets,proto3" json:"caching_policy_presets,omitempty"`
}

func (x *DescribeTableOptionsResult) Reset() {
	*x = DescribeTableOptionsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTableOptionsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTableOptionsResult) ProtoMessage() {}

func (x *DescribeTableOptionsResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTableOptionsResult.ProtoReflect.Descriptor instead.
func (*DescribeTableOptionsResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{92}
}

func (x *DescribeTableOptionsResult) GetTableProfilePresets() []*TableProfileDescription {
	if x != nil {
		return x.TableProfilePresets
	}
	return nil
}

func (x *DescribeTableOptionsResult) GetStoragePolicyPresets() []*StoragePolicyDescription {
	if x != nil {
		return x.StoragePolicyPresets
	}
	return nil
}

func (x *DescribeTableOptionsResult) GetCompactionPolicyPresets() []*CompactionPolicyDescription {
	if x != nil {
		return x.CompactionPolicyPresets
	}
	return nil
}

func (x *DescribeTableOptionsResult) GetPartitioningPolicyPresets() []*PartitioningPolicyDescription {
	if x != nil {
		return x.PartitioningPolicyPresets
	}
	return nil
}

func (x *DescribeTableOptionsResult) GetExecutionPolicyPresets() []*ExecutionPolicyDescription {
	if x != nil {
		return x.ExecutionPolicyPresets
	}
	return nil
}

func (x *DescribeTableOptionsResult) GetReplicationPolicyPresets() []*ReplicationPolicyDescription {
	if x != nil {
		return x.ReplicationPolicyPresets
	}
	return nil
}

func (x *DescribeTableOptionsResult) GetCachingPolicyPresets() []*CachingPolicyDescription {
	if x != nil {
		return x.CachingPolicyPresets
	}
	return nil
}

type KeyRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Left border
	//
	// Types that are assignable to FromBound:
	//	*KeyRange_Greater
	//	*KeyRange_GreaterOrEqual
	FromBound isKeyRange_FromBound `protobuf_oneof:"from_bound"`
	// Right border
	//
	// Types that are assignable to ToBound:
	//	*KeyRange_Less
	//	*KeyRange_LessOrEqual
	ToBound isKeyRange_ToBound `protobuf_oneof:"to_bound"`
}

func (x *KeyRange) Reset() {
	*x = KeyRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyRange) ProtoMessage() {}

func (x *KeyRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyRange.ProtoReflect.Descriptor instead.
func (*KeyRange) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{93}
}

func (m *KeyRange) GetFromBound() isKeyRange_FromBound {
	if m != nil {
		return m.FromBound
	}
	return nil
}

func (x *KeyRange) GetGreater() *Ydb.TypedValue {
	if x, ok := x.GetFromBound().(*KeyRange_Greater); ok {
		return x.Greater
	}
	return nil
}

func (x *KeyRange) GetGreaterOrEqual() *Ydb.TypedValue {
	if x, ok := x.GetFromBound().(*KeyRange_GreaterOrEqual); ok {
		return x.GreaterOrEqual
	}
	return nil
}

func (m *KeyRange) GetToBound() isKeyRange_ToBound {
	if m != nil {
		return m.ToBound
	}
	return nil
}

func (x *KeyRange) GetLess() *Ydb.TypedValue {
	if x, ok := x.GetToBound().(*KeyRange_Less); ok {
		return x.Less
	}
	return nil
}

func (x *KeyRange) GetLessOrEqual() *Ydb.TypedValue {
	if x, ok := x.GetToBound().(*KeyRange_LessOrEqual); ok {
		return x.LessOrEqual
	}
	return nil
}

type isKeyRange_FromBound interface {
	isKeyRange_FromBound()
}

type KeyRange_Greater struct {
	// Specify if we don't want to include given key
	Greater *Ydb.TypedValue `protobuf:"bytes,1,opt,name=greater,proto3,oneof"`
}

type KeyRange_GreaterOrEqual struct {
	// Specify if we want to include given key
	GreaterOrEqual *Ydb.TypedValue `protobuf:"bytes,2,opt,name=greater_or_equal,json=greaterOrEqual,proto3,oneof"`
}

func (*KeyRange_Greater) isKeyRange_FromBound() {}

func (*KeyRange_GreaterOrEqual) isKeyRange_FromBound() {}

type isKeyRange_ToBound interface {
	isKeyRange_ToBound()
}

type KeyRange_Less struct {
	// Specify if we don't want to include given key
	Less *Ydb.TypedValue `protobuf:"bytes,3,opt,name=less,proto3,oneof"`
}

type KeyRange_LessOrEqual struct {
	// Specify if we want to include given key
	LessOrEqual *Ydb.TypedValue `protobuf:"bytes,4,opt,name=less_or_equal,json=lessOrEqual,proto3,oneof"`
}

func (*KeyRange_Less) isKeyRange_ToBound() {}

func (*KeyRange_LessOrEqual) isKeyRange_ToBound() {}

// Request to read table (without SQL)
type ReadTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Path to table to read
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Primary key range to read
	KeyRange *KeyRange `protobuf:"bytes,3,opt,name=key_range,json=keyRange,proto3" json:"key_range,omitempty"`
	// Output columns
	Columns []string `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	// Require ordered reading
	Ordered bool `protobuf:"varint,5,opt,name=ordered,proto3" json:"ordered,omitempty"`
	// Limits row count to read
	RowLimit uint64 `protobuf:"varint,6,opt,name=row_limit,json=rowLimit,proto3" json:"row_limit,omitempty"`
	// Use a server-side snapshot
	UseSnapshot Ydb.FeatureFlag_Status `protobuf:"varint,7,opt,name=use_snapshot,json=useSnapshot,proto3,enum=Ydb.FeatureFlag_Status" json:"use_snapshot,omitempty"`
}

func (x *ReadTableRequest) Reset() {
	*x = ReadTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTableRequest) ProtoMessage() {}

func (x *ReadTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTableRequest.ProtoReflect.Descriptor instead.
func (*ReadTableRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{94}
}

func (x *ReadTableRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ReadTableRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadTableRequest) GetKeyRange() *KeyRange {
	if x != nil {
		return x.KeyRange
	}
	return nil
}

func (x *ReadTableRequest) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ReadTableRequest) GetOrdered() bool {
	if x != nil {
		return x.Ordered
	}
	return false
}

func (x *ReadTableRequest) GetRowLimit() uint64 {
	if x != nil {
		return x.RowLimit
	}
	return 0
}

func (x *ReadTableRequest) GetUseSnapshot() Ydb.FeatureFlag_Status {
	if x != nil {
		return x.UseSnapshot
	}
	return Ydb.FeatureFlag_Status(0)
}

// ReadTable doesn't use Operation, returns result directly
type ReadTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of request (same as other statuses)
	Status Ydb.StatusIds_StatusCode `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	// Issues
	Issues []*Ydb_Issue.IssueMessage `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	// Read table result
	Result *ReadTableResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ReadTableResponse) Reset() {
	*x = ReadTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTableResponse) ProtoMessage() {}

func (x *ReadTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTableResponse.ProtoReflect.Descriptor instead.
func (*ReadTableResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{95}
}

func (x *ReadTableResponse) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *ReadTableResponse) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ReadTableResponse) GetResult() *ReadTableResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// Result of read table request
type ReadTableResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result set (same as result of sql request)
	ResultSet *Ydb.ResultSet `protobuf:"bytes,1,opt,name=result_set,json=resultSet,proto3" json:"result_set,omitempty"`
}

func (x *ReadTableResult) Reset() {
	*x = ReadTableResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTableResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTableResult) ProtoMessage() {}

func (x *ReadTableResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTableResult.ProtoReflect.Descriptor instead.
func (*ReadTableResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{96}
}

func (x *ReadTableResult) GetResultSet() *Ydb.ResultSet {
	if x != nil {
		return x.ResultSet
	}
	return nil
}

type BulkUpsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// "rows" parameter must be a list of structs where each stuct represents one row.
	// It must contain all key columns but not necessarily all non-key columns.
	// Similar to UPSERT statement only values of specified columns will be updated.
	Rows            *Ydb.TypedValue                 `protobuf:"bytes,2,opt,name=rows,proto3" json:"rows,omitempty"`
	OperationParams *Ydb_Operations.OperationParams `protobuf:"bytes,3,opt,name=operation_params,json=operationParams,proto3" json:"operation_params,omitempty"`
}

func (x *BulkUpsertRequest) Reset() {
	*x = BulkUpsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpsertRequest) ProtoMessage() {}

func (x *BulkUpsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpsertRequest.ProtoReflect.Descriptor instead.
func (*BulkUpsertRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{97}
}

func (x *BulkUpsertRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *BulkUpsertRequest) GetRows() *Ydb.TypedValue {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *BulkUpsertRequest) GetOperationParams() *Ydb_Operations.OperationParams {
	if x != nil {
		return x.OperationParams
	}
	return nil
}

type BulkUpsertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation *Ydb_Operations.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *BulkUpsertResponse) Reset() {
	*x = BulkUpsertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpsertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpsertResponse) ProtoMessage() {}

func (x *BulkUpsertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpsertResponse.ProtoReflect.Descriptor instead.
func (*BulkUpsertResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{98}
}

func (x *BulkUpsertResponse) GetOperation() *Ydb_Operations.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

type BulkUpsertResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BulkUpsertResult) Reset() {
	*x = BulkUpsertResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkUpsertResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkUpsertResult) ProtoMessage() {}

func (x *BulkUpsertResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkUpsertResult.ProtoReflect.Descriptor instead.
func (*BulkUpsertResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{99}
}

type ExecuteScanQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        *Query                       `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Parameters   map[string]*Ydb.TypedValue   `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mode         ExecuteScanQueryRequest_Mode `protobuf:"varint,6,opt,name=mode,proto3,enum=Ydb.Table.ExecuteScanQueryRequest_Mode" json:"mode,omitempty"`
	CollectStats QueryStatsCollection_Mode    `protobuf:"varint,8,opt,name=collect_stats,json=collectStats,proto3,enum=Ydb.Table.QueryStatsCollection_Mode" json:"collect_stats,omitempty"`
}

func (x *ExecuteScanQueryRequest) Reset() {
	*x = ExecuteScanQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteScanQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteScanQueryRequest) ProtoMessage() {}

func (x *ExecuteScanQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteScanQueryRequest.ProtoReflect.Descriptor instead.
func (*ExecuteScanQueryRequest) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{100}
}

func (x *ExecuteScanQueryRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExecuteScanQueryRequest) GetParameters() map[string]*Ydb.TypedValue {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ExecuteScanQueryRequest) GetMode() ExecuteScanQueryRequest_Mode {
	if x != nil {
		return x.Mode
	}
	return ExecuteScanQueryRequest_MODE_UNSPECIFIED
}

func (x *ExecuteScanQueryRequest) GetCollectStats() QueryStatsCollection_Mode {
	if x != nil {
		return x.CollectStats
	}
	return QueryStatsCollection_STATS_COLLECTION_UNSPECIFIED
}

type ExecuteScanQueryPartialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status Ydb.StatusIds_StatusCode       `protobuf:"varint,1,opt,name=status,proto3,enum=Ydb.StatusIds_StatusCode" json:"status,omitempty"`
	Issues []*Ydb_Issue.IssueMessage      `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
	Result *ExecuteScanQueryPartialResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExecuteScanQueryPartialResponse) Reset() {
	*x = ExecuteScanQueryPartialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteScanQueryPartialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteScanQueryPartialResponse) ProtoMessage() {}

func (x *ExecuteScanQueryPartialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteScanQueryPartialResponse.ProtoReflect.Descriptor instead.
func (*ExecuteScanQueryPartialResponse) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{101}
}

func (x *ExecuteScanQueryPartialResponse) GetStatus() Ydb.StatusIds_StatusCode {
	if x != nil {
		return x.Status
	}
	return Ydb.StatusIds_StatusCode(0)
}

func (x *ExecuteScanQueryPartialResponse) GetIssues() []*Ydb_Issue.IssueMessage {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ExecuteScanQueryPartialResponse) GetResult() *ExecuteScanQueryPartialResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type ExecuteScanQueryPartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultSet  *Ydb.ResultSet             `protobuf:"bytes,1,opt,name=result_set,json=resultSet,proto3" json:"result_set,omitempty"`
	QueryStats *Ydb_TableStats.QueryStats `protobuf:"bytes,6,opt,name=query_stats,json=queryStats,proto3" json:"query_stats,omitempty"`
}

func (x *ExecuteScanQueryPartialResult) Reset() {
	*x = ExecuteScanQueryPartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_ydb_table_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteScanQueryPartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteScanQueryPartialResult) ProtoMessage() {}

func (x *ExecuteScanQueryPartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_ydb_table_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteScanQueryPartialResult.ProtoReflect.Descriptor instead.
func (*ExecuteScanQueryPartialResult) Descriptor() ([]byte, []int) {
	return file_protos_ydb_table_proto_rawDescGZIP(), []int{102}
}

func (x *ExecuteScanQueryPartialResult) GetResultSet() *Ydb.ResultSet {
	if x != nil {
		return x.ResultSet
	}
	return nil
}

func (x *ExecuteScanQueryPartialResult) GetQueryStats() *Ydb_TableStats.QueryStats {
	if x != nil {
		return x.QueryStats
	}
	return nil
}

var File_protos_ydb_table_proto protoreflect.FileDescriptor

var file_protos_ydb_table_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x79, 0x64, 0x62, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x1b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x79, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x79, 0x64, 0x62, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x79, 0x64, 0x62,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x79, 0x64, 0x62, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x79, 0x64, 0x62, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x79, 0x64, 0x62, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x79, 0x64, 0x62, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x62, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x50, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x50, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x0d, 0x0a, 0x0b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xfa, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3b, 0x0a,
	0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4b, 0x0a, 0x12, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x4b, 0x0a, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00, 0x52, 0x10, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x22, 0x47, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x08, 0x22, 0x58, 0x0a, 0x15, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xac,
	0x01, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x23, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x22, 0xf1, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x73,
	0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12,
	0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x3d, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x46,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x22, 0xe2, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0x3d, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x22, 0x33, 0x0a, 0x10, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x48, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xbe, 0x02, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x42, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x6f, 0x77, 0x73,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xa1, 0x03, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x11, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x12,
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x66,
	0x6f, 0x72, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a,
	0x13, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x76, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54,
	0x4f, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x03, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x32, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x1c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x40, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdf, 0x03, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x57, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x22, 0x6f, 0x0a, 0x1a, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0xba, 0x02, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x55, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x6e,
	0x63, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x72, 0x0a, 0x04, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x04, 0x22, 0xcb,
	0x01, 0x0a, 0x0b, 0x54, 0x74, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x61, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52,
	0x13, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x02, 0x0a,
	0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x44, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x30, 0x12, 0x44, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x31, 0x12, 0x32, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0x49, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x0c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x22, 0x55, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x5a, 0x34, 0x10, 0x02, 0x22, 0xc8, 0x02, 0x0a, 0x14, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62, 0x12, 0x49, 0x0a, 0x14, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x4c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x06, 0x22, 0x5c, 0x0a, 0x16, 0x41, 0x7a, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x77, 0x0a, 0x17, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5c, 0x0a,
	0x19, 0x61, 0x7a, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x7a, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x16, 0x61, 0x7a, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x7a, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x16, 0x70, 0x65, 0x72, 0x41,
	0x7a, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x7a, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x16, 0x61, 0x6e, 0x79, 0x41, 0x7a, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x22, 0xdd, 0x08, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x0c, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x54, 0x74, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x74, 0x74,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x66, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x17, 0xaa, 0xe6, 0x2a, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x08,
	0x01, 0x10, 0x64, 0xa2, 0xe6, 0x2a, 0x07, 0x0a, 0x05, 0x08, 0x01, 0x10, 0x80, 0x20, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x12, 0x75, 0x6e, 0x69, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x54, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x6b,
	0x65, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x6b, 0x65, 0x79, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x55,
	0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x14, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x4c, 0x0a, 0x11,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x09, 0x0a, 0x11, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x4a,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x74,
	0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x74, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x54,
	0x74, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x0f, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x36, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x61, 0x64,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x47, 0x0a,
	0x13, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x52, 0x11, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x15, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x13,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x13, 0xaa, 0xe6, 0x2a, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x08, 0x01, 0x10, 0x64, 0xa2, 0xe6,
	0x2a, 0x03, 0x18, 0x80, 0x20, 0x52, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5f, 0x0a, 0x1b, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x19, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x14, 0x73,
	0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x11, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x1a, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x17, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x74, 0x6c, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x4c, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7e,
	0x0a, 0x0d, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6f, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0xb0,
	0x01, 0x0a, 0x11, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x22, 0x4d, 0x0a, 0x12, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x02, 0x0a, 0x14, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x4b, 0x65, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x22, 0x50, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x07, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x04,
	0x73, 0x65, 0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x73,
	0x65, 0x6c, 0x66, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x3a, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x74, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x0b, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x45, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x41,
	0x0a, 0x10, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x55, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x14, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x3f, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x08, 0x79, 0x71, 0x6c, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x79, 0x71, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x1a,
	0x0a, 0x18, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x92, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5d, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52,
	0x15, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x15, 0x0a, 0x05, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x78, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x42, 0x0d, 0x0a, 0x0b,
	0x74, 0x78, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x36, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x22, 0x0a, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x49, 0x6e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x22, 0xa4, 0x04, 0x0a, 0x17, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x09, 0x74, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x26, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a,
	0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a,
	0x4e, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x53, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x79, 0x71, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x71, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x55, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x21, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x54, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x4d, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65,
	0x74, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x74, 0x78, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x33, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x79, 0x71, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x79, 0x71, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x53, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x12, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x9f, 0x01,
	0x0a, 0x17, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x79, 0x71, 0x6c, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x71, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x53, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x4d, 0x0a, 0x14, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a, 0x10, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x4c, 0x0a, 0x11, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x02, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x74, 0x78, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x53, 0x0a, 0x18, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x16, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06,
	0x74, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xe5, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x54,
	0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3b, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x9c, 0x01, 0x0a,
	0x1a, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12,
	0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x56, 0x0a, 0x1b, 0x52,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x07,
	0x0a, 0x17, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x42, 0x0a, 0x1d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x3c, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x1b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x57, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x05, 0x0a,
	0x1a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x15, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x62,
	0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x68, 0x0a, 0x1b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x19, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x18,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x65, 0x0a,
	0x1a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x22,
	0xec, 0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x10, 0x67, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4f,
	0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a,
	0x0d, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x45,
	0x71, 0x75, 0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x84,
	0x02, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08,
	0x6b, 0x65, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x72, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f,
	0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x40, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x59, 0x64, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x65, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x4d, 0x0a, 0x12, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x12, 0x0a, 0x10, 0x42, 0x75, 0x6c, 0x6b, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc4, 0x03, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x59, 0x64,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x4e, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x59, 0x64, 0x62, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xc7, 0x01, 0x0a,
	0x1f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x59, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x59,
	0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x42, 0x55, 0x0a, 0x14,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x79, 0x64, 0x62, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x59, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x79, 0x64, 0x62, 0x2d, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x59, 0x64, 0x62, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_ydb_table_proto_rawDescOnce sync.Once
	file_protos_ydb_table_proto_rawDescData = file_protos_ydb_table_proto_rawDesc
)

func file_protos_ydb_table_proto_rawDescGZIP() []byte {
	file_protos_ydb_table_proto_rawDescOnce.Do(func() {
		file_protos_ydb_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_ydb_table_proto_rawDescData)
	})
	return file_protos_ydb_table_proto_rawDescData
}

var file_protos_ydb_table_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_protos_ydb_table_proto_msgTypes = make([]protoimpl.MessageInfo, 117)
var file_protos_ydb_table_proto_goTypes = []interface{}{
	(TableIndexDescription_Status)(0),              // 0: Ydb.Table.TableIndexDescription.Status
	(IndexBuildState_State)(0),                     // 1: Ydb.Table.IndexBuildState.State
	(ColumnFamilyPolicy_Compression)(0),            // 2: Ydb.Table.ColumnFamilyPolicy.Compression
	(PartitioningPolicy_AutoPartitioningPolicy)(0), // 3: Ydb.Table.PartitioningPolicy.AutoPartitioningPolicy
	(ValueSinceUnixEpochModeSettings_Unit)(0),      // 4: Ydb.Table.ValueSinceUnixEpochModeSettings.Unit
	(ColumnFamily_Compression)(0),                  // 5: Ydb.Table.ColumnFamily.Compression
	(QueryStatsCollection_Mode)(0),                 // 6: Ydb.Table.QueryStatsCollection.Mode
	(KeepAliveResult_SessionStatus)(0),             // 7: Ydb.Table.KeepAliveResult.SessionStatus
	(ExecuteScanQueryRequest_Mode)(0),              // 8: Ydb.Table.ExecuteScanQueryRequest.Mode
	(*CreateSessionRequest)(nil),                   // 9: Ydb.Table.CreateSessionRequest
	(*CreateSessionResponse)(nil),                  // 10: Ydb.Table.CreateSessionResponse
	(*CreateSessionResult)(nil),                    // 11: Ydb.Table.CreateSessionResult
	(*DeleteSessionRequest)(nil),                   // 12: Ydb.Table.DeleteSessionRequest
	(*DeleteSessionResponse)(nil),                  // 13: Ydb.Table.DeleteSessionResponse
	(*GlobalIndex)(nil),                            // 14: Ydb.Table.GlobalIndex
	(*GlobalAsyncIndex)(nil),                       // 15: Ydb.Table.GlobalAsyncIndex
	(*TableIndex)(nil),                             // 16: Ydb.Table.TableIndex
	(*TableIndexDescription)(nil),                  // 17: Ydb.Table.TableIndexDescription
	(*IndexBuildState)(nil),                        // 18: Ydb.Table.IndexBuildState
	(*IndexBuildDescription)(nil),                  // 19: Ydb.Table.IndexBuildDescription
	(*IndexBuildMetadata)(nil),                     // 20: Ydb.Table.IndexBuildMetadata
	(*StoragePool)(nil),                            // 21: Ydb.Table.StoragePool
	(*StoragePolicy)(nil),                          // 22: Ydb.Table.StoragePolicy
	(*ColumnFamilyPolicy)(nil),                     // 23: Ydb.Table.ColumnFamilyPolicy
	(*CompactionPolicy)(nil),                       // 24: Ydb.Table.CompactionPolicy
	(*ExplicitPartitions)(nil),                     // 25: Ydb.Table.ExplicitPartitions
	(*PartitionStats)(nil),                         // 26: Ydb.Table.PartitionStats
	(*TableStats)(nil),                             // 27: Ydb.Table.TableStats
	(*PartitioningPolicy)(nil),                     // 28: Ydb.Table.PartitioningPolicy
	(*ExecutionPolicy)(nil),                        // 29: Ydb.Table.ExecutionPolicy
	(*ReplicationPolicy)(nil),                      // 30: Ydb.Table.ReplicationPolicy
	(*CachingPolicy)(nil),                          // 31: Ydb.Table.CachingPolicy
	(*TableProfile)(nil),                           // 32: Ydb.Table.TableProfile
	(*ColumnMeta)(nil),                             // 33: Ydb.Table.ColumnMeta
	(*DateTypeColumnModeSettings)(nil),             // 34: Ydb.Table.DateTypeColumnModeSettings
	(*ValueSinceUnixEpochModeSettings)(nil),        // 35: Ydb.Table.ValueSinceUnixEpochModeSettings
	(*TtlSettings)(nil),                            // 36: Ydb.Table.TtlSettings
	(*StorageSettings)(nil),                        // 37: Ydb.Table.StorageSettings
	(*ColumnFamily)(nil),                           // 38: Ydb.Table.ColumnFamily
	(*PartitioningSettings)(nil),                   // 39: Ydb.Table.PartitioningSettings
	(*AzReadReplicasSettings)(nil),                 // 40: Ydb.Table.AzReadReplicasSettings
	(*ClusterReplicasSettings)(nil),                // 41: Ydb.Table.ClusterReplicasSettings
	(*ReadReplicasSettings)(nil),                   // 42: Ydb.Table.ReadReplicasSettings
	(*CreateTableRequest)(nil),                     // 43: Ydb.Table.CreateTableRequest
	(*CreateTableResponse)(nil),                    // 44: Ydb.Table.CreateTableResponse
	(*DropTableRequest)(nil),                       // 45: Ydb.Table.DropTableRequest
	(*DropTableResponse)(nil),                      // 46: Ydb.Table.DropTableResponse
	(*AlterTableRequest)(nil),                      // 47: Ydb.Table.AlterTableRequest
	(*AlterTableResponse)(nil),                     // 48: Ydb.Table.AlterTableResponse
	(*CopyTableRequest)(nil),                       // 49: Ydb.Table.CopyTableRequest
	(*CopyTableResponse)(nil),                      // 50: Ydb.Table.CopyTableResponse
	(*CopyTableItem)(nil),                          // 51: Ydb.Table.CopyTableItem
	(*CopyTablesRequest)(nil),                      // 52: Ydb.Table.CopyTablesRequest
	(*CopyTablesResponse)(nil),                     // 53: Ydb.Table.CopyTablesResponse
	(*RenameTableItem)(nil),                        // 54: Ydb.Table.RenameTableItem
	(*RenameTablesRequest)(nil),                    // 55: Ydb.Table.RenameTablesRequest
	(*RenameTablesResponse)(nil),                   // 56: Ydb.Table.RenameTablesResponse
	(*DescribeTableRequest)(nil),                   // 57: Ydb.Table.DescribeTableRequest
	(*DescribeTableResponse)(nil),                  // 58: Ydb.Table.DescribeTableResponse
	(*DescribeTableResult)(nil),                    // 59: Ydb.Table.DescribeTableResult
	(*Query)(nil),                                  // 60: Ydb.Table.Query
	(*SerializableModeSettings)(nil),               // 61: Ydb.Table.SerializableModeSettings
	(*OnlineModeSettings)(nil),                     // 62: Ydb.Table.OnlineModeSettings
	(*StaleModeSettings)(nil),                      // 63: Ydb.Table.StaleModeSettings
	(*TransactionSettings)(nil),                    // 64: Ydb.Table.TransactionSettings
	(*TransactionControl)(nil),                     // 65: Ydb.Table.TransactionControl
	(*QueryCachePolicy)(nil),                       // 66: Ydb.Table.QueryCachePolicy
	(*QueryStatsCollection)(nil),                   // 67: Ydb.Table.QueryStatsCollection
	(*ExecuteDataQueryRequest)(nil),                // 68: Ydb.Table.ExecuteDataQueryRequest
	(*ExecuteDataQueryResponse)(nil),               // 69: Ydb.Table.ExecuteDataQueryResponse
	(*ExecuteSchemeQueryRequest)(nil),              // 70: Ydb.Table.ExecuteSchemeQueryRequest
	(*ExecuteSchemeQueryResponse)(nil),             // 71: Ydb.Table.ExecuteSchemeQueryResponse
	(*TransactionMeta)(nil),                        // 72: Ydb.Table.TransactionMeta
	(*QueryMeta)(nil),                              // 73: Ydb.Table.QueryMeta
	(*ExecuteQueryResult)(nil),                     // 74: Ydb.Table.ExecuteQueryResult
	(*ExplainDataQueryRequest)(nil),                // 75: Ydb.Table.ExplainDataQueryRequest
	(*ExplainDataQueryResponse)(nil),               // 76: Ydb.Table.ExplainDataQueryResponse
	(*ExplainQueryResult)(nil),                     // 77: Ydb.Table.ExplainQueryResult
	(*PrepareDataQueryRequest)(nil),                // 78: Ydb.Table.PrepareDataQueryRequest
	(*PrepareDataQueryResponse)(nil),               // 79: Ydb.Table.PrepareDataQueryResponse
	(*PrepareQueryResult)(nil),                     // 80: Ydb.Table.PrepareQueryResult
	(*KeepAliveRequest)(nil),                       // 81: Ydb.Table.KeepAliveRequest
	(*KeepAliveResponse)(nil),                      // 82: Ydb.Table.KeepAliveResponse
	(*KeepAliveResult)(nil),                        // 83: Ydb.Table.KeepAliveResult
	(*BeginTransactionRequest)(nil),                // 84: Ydb.Table.BeginTransactionRequest
	(*BeginTransactionResponse)(nil),               // 85: Ydb.Table.BeginTransactionResponse
	(*BeginTransactionResult)(nil),                 // 86: Ydb.Table.BeginTransactionResult
	(*CommitTransactionRequest)(nil),               // 87: Ydb.Table.CommitTransactionRequest
	(*CommitTransactionResponse)(nil),              // 88: Ydb.Table.CommitTransactionResponse
	(*CommitTransactionResult)(nil),                // 89: Ydb.Table.CommitTransactionResult
	(*RollbackTransactionRequest)(nil),             // 90: Ydb.Table.RollbackTransactionRequest
	(*RollbackTransactionResponse)(nil),            // 91: Ydb.Table.RollbackTransactionResponse
	(*StoragePolicyDescription)(nil),               // 92: Ydb.Table.StoragePolicyDescription
	(*CompactionPolicyDescription)(nil),            // 93: Ydb.Table.CompactionPolicyDescription
	(*PartitioningPolicyDescription)(nil),          // 94: Ydb.Table.PartitioningPolicyDescription
	(*ExecutionPolicyDescription)(nil),             // 95: Ydb.Table.ExecutionPolicyDescription
	(*ReplicationPolicyDescription)(nil),           // 96: Ydb.Table.ReplicationPolicyDescription
	(*CachingPolicyDescription)(nil),               // 97: Ydb.Table.CachingPolicyDescription
	(*TableProfileDescription)(nil),                // 98: Ydb.Table.TableProfileDescription
	(*DescribeTableOptionsRequest)(nil),            // 99: Ydb.Table.DescribeTableOptionsRequest
	(*DescribeTableOptionsResponse)(nil),           // 100: Ydb.Table.DescribeTableOptionsResponse
	(*DescribeTableOptionsResult)(nil),             // 101: Ydb.Table.DescribeTableOptionsResult
	(*KeyRange)(nil),                               // 102: Ydb.Table.KeyRange
	(*ReadTableRequest)(nil),                       // 103: Ydb.Table.ReadTableRequest
	(*ReadTableResponse)(nil),                      // 104: Ydb.Table.ReadTableResponse
	(*ReadTableResult)(nil),                        // 105: Ydb.Table.ReadTableResult
	(*BulkUpsertRequest)(nil),                      // 106: Ydb.Table.BulkUpsertRequest
	(*BulkUpsertResponse)(nil),                     // 107: Ydb.Table.BulkUpsertResponse
	(*BulkUpsertResult)(nil),                       // 108: Ydb.Table.BulkUpsertResult
	(*ExecuteScanQueryRequest)(nil),                // 109: Ydb.Table.ExecuteScanQueryRequest
	(*ExecuteScanQueryPartialResponse)(nil),        // 110: Ydb.Table.ExecuteScanQueryPartialResponse
	(*ExecuteScanQueryPartialResult)(nil),          // 111: Ydb.Table.ExecuteScanQueryPartialResult
	nil,                                            // 112: Ydb.Table.CreateTableRequest.AttributesEntry
	nil,                                            // 113: Ydb.Table.AlterTableRequest.AlterAttributesEntry
	nil,                                            // 114: Ydb.Table.DescribeTableResult.AttributesEntry
	nil,                                            // 115: Ydb.Table.ExecuteDataQueryRequest.ParametersEntry
	nil,                                            // 116: Ydb.Table.QueryMeta.ParametersTypesEntry
	nil,                                            // 117: Ydb.Table.PrepareQueryResult.ParametersTypesEntry
	nil,                                            // 118: Ydb.Table.StoragePolicyDescription.LabelsEntry
	nil,                                            // 119: Ydb.Table.CompactionPolicyDescription.LabelsEntry
	nil,                                            // 120: Ydb.Table.PartitioningPolicyDescription.LabelsEntry
	nil,                                            // 121: Ydb.Table.ExecutionPolicyDescription.LabelsEntry
	nil,                                            // 122: Ydb.Table.ReplicationPolicyDescription.LabelsEntry
	nil,                                            // 123: Ydb.Table.CachingPolicyDescription.LabelsEntry
	nil,                                            // 124: Ydb.Table.TableProfileDescription.LabelsEntry
	nil,                                            // 125: Ydb.Table.ExecuteScanQueryRequest.ParametersEntry
	(*Ydb_Operations.OperationParams)(nil),         // 126: Ydb.Operations.OperationParams
	(*Ydb_Operations.Operation)(nil),               // 127: Ydb.Operations.Operation
	(Ydb.FeatureFlag_Status)(0),                    // 128: Ydb.FeatureFlag.Status
	(*Ydb.TypedValue)(nil),                         // 129: Ydb.TypedValue
	(*timestamppb.Timestamp)(nil),                  // 130: google.protobuf.Timestamp
	(*Ydb.Type)(nil),                               // 131: Ydb.Type
	(*emptypb.Empty)(nil),                          // 132: google.protobuf.Empty
	(*Ydb_Scheme.Entry)(nil),                       // 133: Ydb.Scheme.Entry
	(*Ydb.ResultSet)(nil),                          // 134: Ydb.ResultSet
	(*Ydb_TableStats.QueryStats)(nil),              // 135: Ydb.TableStats.QueryStats
	(Ydb.StatusIds_StatusCode)(0),                  // 136: Ydb.StatusIds.StatusCode
	(*Ydb_Issue.IssueMessage)(nil),                 // 137: Ydb.Issue.IssueMessage
}
var file_protos_ydb_table_proto_depIdxs = []int32{
	126, // 0: Ydb.Table.CreateSessionRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 1: Ydb.Table.CreateSessionResponse.operation:type_name -> Ydb.Operations.Operation
	126, // 2: Ydb.Table.DeleteSessionRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 3: Ydb.Table.DeleteSessionResponse.operation:type_name -> Ydb.Operations.Operation
	14,  // 4: Ydb.Table.TableIndex.global_index:type_name -> Ydb.Table.GlobalIndex
	15,  // 5: Ydb.Table.TableIndex.global_async_index:type_name -> Ydb.Table.GlobalAsyncIndex
	14,  // 6: Ydb.Table.TableIndexDescription.global_index:type_name -> Ydb.Table.GlobalIndex
	15,  // 7: Ydb.Table.TableIndexDescription.global_async_index:type_name -> Ydb.Table.GlobalAsyncIndex
	0,   // 8: Ydb.Table.TableIndexDescription.status:type_name -> Ydb.Table.TableIndexDescription.Status
	16,  // 9: Ydb.Table.IndexBuildDescription.index:type_name -> Ydb.Table.TableIndex
	19,  // 10: Ydb.Table.IndexBuildMetadata.description:type_name -> Ydb.Table.IndexBuildDescription
	1,   // 11: Ydb.Table.IndexBuildMetadata.state:type_name -> Ydb.Table.IndexBuildState.State
	21,  // 12: Ydb.Table.StoragePolicy.syslog:type_name -> Ydb.Table.StoragePool
	21,  // 13: Ydb.Table.StoragePolicy.log:type_name -> Ydb.Table.StoragePool
	21,  // 14: Ydb.Table.StoragePolicy.data:type_name -> Ydb.Table.StoragePool
	21,  // 15: Ydb.Table.StoragePolicy.external:type_name -> Ydb.Table.StoragePool
	128, // 16: Ydb.Table.StoragePolicy.keep_in_memory:type_name -> Ydb.FeatureFlag.Status
	23,  // 17: Ydb.Table.StoragePolicy.column_families:type_name -> Ydb.Table.ColumnFamilyPolicy
	21,  // 18: Ydb.Table.ColumnFamilyPolicy.data:type_name -> Ydb.Table.StoragePool
	21,  // 19: Ydb.Table.ColumnFamilyPolicy.external:type_name -> Ydb.Table.StoragePool
	128, // 20: Ydb.Table.ColumnFamilyPolicy.keep_in_memory:type_name -> Ydb.FeatureFlag.Status
	2,   // 21: Ydb.Table.ColumnFamilyPolicy.compression:type_name -> Ydb.Table.ColumnFamilyPolicy.Compression
	129, // 22: Ydb.Table.ExplicitPartitions.split_points:type_name -> Ydb.TypedValue
	26,  // 23: Ydb.Table.TableStats.partition_stats:type_name -> Ydb.Table.PartitionStats
	130, // 24: Ydb.Table.TableStats.creation_time:type_name -> google.protobuf.Timestamp
	130, // 25: Ydb.Table.TableStats.modification_time:type_name -> google.protobuf.Timestamp
	3,   // 26: Ydb.Table.PartitioningPolicy.auto_partitioning:type_name -> Ydb.Table.PartitioningPolicy.AutoPartitioningPolicy
	25,  // 27: Ydb.Table.PartitioningPolicy.explicit_partitions:type_name -> Ydb.Table.ExplicitPartitions
	128, // 28: Ydb.Table.ReplicationPolicy.create_per_availability_zone:type_name -> Ydb.FeatureFlag.Status
	128, // 29: Ydb.Table.ReplicationPolicy.allow_promotion:type_name -> Ydb.FeatureFlag.Status
	22,  // 30: Ydb.Table.TableProfile.storage_policy:type_name -> Ydb.Table.StoragePolicy
	24,  // 31: Ydb.Table.TableProfile.compaction_policy:type_name -> Ydb.Table.CompactionPolicy
	28,  // 32: Ydb.Table.TableProfile.partitioning_policy:type_name -> Ydb.Table.PartitioningPolicy
	29,  // 33: Ydb.Table.TableProfile.execution_policy:type_name -> Ydb.Table.ExecutionPolicy
	30,  // 34: Ydb.Table.TableProfile.replication_policy:type_name -> Ydb.Table.ReplicationPolicy
	31,  // 35: Ydb.Table.TableProfile.caching_policy:type_name -> Ydb.Table.CachingPolicy
	131, // 36: Ydb.Table.ColumnMeta.type:type_name -> Ydb.Type
	4,   // 37: Ydb.Table.ValueSinceUnixEpochModeSettings.column_unit:type_name -> Ydb.Table.ValueSinceUnixEpochModeSettings.Unit
	34,  // 38: Ydb.Table.TtlSettings.date_type_column:type_name -> Ydb.Table.DateTypeColumnModeSettings
	35,  // 39: Ydb.Table.TtlSettings.value_since_unix_epoch:type_name -> Ydb.Table.ValueSinceUnixEpochModeSettings
	21,  // 40: Ydb.Table.StorageSettings.tablet_commit_log0:type_name -> Ydb.Table.StoragePool
	21,  // 41: Ydb.Table.StorageSettings.tablet_commit_log1:type_name -> Ydb.Table.StoragePool
	21,  // 42: Ydb.Table.StorageSettings.external:type_name -> Ydb.Table.StoragePool
	128, // 43: Ydb.Table.StorageSettings.store_external_blobs:type_name -> Ydb.FeatureFlag.Status
	21,  // 44: Ydb.Table.ColumnFamily.data:type_name -> Ydb.Table.StoragePool
	5,   // 45: Ydb.Table.ColumnFamily.compression:type_name -> Ydb.Table.ColumnFamily.Compression
	128, // 46: Ydb.Table.ColumnFamily.keep_in_memory:type_name -> Ydb.FeatureFlag.Status
	128, // 47: Ydb.Table.PartitioningSettings.partitioning_by_size:type_name -> Ydb.FeatureFlag.Status
	128, // 48: Ydb.Table.PartitioningSettings.partitioning_by_load:type_name -> Ydb.FeatureFlag.Status
	40,  // 49: Ydb.Table.ClusterReplicasSettings.az_read_replicas_settings:type_name -> Ydb.Table.AzReadReplicasSettings
	33,  // 50: Ydb.Table.CreateTableRequest.columns:type_name -> Ydb.Table.ColumnMeta
	32,  // 51: Ydb.Table.CreateTableRequest.profile:type_name -> Ydb.Table.TableProfile
	126, // 52: Ydb.Table.CreateTableRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	16,  // 53: Ydb.Table.CreateTableRequest.indexes:type_name -> Ydb.Table.TableIndex
	36,  // 54: Ydb.Table.CreateTableRequest.ttl_settings:type_name -> Ydb.Table.TtlSettings
	37,  // 55: Ydb.Table.CreateTableRequest.storage_settings:type_name -> Ydb.Table.StorageSettings
	38,  // 56: Ydb.Table.CreateTableRequest.column_families:type_name -> Ydb.Table.ColumnFamily
	112, // 57: Ydb.Table.CreateTableRequest.attributes:type_name -> Ydb.Table.CreateTableRequest.AttributesEntry
	25,  // 58: Ydb.Table.CreateTableRequest.partition_at_keys:type_name -> Ydb.Table.ExplicitPartitions
	39,  // 59: Ydb.Table.CreateTableRequest.partitioning_settings:type_name -> Ydb.Table.PartitioningSettings
	128, // 60: Ydb.Table.CreateTableRequest.key_bloom_filter:type_name -> Ydb.FeatureFlag.Status
	42,  // 61: Ydb.Table.CreateTableRequest.read_replicas_settings:type_name -> Ydb.Table.ReadReplicasSettings
	127, // 62: Ydb.Table.CreateTableResponse.operation:type_name -> Ydb.Operations.Operation
	126, // 63: Ydb.Table.DropTableRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 64: Ydb.Table.DropTableResponse.operation:type_name -> Ydb.Operations.Operation
	33,  // 65: Ydb.Table.AlterTableRequest.add_columns:type_name -> Ydb.Table.ColumnMeta
	126, // 66: Ydb.Table.AlterTableRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	33,  // 67: Ydb.Table.AlterTableRequest.alter_columns:type_name -> Ydb.Table.ColumnMeta
	36,  // 68: Ydb.Table.AlterTableRequest.set_ttl_settings:type_name -> Ydb.Table.TtlSettings
	132, // 69: Ydb.Table.AlterTableRequest.drop_ttl_settings:type_name -> google.protobuf.Empty
	16,  // 70: Ydb.Table.AlterTableRequest.add_indexes:type_name -> Ydb.Table.TableIndex
	37,  // 71: Ydb.Table.AlterTableRequest.alter_storage_settings:type_name -> Ydb.Table.StorageSettings
	38,  // 72: Ydb.Table.AlterTableRequest.add_column_families:type_name -> Ydb.Table.ColumnFamily
	38,  // 73: Ydb.Table.AlterTableRequest.alter_column_families:type_name -> Ydb.Table.ColumnFamily
	113, // 74: Ydb.Table.AlterTableRequest.alter_attributes:type_name -> Ydb.Table.AlterTableRequest.AlterAttributesEntry
	39,  // 75: Ydb.Table.AlterTableRequest.alter_partitioning_settings:type_name -> Ydb.Table.PartitioningSettings
	128, // 76: Ydb.Table.AlterTableRequest.set_key_bloom_filter:type_name -> Ydb.FeatureFlag.Status
	42,  // 77: Ydb.Table.AlterTableRequest.set_read_replicas_settings:type_name -> Ydb.Table.ReadReplicasSettings
	127, // 78: Ydb.Table.AlterTableResponse.operation:type_name -> Ydb.Operations.Operation
	126, // 79: Ydb.Table.CopyTableRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 80: Ydb.Table.CopyTableResponse.operation:type_name -> Ydb.Operations.Operation
	126, // 81: Ydb.Table.CopyTablesRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	51,  // 82: Ydb.Table.CopyTablesRequest.tables:type_name -> Ydb.Table.CopyTableItem
	127, // 83: Ydb.Table.CopyTablesResponse.operation:type_name -> Ydb.Operations.Operation
	126, // 84: Ydb.Table.RenameTablesRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	54,  // 85: Ydb.Table.RenameTablesRequest.tables:type_name -> Ydb.Table.RenameTableItem
	127, // 86: Ydb.Table.RenameTablesResponse.operation:type_name -> Ydb.Operations.Operation
	126, // 87: Ydb.Table.DescribeTableRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 88: Ydb.Table.DescribeTableResponse.operation:type_name -> Ydb.Operations.Operation
	133, // 89: Ydb.Table.DescribeTableResult.self:type_name -> Ydb.Scheme.Entry
	33,  // 90: Ydb.Table.DescribeTableResult.columns:type_name -> Ydb.Table.ColumnMeta
	129, // 91: Ydb.Table.DescribeTableResult.shard_key_bounds:type_name -> Ydb.TypedValue
	17,  // 92: Ydb.Table.DescribeTableResult.indexes:type_name -> Ydb.Table.TableIndexDescription
	27,  // 93: Ydb.Table.DescribeTableResult.table_stats:type_name -> Ydb.Table.TableStats
	36,  // 94: Ydb.Table.DescribeTableResult.ttl_settings:type_name -> Ydb.Table.TtlSettings
	37,  // 95: Ydb.Table.DescribeTableResult.storage_settings:type_name -> Ydb.Table.StorageSettings
	38,  // 96: Ydb.Table.DescribeTableResult.column_families:type_name -> Ydb.Table.ColumnFamily
	114, // 97: Ydb.Table.DescribeTableResult.attributes:type_name -> Ydb.Table.DescribeTableResult.AttributesEntry
	39,  // 98: Ydb.Table.DescribeTableResult.partitioning_settings:type_name -> Ydb.Table.PartitioningSettings
	128, // 99: Ydb.Table.DescribeTableResult.key_bloom_filter:type_name -> Ydb.FeatureFlag.Status
	42,  // 100: Ydb.Table.DescribeTableResult.read_replicas_settings:type_name -> Ydb.Table.ReadReplicasSettings
	61,  // 101: Ydb.Table.TransactionSettings.serializable_read_write:type_name -> Ydb.Table.SerializableModeSettings
	62,  // 102: Ydb.Table.TransactionSettings.online_read_only:type_name -> Ydb.Table.OnlineModeSettings
	63,  // 103: Ydb.Table.TransactionSettings.stale_read_only:type_name -> Ydb.Table.StaleModeSettings
	64,  // 104: Ydb.Table.TransactionControl.begin_tx:type_name -> Ydb.Table.TransactionSettings
	65,  // 105: Ydb.Table.ExecuteDataQueryRequest.tx_control:type_name -> Ydb.Table.TransactionControl
	60,  // 106: Ydb.Table.ExecuteDataQueryRequest.query:type_name -> Ydb.Table.Query
	115, // 107: Ydb.Table.ExecuteDataQueryRequest.parameters:type_name -> Ydb.Table.ExecuteDataQueryRequest.ParametersEntry
	66,  // 108: Ydb.Table.ExecuteDataQueryRequest.query_cache_policy:type_name -> Ydb.Table.QueryCachePolicy
	126, // 109: Ydb.Table.ExecuteDataQueryRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	6,   // 110: Ydb.Table.ExecuteDataQueryRequest.collect_stats:type_name -> Ydb.Table.QueryStatsCollection.Mode
	127, // 111: Ydb.Table.ExecuteDataQueryResponse.operation:type_name -> Ydb.Operations.Operation
	126, // 112: Ydb.Table.ExecuteSchemeQueryRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 113: Ydb.Table.ExecuteSchemeQueryResponse.operation:type_name -> Ydb.Operations.Operation
	116, // 114: Ydb.Table.QueryMeta.parameters_types:type_name -> Ydb.Table.QueryMeta.ParametersTypesEntry
	134, // 115: Ydb.Table.ExecuteQueryResult.result_sets:type_name -> Ydb.ResultSet
	72,  // 116: Ydb.Table.ExecuteQueryResult.tx_meta:type_name -> Ydb.Table.TransactionMeta
	73,  // 117: Ydb.Table.ExecuteQueryResult.query_meta:type_name -> Ydb.Table.QueryMeta
	135, // 118: Ydb.Table.ExecuteQueryResult.query_stats:type_name -> Ydb.TableStats.QueryStats
	126, // 119: Ydb.Table.ExplainDataQueryRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 120: Ydb.Table.ExplainDataQueryResponse.operation:type_name -> Ydb.Operations.Operation
	126, // 121: Ydb.Table.PrepareDataQueryRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 122: Ydb.Table.PrepareDataQueryResponse.operation:type_name -> Ydb.Operations.Operation
	117, // 123: Ydb.Table.PrepareQueryResult.parameters_types:type_name -> Ydb.Table.PrepareQueryResult.ParametersTypesEntry
	126, // 124: Ydb.Table.KeepAliveRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 125: Ydb.Table.KeepAliveResponse.operation:type_name -> Ydb.Operations.Operation
	7,   // 126: Ydb.Table.KeepAliveResult.session_status:type_name -> Ydb.Table.KeepAliveResult.SessionStatus
	64,  // 127: Ydb.Table.BeginTransactionRequest.tx_settings:type_name -> Ydb.Table.TransactionSettings
	126, // 128: Ydb.Table.BeginTransactionRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 129: Ydb.Table.BeginTransactionResponse.operation:type_name -> Ydb.Operations.Operation
	72,  // 130: Ydb.Table.BeginTransactionResult.tx_meta:type_name -> Ydb.Table.TransactionMeta
	126, // 131: Ydb.Table.CommitTransactionRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	6,   // 132: Ydb.Table.CommitTransactionRequest.collect_stats:type_name -> Ydb.Table.QueryStatsCollection.Mode
	127, // 133: Ydb.Table.CommitTransactionResponse.operation:type_name -> Ydb.Operations.Operation
	135, // 134: Ydb.Table.CommitTransactionResult.query_stats:type_name -> Ydb.TableStats.QueryStats
	126, // 135: Ydb.Table.RollbackTransactionRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 136: Ydb.Table.RollbackTransactionResponse.operation:type_name -> Ydb.Operations.Operation
	118, // 137: Ydb.Table.StoragePolicyDescription.labels:type_name -> Ydb.Table.StoragePolicyDescription.LabelsEntry
	119, // 138: Ydb.Table.CompactionPolicyDescription.labels:type_name -> Ydb.Table.CompactionPolicyDescription.LabelsEntry
	120, // 139: Ydb.Table.PartitioningPolicyDescription.labels:type_name -> Ydb.Table.PartitioningPolicyDescription.LabelsEntry
	121, // 140: Ydb.Table.ExecutionPolicyDescription.labels:type_name -> Ydb.Table.ExecutionPolicyDescription.LabelsEntry
	122, // 141: Ydb.Table.ReplicationPolicyDescription.labels:type_name -> Ydb.Table.ReplicationPolicyDescription.LabelsEntry
	123, // 142: Ydb.Table.CachingPolicyDescription.labels:type_name -> Ydb.Table.CachingPolicyDescription.LabelsEntry
	124, // 143: Ydb.Table.TableProfileDescription.labels:type_name -> Ydb.Table.TableProfileDescription.LabelsEntry
	126, // 144: Ydb.Table.DescribeTableOptionsRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 145: Ydb.Table.DescribeTableOptionsResponse.operation:type_name -> Ydb.Operations.Operation
	98,  // 146: Ydb.Table.DescribeTableOptionsResult.table_profile_presets:type_name -> Ydb.Table.TableProfileDescription
	92,  // 147: Ydb.Table.DescribeTableOptionsResult.storage_policy_presets:type_name -> Ydb.Table.StoragePolicyDescription
	93,  // 148: Ydb.Table.DescribeTableOptionsResult.compaction_policy_presets:type_name -> Ydb.Table.CompactionPolicyDescription
	94,  // 149: Ydb.Table.DescribeTableOptionsResult.partitioning_policy_presets:type_name -> Ydb.Table.PartitioningPolicyDescription
	95,  // 150: Ydb.Table.DescribeTableOptionsResult.execution_policy_presets:type_name -> Ydb.Table.ExecutionPolicyDescription
	96,  // 151: Ydb.Table.DescribeTableOptionsResult.replication_policy_presets:type_name -> Ydb.Table.ReplicationPolicyDescription
	97,  // 152: Ydb.Table.DescribeTableOptionsResult.caching_policy_presets:type_name -> Ydb.Table.CachingPolicyDescription
	129, // 153: Ydb.Table.KeyRange.greater:type_name -> Ydb.TypedValue
	129, // 154: Ydb.Table.KeyRange.greater_or_equal:type_name -> Ydb.TypedValue
	129, // 155: Ydb.Table.KeyRange.less:type_name -> Ydb.TypedValue
	129, // 156: Ydb.Table.KeyRange.less_or_equal:type_name -> Ydb.TypedValue
	102, // 157: Ydb.Table.ReadTableRequest.key_range:type_name -> Ydb.Table.KeyRange
	128, // 158: Ydb.Table.ReadTableRequest.use_snapshot:type_name -> Ydb.FeatureFlag.Status
	136, // 159: Ydb.Table.ReadTableResponse.status:type_name -> Ydb.StatusIds.StatusCode
	137, // 160: Ydb.Table.ReadTableResponse.issues:type_name -> Ydb.Issue.IssueMessage
	105, // 161: Ydb.Table.ReadTableResponse.result:type_name -> Ydb.Table.ReadTableResult
	134, // 162: Ydb.Table.ReadTableResult.result_set:type_name -> Ydb.ResultSet
	129, // 163: Ydb.Table.BulkUpsertRequest.rows:type_name -> Ydb.TypedValue
	126, // 164: Ydb.Table.BulkUpsertRequest.operation_params:type_name -> Ydb.Operations.OperationParams
	127, // 165: Ydb.Table.BulkUpsertResponse.operation:type_name -> Ydb.Operations.Operation
	60,  // 166: Ydb.Table.ExecuteScanQueryRequest.query:type_name -> Ydb.Table.Query
	125, // 167: Ydb.Table.ExecuteScanQueryRequest.parameters:type_name -> Ydb.Table.ExecuteScanQueryRequest.ParametersEntry
	8,   // 168: Ydb.Table.ExecuteScanQueryRequest.mode:type_name -> Ydb.Table.ExecuteScanQueryRequest.Mode
	6,   // 169: Ydb.Table.ExecuteScanQueryRequest.collect_stats:type_name -> Ydb.Table.QueryStatsCollection.Mode
	136, // 170: Ydb.Table.ExecuteScanQueryPartialResponse.status:type_name -> Ydb.StatusIds.StatusCode
	137, // 171: Ydb.Table.ExecuteScanQueryPartialResponse.issues:type_name -> Ydb.Issue.IssueMessage
	111, // 172: Ydb.Table.ExecuteScanQueryPartialResponse.result:type_name -> Ydb.Table.ExecuteScanQueryPartialResult
	134, // 173: Ydb.Table.ExecuteScanQueryPartialResult.result_set:type_name -> Ydb.ResultSet
	135, // 174: Ydb.Table.ExecuteScanQueryPartialResult.query_stats:type_name -> Ydb.TableStats.QueryStats
	129, // 175: Ydb.Table.ExecuteDataQueryRequest.ParametersEntry.value:type_name -> Ydb.TypedValue
	131, // 176: Ydb.Table.QueryMeta.ParametersTypesEntry.value:type_name -> Ydb.Type
	131, // 177: Ydb.Table.PrepareQueryResult.ParametersTypesEntry.value:type_name -> Ydb.Type
	129, // 178: Ydb.Table.ExecuteScanQueryRequest.ParametersEntry.value:type_name -> Ydb.TypedValue
	179, // [179:179] is the sub-list for method output_type
	179, // [179:179] is the sub-list for method input_type
	179, // [179:179] is the sub-list for extension type_name
	179, // [179:179] is the sub-list for extension extendee
	0,   // [0:179] is the sub-list for field type_name
}

func init() { file_protos_ydb_table_proto_init() }
func file_protos_ydb_table_proto_init() {
	if File_protos_ydb_table_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_ydb_table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalAsyncIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableIndexDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexBuildState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexBuildDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexBuildMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnFamilyPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplicitPartitions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitioningPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTypeColumnModeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueSinceUnixEpochModeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtlSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitioningSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzReadReplicasSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterReplicasSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadReplicasSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyTableItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameTableItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTableResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerializableModeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineModeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaleModeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCachePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatsCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteDataQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteDataQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSchemeQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSchemeQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainDataQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainDataQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareDataQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareDataQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAliveResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginTransactionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitTransactionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoragePolicyDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionPolicyDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitioningPolicyDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionPolicyDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationPolicyDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachingPolicyDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableProfileDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTableOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTableOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTableOptionsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTableResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpsertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkUpsertResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteScanQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteScanQueryPartialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_ydb_table_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteScanQueryPartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_ydb_table_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*TableIndex_GlobalIndex)(nil),
		(*TableIndex_GlobalAsyncIndex)(nil),
	}
	file_protos_ydb_table_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*TableIndexDescription_GlobalIndex)(nil),
		(*TableIndexDescription_GlobalAsyncIndex)(nil),
	}
	file_protos_ydb_table_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*PartitioningPolicy_UniformPartitions)(nil),
		(*PartitioningPolicy_ExplicitPartitions)(nil),
	}
	file_protos_ydb_table_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*TtlSettings_DateTypeColumn)(nil),
		(*TtlSettings_ValueSinceUnixEpoch)(nil),
	}
	file_protos_ydb_table_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*ReadReplicasSettings_PerAzReadReplicasCount)(nil),
		(*ReadReplicasSettings_AnyAzReadReplicasCount)(nil),
	}
	file_protos_ydb_table_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*CreateTableRequest_UniformPartitions)(nil),
		(*CreateTableRequest_PartitionAtKeys)(nil),
	}
	file_protos_ydb_table_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*AlterTableRequest_SetTtlSettings)(nil),
		(*AlterTableRequest_DropTtlSettings)(nil),
	}
	file_protos_ydb_table_proto_msgTypes[51].OneofWrappers = []interface{}{
		(*Query_YqlText)(nil),
		(*Query_Id)(nil),
	}
	file_protos_ydb_table_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*TransactionSettings_SerializableReadWrite)(nil),
		(*TransactionSettings_OnlineReadOnly)(nil),
		(*TransactionSettings_StaleReadOnly)(nil),
	}
	file_protos_ydb_table_proto_msgTypes[56].OneofWrappers = []interface{}{
		(*TransactionControl_TxId)(nil),
		(*TransactionControl_BeginTx)(nil),
	}
	file_protos_ydb_table_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*KeyRange_Greater)(nil),
		(*KeyRange_GreaterOrEqual)(nil),
		(*KeyRange_Less)(nil),
		(*KeyRange_LessOrEqual)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_ydb_table_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   117,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_ydb_table_proto_goTypes,
		DependencyIndexes: file_protos_ydb_table_proto_depIdxs,
		EnumInfos:         file_protos_ydb_table_proto_enumTypes,
		MessageInfos:      file_protos_ydb_table_proto_msgTypes,
	}.Build()
	File_protos_ydb_table_proto = out.File
	file_protos_ydb_table_proto_rawDesc = nil
	file_protos_ydb_table_proto_goTypes = nil
	file_protos_ydb_table_proto_depIdxs = nil
}
