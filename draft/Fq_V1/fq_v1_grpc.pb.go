// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: draft/fq_v1.proto

package Fq_V1

import (
	context "context"
	Fq "github.com/ydb-platform/ydb-go-genproto/draft/protos/Fq"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FederatedQueryService_CreateQuery_FullMethodName        = "/FederatedQuery.V1.FederatedQueryService/CreateQuery"
	FederatedQueryService_ListQueries_FullMethodName        = "/FederatedQuery.V1.FederatedQueryService/ListQueries"
	FederatedQueryService_DescribeQuery_FullMethodName      = "/FederatedQuery.V1.FederatedQueryService/DescribeQuery"
	FederatedQueryService_GetQueryStatus_FullMethodName     = "/FederatedQuery.V1.FederatedQueryService/GetQueryStatus"
	FederatedQueryService_ModifyQuery_FullMethodName        = "/FederatedQuery.V1.FederatedQueryService/ModifyQuery"
	FederatedQueryService_DeleteQuery_FullMethodName        = "/FederatedQuery.V1.FederatedQueryService/DeleteQuery"
	FederatedQueryService_ControlQuery_FullMethodName       = "/FederatedQuery.V1.FederatedQueryService/ControlQuery"
	FederatedQueryService_GetResultData_FullMethodName      = "/FederatedQuery.V1.FederatedQueryService/GetResultData"
	FederatedQueryService_ListJobs_FullMethodName           = "/FederatedQuery.V1.FederatedQueryService/ListJobs"
	FederatedQueryService_DescribeJob_FullMethodName        = "/FederatedQuery.V1.FederatedQueryService/DescribeJob"
	FederatedQueryService_CreateConnection_FullMethodName   = "/FederatedQuery.V1.FederatedQueryService/CreateConnection"
	FederatedQueryService_ListConnections_FullMethodName    = "/FederatedQuery.V1.FederatedQueryService/ListConnections"
	FederatedQueryService_DescribeConnection_FullMethodName = "/FederatedQuery.V1.FederatedQueryService/DescribeConnection"
	FederatedQueryService_ModifyConnection_FullMethodName   = "/FederatedQuery.V1.FederatedQueryService/ModifyConnection"
	FederatedQueryService_DeleteConnection_FullMethodName   = "/FederatedQuery.V1.FederatedQueryService/DeleteConnection"
	FederatedQueryService_TestConnection_FullMethodName     = "/FederatedQuery.V1.FederatedQueryService/TestConnection"
	FederatedQueryService_CreateBinding_FullMethodName      = "/FederatedQuery.V1.FederatedQueryService/CreateBinding"
	FederatedQueryService_ListBindings_FullMethodName       = "/FederatedQuery.V1.FederatedQueryService/ListBindings"
	FederatedQueryService_DescribeBinding_FullMethodName    = "/FederatedQuery.V1.FederatedQueryService/DescribeBinding"
	FederatedQueryService_ModifyBinding_FullMethodName      = "/FederatedQuery.V1.FederatedQueryService/ModifyBinding"
	FederatedQueryService_DeleteBinding_FullMethodName      = "/FederatedQuery.V1.FederatedQueryService/DeleteBinding"
)

// FederatedQueryServiceClient is the client API for FederatedQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FederatedQueryServiceClient interface {
	// Query
	// Query is the text of an SQL request, the results of the last run and the state after the last run (partitions offsets, consumer in YDS)
	// Create a query object with a given SQL
	CreateQuery(ctx context.Context, in *Fq.CreateQueryRequest, opts ...grpc.CallOption) (*Fq.CreateQueryResponse, error)
	// Get a list of brief queries objects
	ListQueries(ctx context.Context, in *Fq.ListQueriesRequest, opts ...grpc.CallOption) (*Fq.ListQueriesResponse, error)
	// Get full information about the object of the query
	DescribeQuery(ctx context.Context, in *Fq.DescribeQueryRequest, opts ...grpc.CallOption) (*Fq.DescribeQueryResponse, error)
	// Get status of the query
	GetQueryStatus(ctx context.Context, in *Fq.GetQueryStatusRequest, opts ...grpc.CallOption) (*Fq.GetQueryStatusResponse, error)
	// Change the attributes of the query (acl, name, ...)
	ModifyQuery(ctx context.Context, in *Fq.ModifyQueryRequest, opts ...grpc.CallOption) (*Fq.ModifyQueryResponse, error)
	// Completely delete the query
	DeleteQuery(ctx context.Context, in *Fq.DeleteQueryRequest, opts ...grpc.CallOption) (*Fq.DeleteQueryResponse, error)
	// Change the state of the query lifecycle
	ControlQuery(ctx context.Context, in *Fq.ControlQueryRequest, opts ...grpc.CallOption) (*Fq.ControlQueryResponse, error)
	// Get a results page
	GetResultData(ctx context.Context, in *Fq.GetResultDataRequest, opts ...grpc.CallOption) (*Fq.GetResultDataResponse, error)
	// Job
	// Job - appears immediately after starting the request and contains the request metadata
	// Get a list of jobs
	ListJobs(ctx context.Context, in *Fq.ListJobsRequest, opts ...grpc.CallOption) (*Fq.ListJobsResponse, error)
	// Get information about the job
	DescribeJob(ctx context.Context, in *Fq.DescribeJobRequest, opts ...grpc.CallOption) (*Fq.DescribeJobResponse, error)
	// Connection
	// Connection - entity that describes connection points. This can be imagined as an analogue of a network address.
	// Create a connection object (ObjectStorage, YDB, YDS, ...)
	CreateConnection(ctx context.Context, in *Fq.CreateConnectionRequest, opts ...grpc.CallOption) (*Fq.CreateConnectionResponse, error)
	// Get a list of connections objects
	ListConnections(ctx context.Context, in *Fq.ListConnectionsRequest, opts ...grpc.CallOption) (*Fq.ListConnectionsResponse, error)
	// Get information about the object of the connection
	DescribeConnection(ctx context.Context, in *Fq.DescribeConnectionRequest, opts ...grpc.CallOption) (*Fq.DescribeConnectionResponse, error)
	// Change the attributes of the connection
	ModifyConnection(ctx context.Context, in *Fq.ModifyConnectionRequest, opts ...grpc.CallOption) (*Fq.ModifyConnectionResponse, error)
	// Completely delete the connection
	DeleteConnection(ctx context.Context, in *Fq.DeleteConnectionRequest, opts ...grpc.CallOption) (*Fq.DeleteConnectionResponse, error)
	// Test the connection (permissions, network, ...)
	TestConnection(ctx context.Context, in *Fq.TestConnectionRequest, opts ...grpc.CallOption) (*Fq.TestConnectionResponse, error)
	// Binding
	// Binding - entity using which a schema is assigned to non-schematic data
	// Create a binding object - bind schema with ObjectStorage object or YDS stream
	CreateBinding(ctx context.Context, in *Fq.CreateBindingRequest, opts ...grpc.CallOption) (*Fq.CreateBindingResponse, error)
	// Get a list of bindings objects
	ListBindings(ctx context.Context, in *Fq.ListBindingsRequest, opts ...grpc.CallOption) (*Fq.ListBindingsResponse, error)
	// Get information about the object of the binding
	DescribeBinding(ctx context.Context, in *Fq.DescribeBindingRequest, opts ...grpc.CallOption) (*Fq.DescribeBindingResponse, error)
	// Change the attributes of the binding
	ModifyBinding(ctx context.Context, in *Fq.ModifyBindingRequest, opts ...grpc.CallOption) (*Fq.ModifyBindingResponse, error)
	// Completely delete the binding
	DeleteBinding(ctx context.Context, in *Fq.DeleteBindingRequest, opts ...grpc.CallOption) (*Fq.DeleteBindingResponse, error)
}

type federatedQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFederatedQueryServiceClient(cc grpc.ClientConnInterface) FederatedQueryServiceClient {
	return &federatedQueryServiceClient{cc}
}

func (c *federatedQueryServiceClient) CreateQuery(ctx context.Context, in *Fq.CreateQueryRequest, opts ...grpc.CallOption) (*Fq.CreateQueryResponse, error) {
	out := new(Fq.CreateQueryResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_CreateQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) ListQueries(ctx context.Context, in *Fq.ListQueriesRequest, opts ...grpc.CallOption) (*Fq.ListQueriesResponse, error) {
	out := new(Fq.ListQueriesResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_ListQueries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) DescribeQuery(ctx context.Context, in *Fq.DescribeQueryRequest, opts ...grpc.CallOption) (*Fq.DescribeQueryResponse, error) {
	out := new(Fq.DescribeQueryResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_DescribeQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) GetQueryStatus(ctx context.Context, in *Fq.GetQueryStatusRequest, opts ...grpc.CallOption) (*Fq.GetQueryStatusResponse, error) {
	out := new(Fq.GetQueryStatusResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_GetQueryStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) ModifyQuery(ctx context.Context, in *Fq.ModifyQueryRequest, opts ...grpc.CallOption) (*Fq.ModifyQueryResponse, error) {
	out := new(Fq.ModifyQueryResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_ModifyQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) DeleteQuery(ctx context.Context, in *Fq.DeleteQueryRequest, opts ...grpc.CallOption) (*Fq.DeleteQueryResponse, error) {
	out := new(Fq.DeleteQueryResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_DeleteQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) ControlQuery(ctx context.Context, in *Fq.ControlQueryRequest, opts ...grpc.CallOption) (*Fq.ControlQueryResponse, error) {
	out := new(Fq.ControlQueryResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_ControlQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) GetResultData(ctx context.Context, in *Fq.GetResultDataRequest, opts ...grpc.CallOption) (*Fq.GetResultDataResponse, error) {
	out := new(Fq.GetResultDataResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_GetResultData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) ListJobs(ctx context.Context, in *Fq.ListJobsRequest, opts ...grpc.CallOption) (*Fq.ListJobsResponse, error) {
	out := new(Fq.ListJobsResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_ListJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) DescribeJob(ctx context.Context, in *Fq.DescribeJobRequest, opts ...grpc.CallOption) (*Fq.DescribeJobResponse, error) {
	out := new(Fq.DescribeJobResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_DescribeJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) CreateConnection(ctx context.Context, in *Fq.CreateConnectionRequest, opts ...grpc.CallOption) (*Fq.CreateConnectionResponse, error) {
	out := new(Fq.CreateConnectionResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_CreateConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) ListConnections(ctx context.Context, in *Fq.ListConnectionsRequest, opts ...grpc.CallOption) (*Fq.ListConnectionsResponse, error) {
	out := new(Fq.ListConnectionsResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_ListConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) DescribeConnection(ctx context.Context, in *Fq.DescribeConnectionRequest, opts ...grpc.CallOption) (*Fq.DescribeConnectionResponse, error) {
	out := new(Fq.DescribeConnectionResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_DescribeConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) ModifyConnection(ctx context.Context, in *Fq.ModifyConnectionRequest, opts ...grpc.CallOption) (*Fq.ModifyConnectionResponse, error) {
	out := new(Fq.ModifyConnectionResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_ModifyConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) DeleteConnection(ctx context.Context, in *Fq.DeleteConnectionRequest, opts ...grpc.CallOption) (*Fq.DeleteConnectionResponse, error) {
	out := new(Fq.DeleteConnectionResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_DeleteConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) TestConnection(ctx context.Context, in *Fq.TestConnectionRequest, opts ...grpc.CallOption) (*Fq.TestConnectionResponse, error) {
	out := new(Fq.TestConnectionResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_TestConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) CreateBinding(ctx context.Context, in *Fq.CreateBindingRequest, opts ...grpc.CallOption) (*Fq.CreateBindingResponse, error) {
	out := new(Fq.CreateBindingResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_CreateBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) ListBindings(ctx context.Context, in *Fq.ListBindingsRequest, opts ...grpc.CallOption) (*Fq.ListBindingsResponse, error) {
	out := new(Fq.ListBindingsResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_ListBindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) DescribeBinding(ctx context.Context, in *Fq.DescribeBindingRequest, opts ...grpc.CallOption) (*Fq.DescribeBindingResponse, error) {
	out := new(Fq.DescribeBindingResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_DescribeBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) ModifyBinding(ctx context.Context, in *Fq.ModifyBindingRequest, opts ...grpc.CallOption) (*Fq.ModifyBindingResponse, error) {
	out := new(Fq.ModifyBindingResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_ModifyBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federatedQueryServiceClient) DeleteBinding(ctx context.Context, in *Fq.DeleteBindingRequest, opts ...grpc.CallOption) (*Fq.DeleteBindingResponse, error) {
	out := new(Fq.DeleteBindingResponse)
	err := c.cc.Invoke(ctx, FederatedQueryService_DeleteBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FederatedQueryServiceServer is the server API for FederatedQueryService service.
// All implementations must embed UnimplementedFederatedQueryServiceServer
// for forward compatibility
type FederatedQueryServiceServer interface {
	// Query
	// Query is the text of an SQL request, the results of the last run and the state after the last run (partitions offsets, consumer in YDS)
	// Create a query object with a given SQL
	CreateQuery(context.Context, *Fq.CreateQueryRequest) (*Fq.CreateQueryResponse, error)
	// Get a list of brief queries objects
	ListQueries(context.Context, *Fq.ListQueriesRequest) (*Fq.ListQueriesResponse, error)
	// Get full information about the object of the query
	DescribeQuery(context.Context, *Fq.DescribeQueryRequest) (*Fq.DescribeQueryResponse, error)
	// Get status of the query
	GetQueryStatus(context.Context, *Fq.GetQueryStatusRequest) (*Fq.GetQueryStatusResponse, error)
	// Change the attributes of the query (acl, name, ...)
	ModifyQuery(context.Context, *Fq.ModifyQueryRequest) (*Fq.ModifyQueryResponse, error)
	// Completely delete the query
	DeleteQuery(context.Context, *Fq.DeleteQueryRequest) (*Fq.DeleteQueryResponse, error)
	// Change the state of the query lifecycle
	ControlQuery(context.Context, *Fq.ControlQueryRequest) (*Fq.ControlQueryResponse, error)
	// Get a results page
	GetResultData(context.Context, *Fq.GetResultDataRequest) (*Fq.GetResultDataResponse, error)
	// Job
	// Job - appears immediately after starting the request and contains the request metadata
	// Get a list of jobs
	ListJobs(context.Context, *Fq.ListJobsRequest) (*Fq.ListJobsResponse, error)
	// Get information about the job
	DescribeJob(context.Context, *Fq.DescribeJobRequest) (*Fq.DescribeJobResponse, error)
	// Connection
	// Connection - entity that describes connection points. This can be imagined as an analogue of a network address.
	// Create a connection object (ObjectStorage, YDB, YDS, ...)
	CreateConnection(context.Context, *Fq.CreateConnectionRequest) (*Fq.CreateConnectionResponse, error)
	// Get a list of connections objects
	ListConnections(context.Context, *Fq.ListConnectionsRequest) (*Fq.ListConnectionsResponse, error)
	// Get information about the object of the connection
	DescribeConnection(context.Context, *Fq.DescribeConnectionRequest) (*Fq.DescribeConnectionResponse, error)
	// Change the attributes of the connection
	ModifyConnection(context.Context, *Fq.ModifyConnectionRequest) (*Fq.ModifyConnectionResponse, error)
	// Completely delete the connection
	DeleteConnection(context.Context, *Fq.DeleteConnectionRequest) (*Fq.DeleteConnectionResponse, error)
	// Test the connection (permissions, network, ...)
	TestConnection(context.Context, *Fq.TestConnectionRequest) (*Fq.TestConnectionResponse, error)
	// Binding
	// Binding - entity using which a schema is assigned to non-schematic data
	// Create a binding object - bind schema with ObjectStorage object or YDS stream
	CreateBinding(context.Context, *Fq.CreateBindingRequest) (*Fq.CreateBindingResponse, error)
	// Get a list of bindings objects
	ListBindings(context.Context, *Fq.ListBindingsRequest) (*Fq.ListBindingsResponse, error)
	// Get information about the object of the binding
	DescribeBinding(context.Context, *Fq.DescribeBindingRequest) (*Fq.DescribeBindingResponse, error)
	// Change the attributes of the binding
	ModifyBinding(context.Context, *Fq.ModifyBindingRequest) (*Fq.ModifyBindingResponse, error)
	// Completely delete the binding
	DeleteBinding(context.Context, *Fq.DeleteBindingRequest) (*Fq.DeleteBindingResponse, error)
	mustEmbedUnimplementedFederatedQueryServiceServer()
}

// UnimplementedFederatedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFederatedQueryServiceServer struct {
}

func (UnimplementedFederatedQueryServiceServer) CreateQuery(context.Context, *Fq.CreateQueryRequest) (*Fq.CreateQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuery not implemented")
}
func (UnimplementedFederatedQueryServiceServer) ListQueries(context.Context, *Fq.ListQueriesRequest) (*Fq.ListQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueries not implemented")
}
func (UnimplementedFederatedQueryServiceServer) DescribeQuery(context.Context, *Fq.DescribeQueryRequest) (*Fq.DescribeQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeQuery not implemented")
}
func (UnimplementedFederatedQueryServiceServer) GetQueryStatus(context.Context, *Fq.GetQueryStatusRequest) (*Fq.GetQueryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryStatus not implemented")
}
func (UnimplementedFederatedQueryServiceServer) ModifyQuery(context.Context, *Fq.ModifyQueryRequest) (*Fq.ModifyQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyQuery not implemented")
}
func (UnimplementedFederatedQueryServiceServer) DeleteQuery(context.Context, *Fq.DeleteQueryRequest) (*Fq.DeleteQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuery not implemented")
}
func (UnimplementedFederatedQueryServiceServer) ControlQuery(context.Context, *Fq.ControlQueryRequest) (*Fq.ControlQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlQuery not implemented")
}
func (UnimplementedFederatedQueryServiceServer) GetResultData(context.Context, *Fq.GetResultDataRequest) (*Fq.GetResultDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResultData not implemented")
}
func (UnimplementedFederatedQueryServiceServer) ListJobs(context.Context, *Fq.ListJobsRequest) (*Fq.ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedFederatedQueryServiceServer) DescribeJob(context.Context, *Fq.DescribeJobRequest) (*Fq.DescribeJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeJob not implemented")
}
func (UnimplementedFederatedQueryServiceServer) CreateConnection(context.Context, *Fq.CreateConnectionRequest) (*Fq.CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedFederatedQueryServiceServer) ListConnections(context.Context, *Fq.ListConnectionsRequest) (*Fq.ListConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnections not implemented")
}
func (UnimplementedFederatedQueryServiceServer) DescribeConnection(context.Context, *Fq.DescribeConnectionRequest) (*Fq.DescribeConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeConnection not implemented")
}
func (UnimplementedFederatedQueryServiceServer) ModifyConnection(context.Context, *Fq.ModifyConnectionRequest) (*Fq.ModifyConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyConnection not implemented")
}
func (UnimplementedFederatedQueryServiceServer) DeleteConnection(context.Context, *Fq.DeleteConnectionRequest) (*Fq.DeleteConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedFederatedQueryServiceServer) TestConnection(context.Context, *Fq.TestConnectionRequest) (*Fq.TestConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (UnimplementedFederatedQueryServiceServer) CreateBinding(context.Context, *Fq.CreateBindingRequest) (*Fq.CreateBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBinding not implemented")
}
func (UnimplementedFederatedQueryServiceServer) ListBindings(context.Context, *Fq.ListBindingsRequest) (*Fq.ListBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBindings not implemented")
}
func (UnimplementedFederatedQueryServiceServer) DescribeBinding(context.Context, *Fq.DescribeBindingRequest) (*Fq.DescribeBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeBinding not implemented")
}
func (UnimplementedFederatedQueryServiceServer) ModifyBinding(context.Context, *Fq.ModifyBindingRequest) (*Fq.ModifyBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyBinding not implemented")
}
func (UnimplementedFederatedQueryServiceServer) DeleteBinding(context.Context, *Fq.DeleteBindingRequest) (*Fq.DeleteBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinding not implemented")
}
func (UnimplementedFederatedQueryServiceServer) mustEmbedUnimplementedFederatedQueryServiceServer() {}

// UnsafeFederatedQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FederatedQueryServiceServer will
// result in compilation errors.
type UnsafeFederatedQueryServiceServer interface {
	mustEmbedUnimplementedFederatedQueryServiceServer()
}

func RegisterFederatedQueryServiceServer(s grpc.ServiceRegistrar, srv FederatedQueryServiceServer) {
	s.RegisterService(&FederatedQueryService_ServiceDesc, srv)
}

func _FederatedQueryService_CreateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.CreateQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).CreateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_CreateQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).CreateQuery(ctx, req.(*Fq.CreateQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_ListQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.ListQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).ListQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_ListQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).ListQueries(ctx, req.(*Fq.ListQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_DescribeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.DescribeQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).DescribeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_DescribeQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).DescribeQuery(ctx, req.(*Fq.DescribeQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_GetQueryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.GetQueryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).GetQueryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_GetQueryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).GetQueryStatus(ctx, req.(*Fq.GetQueryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_ModifyQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.ModifyQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).ModifyQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_ModifyQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).ModifyQuery(ctx, req.(*Fq.ModifyQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_DeleteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.DeleteQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).DeleteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_DeleteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).DeleteQuery(ctx, req.(*Fq.DeleteQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_ControlQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.ControlQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).ControlQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_ControlQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).ControlQuery(ctx, req.(*Fq.ControlQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_GetResultData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.GetResultDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).GetResultData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_GetResultData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).GetResultData(ctx, req.(*Fq.GetResultDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).ListJobs(ctx, req.(*Fq.ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_DescribeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.DescribeJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).DescribeJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_DescribeJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).DescribeJob(ctx, req.(*Fq.DescribeJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_CreateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).CreateConnection(ctx, req.(*Fq.CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_ListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.ListConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).ListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_ListConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).ListConnections(ctx, req.(*Fq.ListConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_DescribeConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.DescribeConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).DescribeConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_DescribeConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).DescribeConnection(ctx, req.(*Fq.DescribeConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_ModifyConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.ModifyConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).ModifyConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_ModifyConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).ModifyConnection(ctx, req.(*Fq.ModifyConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).DeleteConnection(ctx, req.(*Fq.DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.TestConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_TestConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).TestConnection(ctx, req.(*Fq.TestConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_CreateBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.CreateBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).CreateBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_CreateBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).CreateBinding(ctx, req.(*Fq.CreateBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_ListBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.ListBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).ListBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_ListBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).ListBindings(ctx, req.(*Fq.ListBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_DescribeBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.DescribeBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).DescribeBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_DescribeBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).DescribeBinding(ctx, req.(*Fq.DescribeBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_ModifyBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.ModifyBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).ModifyBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_ModifyBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).ModifyBinding(ctx, req.(*Fq.ModifyBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederatedQueryService_DeleteBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fq.DeleteBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederatedQueryServiceServer).DeleteBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederatedQueryService_DeleteBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederatedQueryServiceServer).DeleteBinding(ctx, req.(*Fq.DeleteBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FederatedQueryService_ServiceDesc is the grpc.ServiceDesc for FederatedQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FederatedQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FederatedQuery.V1.FederatedQueryService",
	HandlerType: (*FederatedQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuery",
			Handler:    _FederatedQueryService_CreateQuery_Handler,
		},
		{
			MethodName: "ListQueries",
			Handler:    _FederatedQueryService_ListQueries_Handler,
		},
		{
			MethodName: "DescribeQuery",
			Handler:    _FederatedQueryService_DescribeQuery_Handler,
		},
		{
			MethodName: "GetQueryStatus",
			Handler:    _FederatedQueryService_GetQueryStatus_Handler,
		},
		{
			MethodName: "ModifyQuery",
			Handler:    _FederatedQueryService_ModifyQuery_Handler,
		},
		{
			MethodName: "DeleteQuery",
			Handler:    _FederatedQueryService_DeleteQuery_Handler,
		},
		{
			MethodName: "ControlQuery",
			Handler:    _FederatedQueryService_ControlQuery_Handler,
		},
		{
			MethodName: "GetResultData",
			Handler:    _FederatedQueryService_GetResultData_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _FederatedQueryService_ListJobs_Handler,
		},
		{
			MethodName: "DescribeJob",
			Handler:    _FederatedQueryService_DescribeJob_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _FederatedQueryService_CreateConnection_Handler,
		},
		{
			MethodName: "ListConnections",
			Handler:    _FederatedQueryService_ListConnections_Handler,
		},
		{
			MethodName: "DescribeConnection",
			Handler:    _FederatedQueryService_DescribeConnection_Handler,
		},
		{
			MethodName: "ModifyConnection",
			Handler:    _FederatedQueryService_ModifyConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _FederatedQueryService_DeleteConnection_Handler,
		},
		{
			MethodName: "TestConnection",
			Handler:    _FederatedQueryService_TestConnection_Handler,
		},
		{
			MethodName: "CreateBinding",
			Handler:    _FederatedQueryService_CreateBinding_Handler,
		},
		{
			MethodName: "ListBindings",
			Handler:    _FederatedQueryService_ListBindings_Handler,
		},
		{
			MethodName: "DescribeBinding",
			Handler:    _FederatedQueryService_DescribeBinding_Handler,
		},
		{
			MethodName: "ModifyBinding",
			Handler:    _FederatedQueryService_ModifyBinding_Handler,
		},
		{
			MethodName: "DeleteBinding",
			Handler:    _FederatedQueryService_DeleteBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "draft/fq_v1.proto",
}
