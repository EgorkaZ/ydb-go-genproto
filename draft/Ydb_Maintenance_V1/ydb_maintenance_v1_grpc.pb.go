// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: draft/ydb_maintenance_v1.proto

package Ydb_Maintenance_V1

import (
	context "context"
	Ydb_Maintenance "github.com/ydb-platform/ydb-go-genproto/draft/protos/Ydb_Maintenance"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MaintenanceService_ListClusterNodes_FullMethodName          = "/Ydb.Maintenance.V1.MaintenanceService/ListClusterNodes"
	MaintenanceService_CreateMaintenanceTask_FullMethodName     = "/Ydb.Maintenance.V1.MaintenanceService/CreateMaintenanceTask"
	MaintenanceService_RefreshMaintenanceTask_FullMethodName    = "/Ydb.Maintenance.V1.MaintenanceService/RefreshMaintenanceTask"
	MaintenanceService_GetMaintenanceTaskDetails_FullMethodName = "/Ydb.Maintenance.V1.MaintenanceService/GetMaintenanceTaskDetails"
	MaintenanceService_ListMaintenanceTasks_FullMethodName      = "/Ydb.Maintenance.V1.MaintenanceService/ListMaintenanceTasks"
	MaintenanceService_DropMaintenanceTask_FullMethodName       = "/Ydb.Maintenance.V1.MaintenanceService/DropMaintenanceTask"
	MaintenanceService_ProlongateMaintenanceTask_FullMethodName = "/Ydb.Maintenance.V1.MaintenanceService/ProlongateMaintenanceTask"
	MaintenanceService_ReleasePermit_FullMethodName             = "/Ydb.Maintenance.V1.MaintenanceService/ReleasePermit"
	MaintenanceService_ProlongatePermit_FullMethodName          = "/Ydb.Maintenance.V1.MaintenanceService/ProlongatePermit"
	MaintenanceService_GetReadableActionReason_FullMethodName   = "/Ydb.Maintenance.V1.MaintenanceService/GetReadableActionReason"
)

// MaintenanceServiceClient is the client API for MaintenanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaintenanceServiceClient interface {
	// List cluster hosts
	ListClusterNodes(ctx context.Context, in *Ydb_Maintenance.ListClusterNodesRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ListClusterNodesResponse, error)
	// Request for permissions
	CreateMaintenanceTask(ctx context.Context, in *Ydb_Maintenance.CreateMaintenanceTaskRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.MaintenanceTaskResponse, error)
	// Get new permissions
	RefreshMaintenanceTask(ctx context.Context, in *Ydb_Maintenance.RefreshMaintenanceTaskRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.MaintenanceTaskResponse, error)
	// Get scheduled task
	GetMaintenanceTaskDetails(ctx context.Context, in *Ydb_Maintenance.GetMaintenanceTaskRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.GetMaintenanceTaskResponse, error)
	// List maintenance tasks
	ListMaintenanceTasks(ctx context.Context, in *Ydb_Maintenance.ListMaintenanceTasksRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ListMaintenanceTasksResponse, error)
	// Drop scheduled task
	DropMaintenanceTask(ctx context.Context, in *Ydb_Maintenance.DropMaintenanceTaskRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ManageMaintenanceTaskResponse, error)
	// Update scheduled task deadline
	ProlongateMaintenanceTask(ctx context.Context, in *Ydb_Maintenance.ProlongateMaintenanceTaskRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ManageMaintenanceTaskResponse, error)
	// Mark permission as finished
	ReleasePermit(ctx context.Context, in *Ydb_Maintenance.ReleasePermitRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ManagePermitResponse, error)
	// Update permission's deadline
	ProlongatePermit(ctx context.Context, in *Ydb_Maintenance.ProlongatePermitRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ManagePermitResponse, error)
	// Get detailed action state messages. Used for debugging service tasks to find out
	// the reason why an action does not get resolution.
	GetReadableActionReason(ctx context.Context, in *Ydb_Maintenance.GetReadableActionReasonRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.GetReadableActionReasonResponse, error)
}

type maintenanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaintenanceServiceClient(cc grpc.ClientConnInterface) MaintenanceServiceClient {
	return &maintenanceServiceClient{cc}
}

func (c *maintenanceServiceClient) ListClusterNodes(ctx context.Context, in *Ydb_Maintenance.ListClusterNodesRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ListClusterNodesResponse, error) {
	out := new(Ydb_Maintenance.ListClusterNodesResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_ListClusterNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) CreateMaintenanceTask(ctx context.Context, in *Ydb_Maintenance.CreateMaintenanceTaskRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.MaintenanceTaskResponse, error) {
	out := new(Ydb_Maintenance.MaintenanceTaskResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_CreateMaintenanceTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) RefreshMaintenanceTask(ctx context.Context, in *Ydb_Maintenance.RefreshMaintenanceTaskRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.MaintenanceTaskResponse, error) {
	out := new(Ydb_Maintenance.MaintenanceTaskResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_RefreshMaintenanceTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) GetMaintenanceTaskDetails(ctx context.Context, in *Ydb_Maintenance.GetMaintenanceTaskRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.GetMaintenanceTaskResponse, error) {
	out := new(Ydb_Maintenance.GetMaintenanceTaskResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_GetMaintenanceTaskDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) ListMaintenanceTasks(ctx context.Context, in *Ydb_Maintenance.ListMaintenanceTasksRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ListMaintenanceTasksResponse, error) {
	out := new(Ydb_Maintenance.ListMaintenanceTasksResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_ListMaintenanceTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) DropMaintenanceTask(ctx context.Context, in *Ydb_Maintenance.DropMaintenanceTaskRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ManageMaintenanceTaskResponse, error) {
	out := new(Ydb_Maintenance.ManageMaintenanceTaskResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_DropMaintenanceTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) ProlongateMaintenanceTask(ctx context.Context, in *Ydb_Maintenance.ProlongateMaintenanceTaskRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ManageMaintenanceTaskResponse, error) {
	out := new(Ydb_Maintenance.ManageMaintenanceTaskResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_ProlongateMaintenanceTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) ReleasePermit(ctx context.Context, in *Ydb_Maintenance.ReleasePermitRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ManagePermitResponse, error) {
	out := new(Ydb_Maintenance.ManagePermitResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_ReleasePermit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) ProlongatePermit(ctx context.Context, in *Ydb_Maintenance.ProlongatePermitRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.ManagePermitResponse, error) {
	out := new(Ydb_Maintenance.ManagePermitResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_ProlongatePermit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) GetReadableActionReason(ctx context.Context, in *Ydb_Maintenance.GetReadableActionReasonRequest, opts ...grpc.CallOption) (*Ydb_Maintenance.GetReadableActionReasonResponse, error) {
	out := new(Ydb_Maintenance.GetReadableActionReasonResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_GetReadableActionReason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaintenanceServiceServer is the server API for MaintenanceService service.
// All implementations must embed UnimplementedMaintenanceServiceServer
// for forward compatibility
type MaintenanceServiceServer interface {
	// List cluster hosts
	ListClusterNodes(context.Context, *Ydb_Maintenance.ListClusterNodesRequest) (*Ydb_Maintenance.ListClusterNodesResponse, error)
	// Request for permissions
	CreateMaintenanceTask(context.Context, *Ydb_Maintenance.CreateMaintenanceTaskRequest) (*Ydb_Maintenance.MaintenanceTaskResponse, error)
	// Get new permissions
	RefreshMaintenanceTask(context.Context, *Ydb_Maintenance.RefreshMaintenanceTaskRequest) (*Ydb_Maintenance.MaintenanceTaskResponse, error)
	// Get scheduled task
	GetMaintenanceTaskDetails(context.Context, *Ydb_Maintenance.GetMaintenanceTaskRequest) (*Ydb_Maintenance.GetMaintenanceTaskResponse, error)
	// List maintenance tasks
	ListMaintenanceTasks(context.Context, *Ydb_Maintenance.ListMaintenanceTasksRequest) (*Ydb_Maintenance.ListMaintenanceTasksResponse, error)
	// Drop scheduled task
	DropMaintenanceTask(context.Context, *Ydb_Maintenance.DropMaintenanceTaskRequest) (*Ydb_Maintenance.ManageMaintenanceTaskResponse, error)
	// Update scheduled task deadline
	ProlongateMaintenanceTask(context.Context, *Ydb_Maintenance.ProlongateMaintenanceTaskRequest) (*Ydb_Maintenance.ManageMaintenanceTaskResponse, error)
	// Mark permission as finished
	ReleasePermit(context.Context, *Ydb_Maintenance.ReleasePermitRequest) (*Ydb_Maintenance.ManagePermitResponse, error)
	// Update permission's deadline
	ProlongatePermit(context.Context, *Ydb_Maintenance.ProlongatePermitRequest) (*Ydb_Maintenance.ManagePermitResponse, error)
	// Get detailed action state messages. Used for debugging service tasks to find out
	// the reason why an action does not get resolution.
	GetReadableActionReason(context.Context, *Ydb_Maintenance.GetReadableActionReasonRequest) (*Ydb_Maintenance.GetReadableActionReasonResponse, error)
	mustEmbedUnimplementedMaintenanceServiceServer()
}

// UnimplementedMaintenanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaintenanceServiceServer struct {
}

func (UnimplementedMaintenanceServiceServer) ListClusterNodes(context.Context, *Ydb_Maintenance.ListClusterNodesRequest) (*Ydb_Maintenance.ListClusterNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterNodes not implemented")
}
func (UnimplementedMaintenanceServiceServer) CreateMaintenanceTask(context.Context, *Ydb_Maintenance.CreateMaintenanceTaskRequest) (*Ydb_Maintenance.MaintenanceTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaintenanceTask not implemented")
}
func (UnimplementedMaintenanceServiceServer) RefreshMaintenanceTask(context.Context, *Ydb_Maintenance.RefreshMaintenanceTaskRequest) (*Ydb_Maintenance.MaintenanceTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshMaintenanceTask not implemented")
}
func (UnimplementedMaintenanceServiceServer) GetMaintenanceTaskDetails(context.Context, *Ydb_Maintenance.GetMaintenanceTaskRequest) (*Ydb_Maintenance.GetMaintenanceTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaintenanceTaskDetails not implemented")
}
func (UnimplementedMaintenanceServiceServer) ListMaintenanceTasks(context.Context, *Ydb_Maintenance.ListMaintenanceTasksRequest) (*Ydb_Maintenance.ListMaintenanceTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaintenanceTasks not implemented")
}
func (UnimplementedMaintenanceServiceServer) DropMaintenanceTask(context.Context, *Ydb_Maintenance.DropMaintenanceTaskRequest) (*Ydb_Maintenance.ManageMaintenanceTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropMaintenanceTask not implemented")
}
func (UnimplementedMaintenanceServiceServer) ProlongateMaintenanceTask(context.Context, *Ydb_Maintenance.ProlongateMaintenanceTaskRequest) (*Ydb_Maintenance.ManageMaintenanceTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProlongateMaintenanceTask not implemented")
}
func (UnimplementedMaintenanceServiceServer) ReleasePermit(context.Context, *Ydb_Maintenance.ReleasePermitRequest) (*Ydb_Maintenance.ManagePermitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePermit not implemented")
}
func (UnimplementedMaintenanceServiceServer) ProlongatePermit(context.Context, *Ydb_Maintenance.ProlongatePermitRequest) (*Ydb_Maintenance.ManagePermitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProlongatePermit not implemented")
}
func (UnimplementedMaintenanceServiceServer) GetReadableActionReason(context.Context, *Ydb_Maintenance.GetReadableActionReasonRequest) (*Ydb_Maintenance.GetReadableActionReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadableActionReason not implemented")
}
func (UnimplementedMaintenanceServiceServer) mustEmbedUnimplementedMaintenanceServiceServer() {}

// UnsafeMaintenanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaintenanceServiceServer will
// result in compilation errors.
type UnsafeMaintenanceServiceServer interface {
	mustEmbedUnimplementedMaintenanceServiceServer()
}

func RegisterMaintenanceServiceServer(s grpc.ServiceRegistrar, srv MaintenanceServiceServer) {
	s.RegisterService(&MaintenanceService_ServiceDesc, srv)
}

func _MaintenanceService_ListClusterNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Maintenance.ListClusterNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).ListClusterNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_ListClusterNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).ListClusterNodes(ctx, req.(*Ydb_Maintenance.ListClusterNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_CreateMaintenanceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Maintenance.CreateMaintenanceTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).CreateMaintenanceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_CreateMaintenanceTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).CreateMaintenanceTask(ctx, req.(*Ydb_Maintenance.CreateMaintenanceTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_RefreshMaintenanceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Maintenance.RefreshMaintenanceTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).RefreshMaintenanceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_RefreshMaintenanceTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).RefreshMaintenanceTask(ctx, req.(*Ydb_Maintenance.RefreshMaintenanceTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_GetMaintenanceTaskDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Maintenance.GetMaintenanceTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).GetMaintenanceTaskDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_GetMaintenanceTaskDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).GetMaintenanceTaskDetails(ctx, req.(*Ydb_Maintenance.GetMaintenanceTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_ListMaintenanceTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Maintenance.ListMaintenanceTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).ListMaintenanceTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_ListMaintenanceTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).ListMaintenanceTasks(ctx, req.(*Ydb_Maintenance.ListMaintenanceTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_DropMaintenanceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Maintenance.DropMaintenanceTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).DropMaintenanceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_DropMaintenanceTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).DropMaintenanceTask(ctx, req.(*Ydb_Maintenance.DropMaintenanceTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_ProlongateMaintenanceTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Maintenance.ProlongateMaintenanceTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).ProlongateMaintenanceTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_ProlongateMaintenanceTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).ProlongateMaintenanceTask(ctx, req.(*Ydb_Maintenance.ProlongateMaintenanceTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_ReleasePermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Maintenance.ReleasePermitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).ReleasePermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_ReleasePermit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).ReleasePermit(ctx, req.(*Ydb_Maintenance.ReleasePermitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_ProlongatePermit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Maintenance.ProlongatePermitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).ProlongatePermit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_ProlongatePermit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).ProlongatePermit(ctx, req.(*Ydb_Maintenance.ProlongatePermitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_GetReadableActionReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ydb_Maintenance.GetReadableActionReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).GetReadableActionReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_GetReadableActionReason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).GetReadableActionReason(ctx, req.(*Ydb_Maintenance.GetReadableActionReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaintenanceService_ServiceDesc is the grpc.ServiceDesc for MaintenanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaintenanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ydb.Maintenance.V1.MaintenanceService",
	HandlerType: (*MaintenanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusterNodes",
			Handler:    _MaintenanceService_ListClusterNodes_Handler,
		},
		{
			MethodName: "CreateMaintenanceTask",
			Handler:    _MaintenanceService_CreateMaintenanceTask_Handler,
		},
		{
			MethodName: "RefreshMaintenanceTask",
			Handler:    _MaintenanceService_RefreshMaintenanceTask_Handler,
		},
		{
			MethodName: "GetMaintenanceTaskDetails",
			Handler:    _MaintenanceService_GetMaintenanceTaskDetails_Handler,
		},
		{
			MethodName: "ListMaintenanceTasks",
			Handler:    _MaintenanceService_ListMaintenanceTasks_Handler,
		},
		{
			MethodName: "DropMaintenanceTask",
			Handler:    _MaintenanceService_DropMaintenanceTask_Handler,
		},
		{
			MethodName: "ProlongateMaintenanceTask",
			Handler:    _MaintenanceService_ProlongateMaintenanceTask_Handler,
		},
		{
			MethodName: "ReleasePermit",
			Handler:    _MaintenanceService_ReleasePermit_Handler,
		},
		{
			MethodName: "ProlongatePermit",
			Handler:    _MaintenanceService_ProlongatePermit_Handler,
		},
		{
			MethodName: "GetReadableActionReason",
			Handler:    _MaintenanceService_GetReadableActionReason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "draft/ydb_maintenance_v1.proto",
}
