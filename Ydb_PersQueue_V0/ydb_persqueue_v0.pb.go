// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: ydb_persqueue_v0.proto

package Ydb_PersQueue_V0

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EErrorCode int32

const (
	EErrorCode_OK                                EErrorCode = 0
	EErrorCode_INITIALIZING                      EErrorCode = 1
	EErrorCode_OVERLOAD                          EErrorCode = 2
	EErrorCode_BAD_REQUEST                       EErrorCode = 3
	EErrorCode_WRONG_COOKIE                      EErrorCode = 4
	EErrorCode_SOURCEID_DELETED                  EErrorCode = 24
	EErrorCode_WRITE_ERROR_PARTITION_IS_FULL     EErrorCode = 5
	EErrorCode_WRITE_ERROR_DISK_IS_FULL          EErrorCode = 15
	EErrorCode_WRITE_ERROR_BAD_OFFSET            EErrorCode = 19
	EErrorCode_CREATE_SESSION_ALREADY_LOCKED     EErrorCode = 6
	EErrorCode_DELETE_SESSION_NO_SESSION         EErrorCode = 7
	EErrorCode_READ_ERROR_IN_PROGRESS            EErrorCode = 8
	EErrorCode_READ_ERROR_NO_SESSION             EErrorCode = 9
	EErrorCode_READ_TIMEOUT                      EErrorCode = 10
	EErrorCode_READ_ERROR_TOO_SMALL_OFFSET       EErrorCode = 11
	EErrorCode_READ_ERROR_TOO_BIG_OFFSET         EErrorCode = 12
	EErrorCode_SET_OFFSET_ERROR_COMMIT_TO_FUTURE EErrorCode = 13
	EErrorCode_TABLET_IS_DROPPED                 EErrorCode = 14
	EErrorCode_READ_NOT_DONE                     EErrorCode = 16
	EErrorCode_UNKNOWN_TOPIC                     EErrorCode = 17
	EErrorCode_ACCESS_DENIED                     EErrorCode = 18
	EErrorCode_CLUSTER_DISABLED                  EErrorCode = 20
	EErrorCode_WRONG_PARTITION_NUMBER            EErrorCode = 21
	EErrorCode_CREATE_TIMEOUT                    EErrorCode = 22
	EErrorCode_IDLE_TIMEOUT                      EErrorCode = 23
	EErrorCode_ERROR                             EErrorCode = 100
)

// Enum value maps for EErrorCode.
var (
	EErrorCode_name = map[int32]string{
		0:   "OK",
		1:   "INITIALIZING",
		2:   "OVERLOAD",
		3:   "BAD_REQUEST",
		4:   "WRONG_COOKIE",
		24:  "SOURCEID_DELETED",
		5:   "WRITE_ERROR_PARTITION_IS_FULL",
		15:  "WRITE_ERROR_DISK_IS_FULL",
		19:  "WRITE_ERROR_BAD_OFFSET",
		6:   "CREATE_SESSION_ALREADY_LOCKED",
		7:   "DELETE_SESSION_NO_SESSION",
		8:   "READ_ERROR_IN_PROGRESS",
		9:   "READ_ERROR_NO_SESSION",
		10:  "READ_TIMEOUT",
		11:  "READ_ERROR_TOO_SMALL_OFFSET",
		12:  "READ_ERROR_TOO_BIG_OFFSET",
		13:  "SET_OFFSET_ERROR_COMMIT_TO_FUTURE",
		14:  "TABLET_IS_DROPPED",
		16:  "READ_NOT_DONE",
		17:  "UNKNOWN_TOPIC",
		18:  "ACCESS_DENIED",
		20:  "CLUSTER_DISABLED",
		21:  "WRONG_PARTITION_NUMBER",
		22:  "CREATE_TIMEOUT",
		23:  "IDLE_TIMEOUT",
		100: "ERROR",
	}
	EErrorCode_value = map[string]int32{
		"OK":                                0,
		"INITIALIZING":                      1,
		"OVERLOAD":                          2,
		"BAD_REQUEST":                       3,
		"WRONG_COOKIE":                      4,
		"SOURCEID_DELETED":                  24,
		"WRITE_ERROR_PARTITION_IS_FULL":     5,
		"WRITE_ERROR_DISK_IS_FULL":          15,
		"WRITE_ERROR_BAD_OFFSET":            19,
		"CREATE_SESSION_ALREADY_LOCKED":     6,
		"DELETE_SESSION_NO_SESSION":         7,
		"READ_ERROR_IN_PROGRESS":            8,
		"READ_ERROR_NO_SESSION":             9,
		"READ_TIMEOUT":                      10,
		"READ_ERROR_TOO_SMALL_OFFSET":       11,
		"READ_ERROR_TOO_BIG_OFFSET":         12,
		"SET_OFFSET_ERROR_COMMIT_TO_FUTURE": 13,
		"TABLET_IS_DROPPED":                 14,
		"READ_NOT_DONE":                     16,
		"UNKNOWN_TOPIC":                     17,
		"ACCESS_DENIED":                     18,
		"CLUSTER_DISABLED":                  20,
		"WRONG_PARTITION_NUMBER":            21,
		"CREATE_TIMEOUT":                    22,
		"IDLE_TIMEOUT":                      23,
		"ERROR":                             100,
	}
)

func (x EErrorCode) Enum() *EErrorCode {
	p := new(EErrorCode)
	*p = x
	return p
}

func (x EErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_persqueue_v0_proto_enumTypes[0].Descriptor()
}

func (EErrorCode) Type() protoreflect.EnumType {
	return &file_ydb_persqueue_v0_proto_enumTypes[0]
}

func (x EErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EErrorCode.Descriptor instead.
func (EErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{0}
}

type ECodec int32

const (
	ECodec_RAW     ECodec = 0
	ECodec_GZIP    ECodec = 1
	ECodec_LZOP    ECodec = 2
	ECodec_ZSTD    ECodec = 3
	ECodec_DEFAULT ECodec = 100 // Codec should be taken automatically from settings
)

// Enum value maps for ECodec.
var (
	ECodec_name = map[int32]string{
		0:   "RAW",
		1:   "GZIP",
		2:   "LZOP",
		3:   "ZSTD",
		100: "DEFAULT",
	}
	ECodec_value = map[string]int32{
		"RAW":     0,
		"GZIP":    1,
		"LZOP":    2,
		"ZSTD":    3,
		"DEFAULT": 100,
	}
)

func (x ECodec) Enum() *ECodec {
	p := new(ECodec)
	*p = x
	return p
}

func (x ECodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECodec) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_persqueue_v0_proto_enumTypes[1].Descriptor()
}

func (ECodec) Type() protoreflect.EnumType {
	return &file_ydb_persqueue_v0_proto_enumTypes[1]
}

func (x ECodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECodec.Descriptor instead.
func (ECodec) EnumDescriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{1}
}

type ReadRequest_EProtocolVersion int32

const (
	ReadRequest_Base             ReadRequest_EProtocolVersion = 0 // Base protocol version
	ReadRequest_Batching         ReadRequest_EProtocolVersion = 1 // Client supports more effective batching structs (TBatchedData instead of TData)
	ReadRequest_ReadParamsInInit ReadRequest_EProtocolVersion = 2 // Client sets read params in Init request
)

// Enum value maps for ReadRequest_EProtocolVersion.
var (
	ReadRequest_EProtocolVersion_name = map[int32]string{
		0: "Base",
		1: "Batching",
		2: "ReadParamsInInit",
	}
	ReadRequest_EProtocolVersion_value = map[string]int32{
		"Base":             0,
		"Batching":         1,
		"ReadParamsInInit": 2,
	}
)

func (x ReadRequest_EProtocolVersion) Enum() *ReadRequest_EProtocolVersion {
	p := new(ReadRequest_EProtocolVersion)
	*p = x
	return p
}

func (x ReadRequest_EProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadRequest_EProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_ydb_persqueue_v0_proto_enumTypes[2].Descriptor()
}

func (ReadRequest_EProtocolVersion) Type() protoreflect.EnumType {
	return &file_ydb_persqueue_v0_proto_enumTypes[2]
}

func (x ReadRequest_EProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadRequest_EProtocolVersion.Descriptor instead.
func (ReadRequest_EProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{6, 0}
}

//change to IssueMessage
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        EErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=NPersQueue.EErrorCode" json:"code,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() EErrorCode {
	if x != nil {
		return x.Code
	}
	return EErrorCode_OK
}

func (x *Error) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{1}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type MapType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*KeyValue `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *MapType) Reset() {
	*x = MapType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapType) ProtoMessage() {}

func (x *MapType) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapType.ProtoReflect.Descriptor instead.
func (*MapType) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{2}
}

func (x *MapType) GetItems() []*KeyValue {
	if x != nil {
		return x.Items
	}
	return nil
}

type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credentials:
	//	*Credentials_TvmServiceTicket
	//	*Credentials_OauthToken
	Credentials isCredentials_Credentials `protobuf_oneof:"credentials"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{3}
}

func (m *Credentials) GetCredentials() isCredentials_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *Credentials) GetTvmServiceTicket() []byte {
	if x, ok := x.GetCredentials().(*Credentials_TvmServiceTicket); ok {
		return x.TvmServiceTicket
	}
	return nil
}

func (x *Credentials) GetOauthToken() []byte {
	if x, ok := x.GetCredentials().(*Credentials_OauthToken); ok {
		return x.OauthToken
	}
	return nil
}

type isCredentials_Credentials interface {
	isCredentials_Credentials()
}

type Credentials_TvmServiceTicket struct {
	TvmServiceTicket []byte `protobuf:"bytes,1,opt,name=tvm_service_ticket,json=tvmServiceTicket,proto3,oneof"`
}

type Credentials_OauthToken struct {
	OauthToken []byte `protobuf:"bytes,2,opt,name=oauth_token,json=oauthToken,proto3,oneof"`
}

func (*Credentials_TvmServiceTicket) isCredentials_Credentials() {}

func (*Credentials_OauthToken) isCredentials_Credentials() {}

//*
// Request for write session. Contains one of :
//      Init - consists of initialization info - Topic, SourceId and so on
//      Data - data to be writen
//      DataBatch - batch of data to be written
type WriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*WriteRequest_Init_
	//	*WriteRequest_Data_
	//	*WriteRequest_DataBatch_
	Request     isWriteRequest_Request `protobuf_oneof:"request"`
	Credentials *Credentials           `protobuf:"bytes,20,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *WriteRequest) Reset() {
	*x = WriteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest) ProtoMessage() {}

func (x *WriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest.ProtoReflect.Descriptor instead.
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{4}
}

func (m *WriteRequest) GetRequest() isWriteRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *WriteRequest) GetInit() *WriteRequest_Init {
	if x, ok := x.GetRequest().(*WriteRequest_Init_); ok {
		return x.Init
	}
	return nil
}

func (x *WriteRequest) GetData() *WriteRequest_Data {
	if x, ok := x.GetRequest().(*WriteRequest_Data_); ok {
		return x.Data
	}
	return nil
}

func (x *WriteRequest) GetDataBatch() *WriteRequest_DataBatch {
	if x, ok := x.GetRequest().(*WriteRequest_DataBatch_); ok {
		return x.DataBatch
	}
	return nil
}

func (x *WriteRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type isWriteRequest_Request interface {
	isWriteRequest_Request()
}

type WriteRequest_Init_ struct {
	//init must be sent as first message
	Init *WriteRequest_Init `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type WriteRequest_Data_ struct {
	Data *WriteRequest_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type WriteRequest_DataBatch_ struct {
	DataBatch *WriteRequest_DataBatch `protobuf:"bytes,3,opt,name=data_batch,json=dataBatch,proto3,oneof"` //maybe not implemented in current production
}

func (*WriteRequest_Init_) isWriteRequest_Request() {}

func (*WriteRequest_Data_) isWriteRequest_Request() {}

func (*WriteRequest_DataBatch_) isWriteRequest_Request() {}

//*
// Response for write session. Contains one of :
//      Error - in any persqueueError state - grpc errors, session dies, incorrect Init request and so on
//      Init - contains SessionId of created session, MaxSeqNo and Partition
//      Ack - acknowlegment of storing corresponding message
//      AckBatch - acknowlegment of storing corresponding message batch
type WriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*WriteResponse_Init_
	//	*WriteResponse_Ack_
	//	*WriteResponse_AckBatch_
	//	*WriteResponse_Error
	Response isWriteResponse_Response `protobuf_oneof:"response"`
}

func (x *WriteResponse) Reset() {
	*x = WriteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse) ProtoMessage() {}

func (x *WriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse.ProtoReflect.Descriptor instead.
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{5}
}

func (m *WriteResponse) GetResponse() isWriteResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *WriteResponse) GetInit() *WriteResponse_Init {
	if x, ok := x.GetResponse().(*WriteResponse_Init_); ok {
		return x.Init
	}
	return nil
}

func (x *WriteResponse) GetAck() *WriteResponse_Ack {
	if x, ok := x.GetResponse().(*WriteResponse_Ack_); ok {
		return x.Ack
	}
	return nil
}

func (x *WriteResponse) GetAckBatch() *WriteResponse_AckBatch {
	if x, ok := x.GetResponse().(*WriteResponse_AckBatch_); ok {
		return x.AckBatch
	}
	return nil
}

func (x *WriteResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*WriteResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isWriteResponse_Response interface {
	isWriteResponse_Response()
}

type WriteResponse_Init_ struct {
	Init *WriteResponse_Init `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type WriteResponse_Ack_ struct {
	Ack *WriteResponse_Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type WriteResponse_AckBatch_ struct {
	AckBatch *WriteResponse_AckBatch `protobuf:"bytes,4,opt,name=ack_batch,json=ackBatch,proto3,oneof"`
}

type WriteResponse_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*WriteResponse_Init_) isWriteResponse_Response() {}

func (*WriteResponse_Ack_) isWriteResponse_Response() {}

func (*WriteResponse_AckBatch_) isWriteResponse_Response() {}

func (*WriteResponse_Error) isWriteResponse_Response() {}

//*
// Request for read session. Contains one of :
//      Init - contains of Topics to be readed, ClientId and other metadata
//      Read - request for read batch. Contains of restrictments for result - MaxSize, MaxCount and so on
//      Commit - request for commit some read batches. Contains corresponding cookies
//      Locked - comfirming to server that client is ready to get data from partition from concreet offset
type ReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*ReadRequest_Init_
	//	*ReadRequest_Read_
	//	*ReadRequest_StartRead_
	//	*ReadRequest_Commit_
	Request     isReadRequest_Request `protobuf_oneof:"request"`
	Credentials *Credentials          `protobuf:"bytes,20,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{6}
}

func (m *ReadRequest) GetRequest() isReadRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ReadRequest) GetInit() *ReadRequest_Init {
	if x, ok := x.GetRequest().(*ReadRequest_Init_); ok {
		return x.Init
	}
	return nil
}

func (x *ReadRequest) GetRead() *ReadRequest_Read {
	if x, ok := x.GetRequest().(*ReadRequest_Read_); ok {
		return x.Read
	}
	return nil
}

func (x *ReadRequest) GetStartRead() *ReadRequest_StartRead {
	if x, ok := x.GetRequest().(*ReadRequest_StartRead_); ok {
		return x.StartRead
	}
	return nil
}

func (x *ReadRequest) GetCommit() *ReadRequest_Commit {
	if x, ok := x.GetRequest().(*ReadRequest_Commit_); ok {
		return x.Commit
	}
	return nil
}

func (x *ReadRequest) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type isReadRequest_Request interface {
	isReadRequest_Request()
}

type ReadRequest_Init_ struct {
	//init must be sent as first message
	Init *ReadRequest_Init `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type ReadRequest_Read_ struct {
	Read *ReadRequest_Read `protobuf:"bytes,2,opt,name=read,proto3,oneof"`
}

type ReadRequest_StartRead_ struct {
	StartRead *ReadRequest_StartRead `protobuf:"bytes,3,opt,name=start_read,json=startRead,proto3,oneof"`
}

type ReadRequest_Commit_ struct {
	Commit *ReadRequest_Commit `protobuf:"bytes,4,opt,name=commit,proto3,oneof"`
}

func (*ReadRequest_Init_) isReadRequest_Request() {}

func (*ReadRequest_Read_) isReadRequest_Request() {}

func (*ReadRequest_StartRead_) isReadRequest_Request() {}

func (*ReadRequest_Commit_) isReadRequest_Request() {}

type MessageMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId     []byte   `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	SeqNo        uint64   `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	CreateTimeMs uint64   `protobuf:"varint,3,opt,name=create_time_ms,json=createTimeMs,proto3" json:"create_time_ms,omitempty"`
	WriteTimeMs  uint64   `protobuf:"varint,4,opt,name=write_time_ms,json=writeTimeMs,proto3" json:"write_time_ms,omitempty"`
	ExtraFields  *MapType `protobuf:"bytes,7,opt,name=extra_fields,json=extraFields,proto3" json:"extra_fields,omitempty"`
	Codec        ECodec   `protobuf:"varint,8,opt,name=codec,proto3,enum=NPersQueue.ECodec" json:"codec,omitempty"`
	Ip           string   `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *MessageMeta) Reset() {
	*x = MessageMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMeta) ProtoMessage() {}

func (x *MessageMeta) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMeta.ProtoReflect.Descriptor instead.
func (*MessageMeta) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{7}
}

func (x *MessageMeta) GetSourceId() []byte {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *MessageMeta) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *MessageMeta) GetCreateTimeMs() uint64 {
	if x != nil {
		return x.CreateTimeMs
	}
	return 0
}

func (x *MessageMeta) GetWriteTimeMs() uint64 {
	if x != nil {
		return x.WriteTimeMs
	}
	return 0
}

func (x *MessageMeta) GetExtraFields() *MapType {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

func (x *MessageMeta) GetCodec() ECodec {
	if x != nil {
		return x.Codec
	}
	return ECodec_RAW
}

func (x *MessageMeta) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type ReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*ReadResponse_Init_
	//	*ReadResponse_Data_
	//	*ReadResponse_BatchedData_
	//	*ReadResponse_Error
	//	*ReadResponse_Lock_
	//	*ReadResponse_Release_
	//	*ReadResponse_Commit_
	Response isReadResponse_Response `protobuf_oneof:"response"`
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8}
}

func (m *ReadResponse) GetResponse() isReadResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ReadResponse) GetInit() *ReadResponse_Init {
	if x, ok := x.GetResponse().(*ReadResponse_Init_); ok {
		return x.Init
	}
	return nil
}

func (x *ReadResponse) GetData() *ReadResponse_Data {
	if x, ok := x.GetResponse().(*ReadResponse_Data_); ok {
		return x.Data
	}
	return nil
}

func (x *ReadResponse) GetBatchedData() *ReadResponse_BatchedData {
	if x, ok := x.GetResponse().(*ReadResponse_BatchedData_); ok {
		return x.BatchedData
	}
	return nil
}

func (x *ReadResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ReadResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ReadResponse) GetLock() *ReadResponse_Lock {
	if x, ok := x.GetResponse().(*ReadResponse_Lock_); ok {
		return x.Lock
	}
	return nil
}

func (x *ReadResponse) GetRelease() *ReadResponse_Release {
	if x, ok := x.GetResponse().(*ReadResponse_Release_); ok {
		return x.Release
	}
	return nil
}

func (x *ReadResponse) GetCommit() *ReadResponse_Commit {
	if x, ok := x.GetResponse().(*ReadResponse_Commit_); ok {
		return x.Commit
	}
	return nil
}

type isReadResponse_Response interface {
	isReadResponse_Response()
}

type ReadResponse_Init_ struct {
	Init *ReadResponse_Init `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type ReadResponse_Data_ struct {
	Data *ReadResponse_Data `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

type ReadResponse_BatchedData_ struct {
	BatchedData *ReadResponse_BatchedData `protobuf:"bytes,7,opt,name=batched_data,json=batchedData,proto3,oneof"`
}

type ReadResponse_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

type ReadResponse_Lock_ struct {
	Lock *ReadResponse_Lock `protobuf:"bytes,4,opt,name=lock,proto3,oneof"`
}

type ReadResponse_Release_ struct {
	Release *ReadResponse_Release `protobuf:"bytes,5,opt,name=release,proto3,oneof"`
}

type ReadResponse_Commit_ struct {
	Commit *ReadResponse_Commit `protobuf:"bytes,6,opt,name=commit,proto3,oneof"`
}

func (*ReadResponse_Init_) isReadResponse_Response() {}

func (*ReadResponse_Data_) isReadResponse_Response() {}

func (*ReadResponse_BatchedData_) isReadResponse_Response() {}

func (*ReadResponse_Error) isReadResponse_Response() {}

func (*ReadResponse_Lock_) isReadResponse_Response() {}

func (*ReadResponse_Release_) isReadResponse_Response() {}

func (*ReadResponse_Commit_) isReadResponse_Response() {}

type WriteRequest_Init struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic          string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	SourceId       []byte   `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	ExtraFields    *MapType `protobuf:"bytes,7,opt,name=extra_fields,json=extraFields,proto3" json:"extra_fields,omitempty"`            //server and file inside here
	ProxyCookie    uint64   `protobuf:"varint,8,opt,name=proxy_cookie,json=proxyCookie,proto3" json:"proxy_cookie,omitempty"`           //cookie provided by ChooseProxy request //change to bytes
	PartitionGroup uint32   `protobuf:"varint,12,opt,name=partition_group,json=partitionGroup,proto3" json:"partition_group,omitempty"` //Group to write to - 0 means any;
	Version        string   `protobuf:"bytes,999,opt,name=version,proto3" json:"version,omitempty"`                                     //must be filled by client lib
}

func (x *WriteRequest_Init) Reset() {
	*x = WriteRequest_Init{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest_Init) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest_Init) ProtoMessage() {}

func (x *WriteRequest_Init) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest_Init.ProtoReflect.Descriptor instead.
func (*WriteRequest_Init) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{4, 0}
}

func (x *WriteRequest_Init) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *WriteRequest_Init) GetSourceId() []byte {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *WriteRequest_Init) GetExtraFields() *MapType {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

func (x *WriteRequest_Init) GetProxyCookie() uint64 {
	if x != nil {
		return x.ProxyCookie
	}
	return 0
}

func (x *WriteRequest_Init) GetPartitionGroup() uint32 {
	if x != nil {
		return x.PartitionGroup
	}
	return 0
}

func (x *WriteRequest_Init) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type WriteRequest_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo        uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Data         []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	CreateTimeMs uint64 `protobuf:"varint,3,opt,name=create_time_ms,json=createTimeMs,proto3" json:"create_time_ms,omitempty"` //timestamp in ms
	Codec        ECodec `protobuf:"varint,4,opt,name=codec,proto3,enum=NPersQueue.ECodec" json:"codec,omitempty"`
}

func (x *WriteRequest_Data) Reset() {
	*x = WriteRequest_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest_Data) ProtoMessage() {}

func (x *WriteRequest_Data) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest_Data.ProtoReflect.Descriptor instead.
func (*WriteRequest_Data) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{4, 1}
}

func (x *WriteRequest_Data) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *WriteRequest_Data) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WriteRequest_Data) GetCreateTimeMs() uint64 {
	if x != nil {
		return x.CreateTimeMs
	}
	return 0
}

func (x *WriteRequest_Data) GetCodec() ECodec {
	if x != nil {
		return x.Codec
	}
	return ECodec_RAW
}

type WriteRequest_DataBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*WriteRequest_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *WriteRequest_DataBatch) Reset() {
	*x = WriteRequest_DataBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequest_DataBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequest_DataBatch) ProtoMessage() {}

func (x *WriteRequest_DataBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequest_DataBatch.ProtoReflect.Descriptor instead.
func (*WriteRequest_DataBatch) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{4, 2}
}

func (x *WriteRequest_DataBatch) GetData() []*WriteRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type WriteResponse_Init struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSeqNo  uint64 `protobuf:"varint,1,opt,name=max_seq_no,json=maxSeqNo,proto3" json:"max_seq_no,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Partition uint32 `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	Topic     string `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *WriteResponse_Init) Reset() {
	*x = WriteResponse_Init{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponse_Init) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse_Init) ProtoMessage() {}

func (x *WriteResponse_Init) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse_Init.ProtoReflect.Descriptor instead.
func (*WriteResponse_Init) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{5, 0}
}

func (x *WriteResponse_Init) GetMaxSeqNo() uint64 {
	if x != nil {
		return x.MaxSeqNo
	}
	return 0
}

func (x *WriteResponse_Init) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *WriteResponse_Init) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *WriteResponse_Init) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type WriteResponse_Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WriteTimeMs                 uint32 `protobuf:"varint,1,opt,name=write_time_ms,json=writeTimeMs,proto3" json:"write_time_ms,omitempty"`
	TotalTimeInPartitionQueueMs uint32 `protobuf:"varint,2,opt,name=total_time_in_partition_queue_ms,json=totalTimeInPartitionQueueMs,proto3" json:"total_time_in_partition_queue_ms,omitempty"`
	PartitionQuotedTimeMs       uint32 `protobuf:"varint,3,opt,name=partition_quoted_time_ms,json=partitionQuotedTimeMs,proto3" json:"partition_quoted_time_ms,omitempty"`
}

func (x *WriteResponse_Stat) Reset() {
	*x = WriteResponse_Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponse_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse_Stat) ProtoMessage() {}

func (x *WriteResponse_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse_Stat.ProtoReflect.Descriptor instead.
func (*WriteResponse_Stat) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{5, 1}
}

func (x *WriteResponse_Stat) GetWriteTimeMs() uint32 {
	if x != nil {
		return x.WriteTimeMs
	}
	return 0
}

func (x *WriteResponse_Stat) GetTotalTimeInPartitionQueueMs() uint32 {
	if x != nil {
		return x.TotalTimeInPartitionQueueMs
	}
	return 0
}

func (x *WriteResponse_Stat) GetPartitionQuotedTimeMs() uint32 {
	if x != nil {
		return x.PartitionQuotedTimeMs
	}
	return 0
}

type WriteResponse_Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNo          uint64              `protobuf:"varint,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	Offset         uint64              `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	AlreadyWritten bool                `protobuf:"varint,3,opt,name=already_written,json=alreadyWritten,proto3" json:"already_written,omitempty"`
	Stat           *WriteResponse_Stat `protobuf:"bytes,4,opt,name=stat,proto3" json:"stat,omitempty"` //not filled in batch case
}

func (x *WriteResponse_Ack) Reset() {
	*x = WriteResponse_Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponse_Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse_Ack) ProtoMessage() {}

func (x *WriteResponse_Ack) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse_Ack.ProtoReflect.Descriptor instead.
func (*WriteResponse_Ack) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{5, 2}
}

func (x *WriteResponse_Ack) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *WriteResponse_Ack) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WriteResponse_Ack) GetAlreadyWritten() bool {
	if x != nil {
		return x.AlreadyWritten
	}
	return false
}

func (x *WriteResponse_Ack) GetStat() *WriteResponse_Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

type WriteResponse_AckBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stat *WriteResponse_Stat  `protobuf:"bytes,2,opt,name=stat,proto3" json:"stat,omitempty"` //common statistics for batch storing
	Ack  []*WriteResponse_Ack `protobuf:"bytes,1,rep,name=ack,proto3" json:"ack,omitempty"`
}

func (x *WriteResponse_AckBatch) Reset() {
	*x = WriteResponse_AckBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponse_AckBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponse_AckBatch) ProtoMessage() {}

func (x *WriteResponse_AckBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponse_AckBatch.ProtoReflect.Descriptor instead.
func (*WriteResponse_AckBatch) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{5, 3}
}

func (x *WriteResponse_AckBatch) GetStat() *WriteResponse_Stat {
	if x != nil {
		return x.Stat
	}
	return nil
}

func (x *WriteResponse_AckBatch) GetAck() []*WriteResponse_Ack {
	if x != nil {
		return x.Ack
	}
	return nil
}

type ReadRequest_Init struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics                   []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	ReadOnlyLocal            bool     `protobuf:"varint,2,opt,name=read_only_local,json=readOnlyLocal,proto3" json:"read_only_local,omitempty"` // if DCs empty and ReadOnlyLocal=false - read all dcs
	DataCenters              []string `protobuf:"bytes,3,rep,name=data_centers,json=dataCenters,proto3" json:"data_centers,omitempty"`          //list dc's witch topics are need to be readed(only in case of mirroring); ReadOnlyLocal is ignorred
	ClientId                 string   `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientsideLocksAllowed   bool     `protobuf:"varint,5,opt,name=clientside_locks_allowed,json=clientsideLocksAllowed,proto3" json:"clientside_locks_allowed,omitempty"`         //if true then partitions Lock signal will be sent from server,
	ProxyCookie              uint64   `protobuf:"varint,6,opt,name=proxy_cookie,json=proxyCookie,proto3" json:"proxy_cookie,omitempty"`                                            //cookie provided by ChooseProxy request
	BalancePartitionRightNow bool     `protobuf:"varint,8,opt,name=balance_partition_right_now,json=balancePartitionRightNow,proto3" json:"balance_partition_right_now,omitempty"` //if set then do not wait for commits from client on data from partition in case of balancing
	PartitionGroups          []uint32 `protobuf:"varint,9,rep,packed,name=partition_groups,json=partitionGroups,proto3" json:"partition_groups,omitempty"`                         //Groups to be read - if empty then read from all of them
	IdleTimeoutSec           uint32   `protobuf:"varint,10,opt,name=idle_timeout_sec,json=idleTimeoutSec,proto3" json:"idle_timeout_sec,omitempty"`                                //TODO: do we need it?
	CommitIntervalMs         uint32   `protobuf:"varint,12,opt,name=commit_interval_ms,json=commitIntervalMs,proto3" json:"commit_interval_ms,omitempty"`                          // How often server must commit data. If client sends commits faster,
	// Read request params
	MaxReadMessagesCount   uint32 `protobuf:"varint,14,opt,name=max_read_messages_count,json=maxReadMessagesCount,proto3" json:"max_read_messages_count,omitempty"`       // Max messages to give to client in one read request
	MaxReadSize            uint32 `protobuf:"varint,15,opt,name=max_read_size,json=maxReadSize,proto3" json:"max_read_size,omitempty"`                                    // Max size in bytes to give to client in one read request
	MaxReadPartitionsCount uint32 `protobuf:"varint,16,opt,name=max_read_partitions_count,json=maxReadPartitionsCount,proto3" json:"max_read_partitions_count,omitempty"` // 0 means not matters // Maximum partitions count to give to client in one read request
	MaxTimeLagMs           uint32 `protobuf:"varint,17,opt,name=max_time_lag_ms,json=maxTimeLagMs,proto3" json:"max_time_lag_ms,omitempty"`                               // Read data only with time lag less than or equal to specified
	ReadTimestampMs        uint64 `protobuf:"varint,18,opt,name=read_timestamp_ms,json=readTimestampMs,proto3" json:"read_timestamp_ms,omitempty"`                        // Read data only after this timestamp
	CommitsDisabled        bool   `protobuf:"varint,19,opt,name=commits_disabled,json=commitsDisabled,proto3" json:"commits_disabled,omitempty"`                          // Client will never commit
	Version                string `protobuf:"bytes,999,opt,name=version,proto3" json:"version,omitempty"`                                                                 //must be filled by client lib
	// Protocol version to let server know about new features that client supports
	ProtocolVersion uint32 `protobuf:"varint,13,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"` // version must be integer (not enum) because client may be newer than server
}

func (x *ReadRequest_Init) Reset() {
	*x = ReadRequest_Init{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest_Init) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest_Init) ProtoMessage() {}

func (x *ReadRequest_Init) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest_Init.ProtoReflect.Descriptor instead.
func (*ReadRequest_Init) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ReadRequest_Init) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *ReadRequest_Init) GetReadOnlyLocal() bool {
	if x != nil {
		return x.ReadOnlyLocal
	}
	return false
}

func (x *ReadRequest_Init) GetDataCenters() []string {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

func (x *ReadRequest_Init) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ReadRequest_Init) GetClientsideLocksAllowed() bool {
	if x != nil {
		return x.ClientsideLocksAllowed
	}
	return false
}

func (x *ReadRequest_Init) GetProxyCookie() uint64 {
	if x != nil {
		return x.ProxyCookie
	}
	return 0
}

func (x *ReadRequest_Init) GetBalancePartitionRightNow() bool {
	if x != nil {
		return x.BalancePartitionRightNow
	}
	return false
}

func (x *ReadRequest_Init) GetPartitionGroups() []uint32 {
	if x != nil {
		return x.PartitionGroups
	}
	return nil
}

func (x *ReadRequest_Init) GetIdleTimeoutSec() uint32 {
	if x != nil {
		return x.IdleTimeoutSec
	}
	return 0
}

func (x *ReadRequest_Init) GetCommitIntervalMs() uint32 {
	if x != nil {
		return x.CommitIntervalMs
	}
	return 0
}

func (x *ReadRequest_Init) GetMaxReadMessagesCount() uint32 {
	if x != nil {
		return x.MaxReadMessagesCount
	}
	return 0
}

func (x *ReadRequest_Init) GetMaxReadSize() uint32 {
	if x != nil {
		return x.MaxReadSize
	}
	return 0
}

func (x *ReadRequest_Init) GetMaxReadPartitionsCount() uint32 {
	if x != nil {
		return x.MaxReadPartitionsCount
	}
	return 0
}

func (x *ReadRequest_Init) GetMaxTimeLagMs() uint32 {
	if x != nil {
		return x.MaxTimeLagMs
	}
	return 0
}

func (x *ReadRequest_Init) GetReadTimestampMs() uint64 {
	if x != nil {
		return x.ReadTimestampMs
	}
	return 0
}

func (x *ReadRequest_Init) GetCommitsDisabled() bool {
	if x != nil {
		return x.CommitsDisabled
	}
	return false
}

func (x *ReadRequest_Init) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReadRequest_Init) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

type ReadRequest_Read struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It is not allowed to change these parameters.
	// They will be removed in future from TRead structure.
	MaxCount         uint32 `protobuf:"varint,1,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	MaxSize          uint32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	PartitionsAtOnce uint32 `protobuf:"varint,3,opt,name=partitions_at_once,json=partitionsAtOnce,proto3" json:"partitions_at_once,omitempty"` //0 means not matters
	MaxTimeLagMs     uint32 `protobuf:"varint,5,opt,name=max_time_lag_ms,json=maxTimeLagMs,proto3" json:"max_time_lag_ms,omitempty"`
	ReadTimestampMs  uint64 `protobuf:"varint,6,opt,name=read_timestamp_ms,json=readTimestampMs,proto3" json:"read_timestamp_ms,omitempty"` //read data only after this timestamp
}

func (x *ReadRequest_Read) Reset() {
	*x = ReadRequest_Read{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest_Read) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest_Read) ProtoMessage() {}

func (x *ReadRequest_Read) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest_Read.ProtoReflect.Descriptor instead.
func (*ReadRequest_Read) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ReadRequest_Read) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *ReadRequest_Read) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *ReadRequest_Read) GetPartitionsAtOnce() uint32 {
	if x != nil {
		return x.PartitionsAtOnce
	}
	return 0
}

func (x *ReadRequest_Read) GetMaxTimeLagMs() uint32 {
	if x != nil {
		return x.MaxTimeLagMs
	}
	return 0
}

func (x *ReadRequest_Read) GetReadTimestampMs() uint64 {
	if x != nil {
		return x.ReadTimestampMs
	}
	return 0
}

type ReadRequest_StartRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic            string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition        uint32 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	ReadOffset       uint64 `protobuf:"varint,3,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"`                     //skip upto this position; if committed position is bigger, then do nothing
	VerifyReadOffset bool   `protobuf:"varint,4,opt,name=verify_read_offset,json=verifyReadOffset,proto3" json:"verify_read_offset,omitempty"` //if true then check that committed position is <= ReadOffset; otherwise it means persqueueError in client logic
	Generation       uint64 `protobuf:"varint,5,opt,name=generation,proto3" json:"generation,omitempty"`
	CommitOffset     uint64 `protobuf:"varint,6,opt,name=commit_offset,json=commitOffset,proto3" json:"commit_offset,omitempty"` //all messages BEFORE this position are processed by client
}

func (x *ReadRequest_StartRead) Reset() {
	*x = ReadRequest_StartRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest_StartRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest_StartRead) ProtoMessage() {}

func (x *ReadRequest_StartRead) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest_StartRead.ProtoReflect.Descriptor instead.
func (*ReadRequest_StartRead) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{6, 2}
}

func (x *ReadRequest_StartRead) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ReadRequest_StartRead) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ReadRequest_StartRead) GetReadOffset() uint64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *ReadRequest_StartRead) GetVerifyReadOffset() bool {
	if x != nil {
		return x.VerifyReadOffset
	}
	return false
}

func (x *ReadRequest_StartRead) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *ReadRequest_StartRead) GetCommitOffset() uint64 {
	if x != nil {
		return x.CommitOffset
	}
	return 0
}

type ReadRequest_Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie []uint64 `protobuf:"varint,1,rep,packed,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *ReadRequest_Commit) Reset() {
	*x = ReadRequest_Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequest_Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest_Commit) ProtoMessage() {}

func (x *ReadRequest_Commit) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest_Commit.ProtoReflect.Descriptor instead.
func (*ReadRequest_Commit) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{6, 3}
}

func (x *ReadRequest_Commit) GetCookie() []uint64 {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type ReadResponse_Init struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` //for debug only
}

func (x *ReadResponse_Init) Reset() {
	*x = ReadResponse_Init{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_Init) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_Init) ProtoMessage() {}

func (x *ReadResponse_Init) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_Init.ProtoReflect.Descriptor instead.
func (*ReadResponse_Init) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ReadResponse_Init) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ReadResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageBatch []*ReadResponse_Data_MessageBatch `protobuf:"bytes,1,rep,name=message_batch,json=messageBatch,proto3" json:"message_batch,omitempty"`
	Cookie       uint64                            `protobuf:"varint,2,opt,name=cookie,proto3" json:"cookie,omitempty"` //Cookie to be committed by server
}

func (x *ReadResponse_Data) Reset() {
	*x = ReadResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_Data) ProtoMessage() {}

func (x *ReadResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_Data.ProtoReflect.Descriptor instead.
func (*ReadResponse_Data) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ReadResponse_Data) GetMessageBatch() []*ReadResponse_Data_MessageBatch {
	if x != nil {
		return x.MessageBatch
	}
	return nil
}

func (x *ReadResponse_Data) GetCookie() uint64 {
	if x != nil {
		return x.Cookie
	}
	return 0
}

type ReadResponse_BatchedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie        uint64                                    `protobuf:"varint,2,opt,name=cookie,proto3" json:"cookie,omitempty"`                                   //Cookie to be committed by server
	PartitionData []*ReadResponse_BatchedData_PartitionData `protobuf:"bytes,1,rep,name=partition_data,json=partitionData,proto3" json:"partition_data,omitempty"` //not greater than one PartitionData for each partition
}

func (x *ReadResponse_BatchedData) Reset() {
	*x = ReadResponse_BatchedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_BatchedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_BatchedData) ProtoMessage() {}

func (x *ReadResponse_BatchedData) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_BatchedData.ProtoReflect.Descriptor instead.
func (*ReadResponse_BatchedData) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 2}
}

func (x *ReadResponse_BatchedData) GetCookie() uint64 {
	if x != nil {
		return x.Cookie
	}
	return 0
}

func (x *ReadResponse_BatchedData) GetPartitionData() []*ReadResponse_BatchedData_PartitionData {
	if x != nil {
		return x.PartitionData
	}
	return nil
}

type ReadResponse_Lock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic      string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition  uint32 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	ReadOffset uint64 `protobuf:"varint,3,opt,name=read_offset,json=readOffset,proto3" json:"read_offset,omitempty"` //offset to read from
	EndOffset  uint64 `protobuf:"varint,4,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`    //know till this time end offset
	Generation uint64 `protobuf:"varint,5,opt,name=generation,proto3" json:"generation,omitempty"`
}

func (x *ReadResponse_Lock) Reset() {
	*x = ReadResponse_Lock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_Lock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_Lock) ProtoMessage() {}

func (x *ReadResponse_Lock) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_Lock.ProtoReflect.Descriptor instead.
func (*ReadResponse_Lock) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 3}
}

func (x *ReadResponse_Lock) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ReadResponse_Lock) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ReadResponse_Lock) GetReadOffset() uint64 {
	if x != nil {
		return x.ReadOffset
	}
	return 0
}

func (x *ReadResponse_Lock) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *ReadResponse_Lock) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type ReadResponse_Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition uint32 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	CanCommit bool   `protobuf:"varint,3,opt,name=can_commit,json=canCommit,proto3" json:"can_commit,omitempty"` //if CanCommit=false then you can not store progress of processing data for that partition at server;
	//all commits will have no effect for this partition
	//if you rely on committing offsets then just drop all data for this partition without processing - another session will get them later
	//if CanCommit=true and you are relying on committing offsets - you can process all data for this partition you got,
	//commit cookies and be sure that no other session will ever get this data
	Generation uint64 `protobuf:"varint,4,opt,name=generation,proto3" json:"generation,omitempty"`
}

func (x *ReadResponse_Release) Reset() {
	*x = ReadResponse_Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_Release) ProtoMessage() {}

func (x *ReadResponse_Release) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_Release.ProtoReflect.Descriptor instead.
func (*ReadResponse_Release) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 4}
}

func (x *ReadResponse_Release) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ReadResponse_Release) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ReadResponse_Release) GetCanCommit() bool {
	if x != nil {
		return x.CanCommit
	}
	return false
}

func (x *ReadResponse_Release) GetGeneration() uint64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

type ReadResponse_Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie []uint64 `protobuf:"varint,1,rep,packed,name=cookie,proto3" json:"cookie,omitempty"` //for debug purposes only
}

func (x *ReadResponse_Commit) Reset() {
	*x = ReadResponse_Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_Commit) ProtoMessage() {}

func (x *ReadResponse_Commit) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_Commit.ProtoReflect.Descriptor instead.
func (*ReadResponse_Commit) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 5}
}

func (x *ReadResponse_Commit) GetCookie() []uint64 {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type ReadResponse_Data_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *MessageMeta `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"` //SeqNo ...
	Data []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	//unique value for clientside deduplication - Topic:Partition:Offset
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ReadResponse_Data_Message) Reset() {
	*x = ReadResponse_Data_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_Data_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_Data_Message) ProtoMessage() {}

func (x *ReadResponse_Data_Message) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_Data_Message.ProtoReflect.Descriptor instead.
func (*ReadResponse_Data_Message) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 1, 0}
}

func (x *ReadResponse_Data_Message) GetMeta() *MessageMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ReadResponse_Data_Message) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReadResponse_Data_Message) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ReadResponse_Data_MessageBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string                       `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition uint32                       `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Message   []*ReadResponse_Data_Message `protobuf:"bytes,3,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *ReadResponse_Data_MessageBatch) Reset() {
	*x = ReadResponse_Data_MessageBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_Data_MessageBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_Data_MessageBatch) ProtoMessage() {}

func (x *ReadResponse_Data_MessageBatch) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_Data_MessageBatch.ProtoReflect.Descriptor instead.
func (*ReadResponse_Data_MessageBatch) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 1, 1}
}

func (x *ReadResponse_Data_MessageBatch) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ReadResponse_Data_MessageBatch) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ReadResponse_Data_MessageBatch) GetMessage() []*ReadResponse_Data_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ReadResponse_BatchedData_MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codec        ECodec `protobuf:"varint,2,opt,name=codec,proto3,enum=NPersQueue.ECodec" json:"codec,omitempty"`
	Offset       uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"` //unique value for clientside deduplication - Topic:Partition:Offset
	SeqNo        uint64 `protobuf:"varint,4,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	CreateTimeMs uint64 `protobuf:"varint,5,opt,name=create_time_ms,json=createTimeMs,proto3" json:"create_time_ms,omitempty"`
	Data         []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReadResponse_BatchedData_MessageData) Reset() {
	*x = ReadResponse_BatchedData_MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_BatchedData_MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_BatchedData_MessageData) ProtoMessage() {}

func (x *ReadResponse_BatchedData_MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_BatchedData_MessageData.ProtoReflect.Descriptor instead.
func (*ReadResponse_BatchedData_MessageData) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 2, 0}
}

func (x *ReadResponse_BatchedData_MessageData) GetCodec() ECodec {
	if x != nil {
		return x.Codec
	}
	return ECodec_RAW
}

func (x *ReadResponse_BatchedData_MessageData) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReadResponse_BatchedData_MessageData) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *ReadResponse_BatchedData_MessageData) GetCreateTimeMs() uint64 {
	if x != nil {
		return x.CreateTimeMs
	}
	return 0
}

func (x *ReadResponse_BatchedData_MessageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReadResponse_BatchedData_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId    []byte                                  `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	ExtraFields *MapType                                `protobuf:"bytes,3,opt,name=extra_fields,json=extraFields,proto3" json:"extra_fields,omitempty"`
	WriteTimeMs uint64                                  `protobuf:"varint,4,opt,name=write_time_ms,json=writeTimeMs,proto3" json:"write_time_ms,omitempty"`
	Ip          string                                  `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	MessageData []*ReadResponse_BatchedData_MessageData `protobuf:"bytes,1,rep,name=message_data,json=messageData,proto3" json:"message_data,omitempty"`
}

func (x *ReadResponse_BatchedData_Batch) Reset() {
	*x = ReadResponse_BatchedData_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_BatchedData_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_BatchedData_Batch) ProtoMessage() {}

func (x *ReadResponse_BatchedData_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_BatchedData_Batch.ProtoReflect.Descriptor instead.
func (*ReadResponse_BatchedData_Batch) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 2, 1}
}

func (x *ReadResponse_BatchedData_Batch) GetSourceId() []byte {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *ReadResponse_BatchedData_Batch) GetExtraFields() *MapType {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

func (x *ReadResponse_BatchedData_Batch) GetWriteTimeMs() uint64 {
	if x != nil {
		return x.WriteTimeMs
	}
	return 0
}

func (x *ReadResponse_BatchedData_Batch) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ReadResponse_BatchedData_Batch) GetMessageData() []*ReadResponse_BatchedData_MessageData {
	if x != nil {
		return x.MessageData
	}
	return nil
}

type ReadResponse_BatchedData_PartitionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string                            `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition uint32                            `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	Batch     []*ReadResponse_BatchedData_Batch `protobuf:"bytes,1,rep,name=batch,proto3" json:"batch,omitempty"`
}

func (x *ReadResponse_BatchedData_PartitionData) Reset() {
	*x = ReadResponse_BatchedData_PartitionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ydb_persqueue_v0_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponse_BatchedData_PartitionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse_BatchedData_PartitionData) ProtoMessage() {}

func (x *ReadResponse_BatchedData_PartitionData) ProtoReflect() protoreflect.Message {
	mi := &file_ydb_persqueue_v0_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse_BatchedData_PartitionData.ProtoReflect.Descriptor instead.
func (*ReadResponse_BatchedData_PartitionData) Descriptor() ([]byte, []int) {
	return file_ydb_persqueue_v0_proto_rawDescGZIP(), []int{8, 2, 2}
}

func (x *ReadResponse_BatchedData_PartitionData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ReadResponse_BatchedData_PartitionData) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ReadResponse_BatchedData_PartitionData) GetBatch() []*ReadResponse_BatchedData_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

var file_ydb_persqueue_v0_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         66677,
		Name:          "NPersQueue.GenerateYaStyle",
		Tag:           "varint,66677,opt,name=GenerateYaStyle",
		Filename:      "ydb_persqueue_v0.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional bool GenerateYaStyle = 66677;
	E_GenerateYaStyle = &file_ydb_persqueue_v0_proto_extTypes[0]
)

var File_ydb_persqueue_v0_proto protoreflect.FileDescriptor

var file_ydb_persqueue_v0_proto_rawDesc = []byte{
	0x0a, 0x16, 0x79, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x76, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x35, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x76, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x10, 0x74, 0x76, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xa2, 0x05, 0x0a, 0x0c, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12,
	0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x1a, 0xd8, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0xe7, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x81, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x6f, 0x64,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x1a, 0x3e, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9d,
	0x06, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x63, 0x6b,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x77, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12,
	0x1c, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x1a, 0xaa, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x45, 0x0a,
	0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x1a, 0x91, 0x01,
	0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x32, 0x0a,
	0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x73, 0x74, 0x61,
	0x74, 0x1a, 0x6f, 0x0a, 0x08, 0x41, 0x63, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a,
	0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4e, 0x50,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x04, 0x73, 0x74, 0x61,
	0x74, 0x12, 0x2f, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x6b, 0x52, 0x03, 0x61,
	0x63, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7,
	0x0c, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x69, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a,
	0xff, 0x05, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x69, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x4e, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x64, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x61, 0x67, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe7, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0xbf, 0x01, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x4f, 0x6e, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x67,
	0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x61, 0x67, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4d, 0x73, 0x1a, 0xd3, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x20, 0x0a, 0x06, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x45,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x49, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x02, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xfe, 0x0d, 0x0a, 0x0c, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x33,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3c,
	0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x1a, 0x25, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0xd9,
	0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x1a, 0x62, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x1a, 0x83, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x93, 0x05, 0x0a, 0x0b, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x4e, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xa0, 0x01,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4e,
	0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x45, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0xe5, 0x01, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x53, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x4e, 0x50, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x85, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x1a, 0x9a, 0x01, 0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7c, 0x0a,
	0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x20, 0x0a, 0x06, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xef, 0x04, 0x0a, 0x0a, 0x45, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49,
	0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x18, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x4b,
	0x5f, 0x49, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x10, 0x13, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10,
	0x0c, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x4f, 0x5f,
	0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x0e, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45,
	0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x4f,
	0x50, 0x49, 0x43, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x14, 0x12, 0x1a,
	0x0a, 0x16, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x16, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x17,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x64, 0x2a, 0x3c, 0x0a, 0x06, 0x45,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x5a, 0x4f, 0x50,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x53, 0x54, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x64, 0x32, 0xa1, 0x01, 0x0a, 0x10, 0x50, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47,
	0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x4e, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x3a, 0x48, 0x0a,
	0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x59, 0x61, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf5,
	0x88, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x59, 0x61, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x3d, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x79, 0x64, 0x62, 0x2d, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x59, 0x64, 0x62, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x56, 0x30, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ydb_persqueue_v0_proto_rawDescOnce sync.Once
	file_ydb_persqueue_v0_proto_rawDescData = file_ydb_persqueue_v0_proto_rawDesc
)

func file_ydb_persqueue_v0_proto_rawDescGZIP() []byte {
	file_ydb_persqueue_v0_proto_rawDescOnce.Do(func() {
		file_ydb_persqueue_v0_proto_rawDescData = protoimpl.X.CompressGZIP(file_ydb_persqueue_v0_proto_rawDescData)
	})
	return file_ydb_persqueue_v0_proto_rawDescData
}

var file_ydb_persqueue_v0_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ydb_persqueue_v0_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_ydb_persqueue_v0_proto_goTypes = []interface{}{
	(EErrorCode)(0),                                // 0: NPersQueue.EErrorCode
	(ECodec)(0),                                    // 1: NPersQueue.ECodec
	(ReadRequest_EProtocolVersion)(0),              // 2: NPersQueue.ReadRequest.EProtocolVersion
	(*Error)(nil),                                  // 3: NPersQueue.Error
	(*KeyValue)(nil),                               // 4: NPersQueue.KeyValue
	(*MapType)(nil),                                // 5: NPersQueue.MapType
	(*Credentials)(nil),                            // 6: NPersQueue.Credentials
	(*WriteRequest)(nil),                           // 7: NPersQueue.WriteRequest
	(*WriteResponse)(nil),                          // 8: NPersQueue.WriteResponse
	(*ReadRequest)(nil),                            // 9: NPersQueue.ReadRequest
	(*MessageMeta)(nil),                            // 10: NPersQueue.MessageMeta
	(*ReadResponse)(nil),                           // 11: NPersQueue.ReadResponse
	(*WriteRequest_Init)(nil),                      // 12: NPersQueue.WriteRequest.Init
	(*WriteRequest_Data)(nil),                      // 13: NPersQueue.WriteRequest.Data
	(*WriteRequest_DataBatch)(nil),                 // 14: NPersQueue.WriteRequest.DataBatch
	(*WriteResponse_Init)(nil),                     // 15: NPersQueue.WriteResponse.Init
	(*WriteResponse_Stat)(nil),                     // 16: NPersQueue.WriteResponse.Stat
	(*WriteResponse_Ack)(nil),                      // 17: NPersQueue.WriteResponse.Ack
	(*WriteResponse_AckBatch)(nil),                 // 18: NPersQueue.WriteResponse.AckBatch
	(*ReadRequest_Init)(nil),                       // 19: NPersQueue.ReadRequest.Init
	(*ReadRequest_Read)(nil),                       // 20: NPersQueue.ReadRequest.Read
	(*ReadRequest_StartRead)(nil),                  // 21: NPersQueue.ReadRequest.StartRead
	(*ReadRequest_Commit)(nil),                     // 22: NPersQueue.ReadRequest.Commit
	(*ReadResponse_Init)(nil),                      // 23: NPersQueue.ReadResponse.Init
	(*ReadResponse_Data)(nil),                      // 24: NPersQueue.ReadResponse.Data
	(*ReadResponse_BatchedData)(nil),               // 25: NPersQueue.ReadResponse.BatchedData
	(*ReadResponse_Lock)(nil),                      // 26: NPersQueue.ReadResponse.Lock
	(*ReadResponse_Release)(nil),                   // 27: NPersQueue.ReadResponse.Release
	(*ReadResponse_Commit)(nil),                    // 28: NPersQueue.ReadResponse.Commit
	(*ReadResponse_Data_Message)(nil),              // 29: NPersQueue.ReadResponse.Data.Message
	(*ReadResponse_Data_MessageBatch)(nil),         // 30: NPersQueue.ReadResponse.Data.MessageBatch
	(*ReadResponse_BatchedData_MessageData)(nil),   // 31: NPersQueue.ReadResponse.BatchedData.MessageData
	(*ReadResponse_BatchedData_Batch)(nil),         // 32: NPersQueue.ReadResponse.BatchedData.Batch
	(*ReadResponse_BatchedData_PartitionData)(nil), // 33: NPersQueue.ReadResponse.BatchedData.PartitionData
	(*descriptorpb.FileOptions)(nil),               // 34: google.protobuf.FileOptions
}
var file_ydb_persqueue_v0_proto_depIdxs = []int32{
	0,  // 0: NPersQueue.Error.code:type_name -> NPersQueue.EErrorCode
	4,  // 1: NPersQueue.MapType.items:type_name -> NPersQueue.KeyValue
	12, // 2: NPersQueue.WriteRequest.init:type_name -> NPersQueue.WriteRequest.Init
	13, // 3: NPersQueue.WriteRequest.data:type_name -> NPersQueue.WriteRequest.Data
	14, // 4: NPersQueue.WriteRequest.data_batch:type_name -> NPersQueue.WriteRequest.DataBatch
	6,  // 5: NPersQueue.WriteRequest.credentials:type_name -> NPersQueue.Credentials
	15, // 6: NPersQueue.WriteResponse.init:type_name -> NPersQueue.WriteResponse.Init
	17, // 7: NPersQueue.WriteResponse.ack:type_name -> NPersQueue.WriteResponse.Ack
	18, // 8: NPersQueue.WriteResponse.ack_batch:type_name -> NPersQueue.WriteResponse.AckBatch
	3,  // 9: NPersQueue.WriteResponse.error:type_name -> NPersQueue.Error
	19, // 10: NPersQueue.ReadRequest.init:type_name -> NPersQueue.ReadRequest.Init
	20, // 11: NPersQueue.ReadRequest.read:type_name -> NPersQueue.ReadRequest.Read
	21, // 12: NPersQueue.ReadRequest.start_read:type_name -> NPersQueue.ReadRequest.StartRead
	22, // 13: NPersQueue.ReadRequest.commit:type_name -> NPersQueue.ReadRequest.Commit
	6,  // 14: NPersQueue.ReadRequest.credentials:type_name -> NPersQueue.Credentials
	5,  // 15: NPersQueue.MessageMeta.extra_fields:type_name -> NPersQueue.MapType
	1,  // 16: NPersQueue.MessageMeta.codec:type_name -> NPersQueue.ECodec
	23, // 17: NPersQueue.ReadResponse.init:type_name -> NPersQueue.ReadResponse.Init
	24, // 18: NPersQueue.ReadResponse.data:type_name -> NPersQueue.ReadResponse.Data
	25, // 19: NPersQueue.ReadResponse.batched_data:type_name -> NPersQueue.ReadResponse.BatchedData
	3,  // 20: NPersQueue.ReadResponse.error:type_name -> NPersQueue.Error
	26, // 21: NPersQueue.ReadResponse.lock:type_name -> NPersQueue.ReadResponse.Lock
	27, // 22: NPersQueue.ReadResponse.release:type_name -> NPersQueue.ReadResponse.Release
	28, // 23: NPersQueue.ReadResponse.commit:type_name -> NPersQueue.ReadResponse.Commit
	5,  // 24: NPersQueue.WriteRequest.Init.extra_fields:type_name -> NPersQueue.MapType
	1,  // 25: NPersQueue.WriteRequest.Data.codec:type_name -> NPersQueue.ECodec
	13, // 26: NPersQueue.WriteRequest.DataBatch.data:type_name -> NPersQueue.WriteRequest.Data
	16, // 27: NPersQueue.WriteResponse.Ack.stat:type_name -> NPersQueue.WriteResponse.Stat
	16, // 28: NPersQueue.WriteResponse.AckBatch.stat:type_name -> NPersQueue.WriteResponse.Stat
	17, // 29: NPersQueue.WriteResponse.AckBatch.ack:type_name -> NPersQueue.WriteResponse.Ack
	30, // 30: NPersQueue.ReadResponse.Data.message_batch:type_name -> NPersQueue.ReadResponse.Data.MessageBatch
	33, // 31: NPersQueue.ReadResponse.BatchedData.partition_data:type_name -> NPersQueue.ReadResponse.BatchedData.PartitionData
	10, // 32: NPersQueue.ReadResponse.Data.Message.meta:type_name -> NPersQueue.MessageMeta
	29, // 33: NPersQueue.ReadResponse.Data.MessageBatch.message:type_name -> NPersQueue.ReadResponse.Data.Message
	1,  // 34: NPersQueue.ReadResponse.BatchedData.MessageData.codec:type_name -> NPersQueue.ECodec
	5,  // 35: NPersQueue.ReadResponse.BatchedData.Batch.extra_fields:type_name -> NPersQueue.MapType
	31, // 36: NPersQueue.ReadResponse.BatchedData.Batch.message_data:type_name -> NPersQueue.ReadResponse.BatchedData.MessageData
	32, // 37: NPersQueue.ReadResponse.BatchedData.PartitionData.batch:type_name -> NPersQueue.ReadResponse.BatchedData.Batch
	34, // 38: NPersQueue.GenerateYaStyle:extendee -> google.protobuf.FileOptions
	7,  // 39: NPersQueue.PersQueueService.WriteSession:input_type -> NPersQueue.WriteRequest
	9,  // 40: NPersQueue.PersQueueService.ReadSession:input_type -> NPersQueue.ReadRequest
	8,  // 41: NPersQueue.PersQueueService.WriteSession:output_type -> NPersQueue.WriteResponse
	11, // 42: NPersQueue.PersQueueService.ReadSession:output_type -> NPersQueue.ReadResponse
	41, // [41:43] is the sub-list for method output_type
	39, // [39:41] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	38, // [38:39] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_ydb_persqueue_v0_proto_init() }
func file_ydb_persqueue_v0_proto_init() {
	if File_ydb_persqueue_v0_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ydb_persqueue_v0_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest_Init); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequest_DataBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponse_Init); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponse_Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponse_Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponse_AckBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest_Init); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest_Read); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest_StartRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequest_Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_Init); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_BatchedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_Lock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_Data_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_Data_MessageBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_BatchedData_MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_BatchedData_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ydb_persqueue_v0_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponse_BatchedData_PartitionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ydb_persqueue_v0_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Credentials_TvmServiceTicket)(nil),
		(*Credentials_OauthToken)(nil),
	}
	file_ydb_persqueue_v0_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*WriteRequest_Init_)(nil),
		(*WriteRequest_Data_)(nil),
		(*WriteRequest_DataBatch_)(nil),
	}
	file_ydb_persqueue_v0_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*WriteResponse_Init_)(nil),
		(*WriteResponse_Ack_)(nil),
		(*WriteResponse_AckBatch_)(nil),
		(*WriteResponse_Error)(nil),
	}
	file_ydb_persqueue_v0_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ReadRequest_Init_)(nil),
		(*ReadRequest_Read_)(nil),
		(*ReadRequest_StartRead_)(nil),
		(*ReadRequest_Commit_)(nil),
	}
	file_ydb_persqueue_v0_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ReadResponse_Init_)(nil),
		(*ReadResponse_Data_)(nil),
		(*ReadResponse_BatchedData_)(nil),
		(*ReadResponse_Error)(nil),
		(*ReadResponse_Lock_)(nil),
		(*ReadResponse_Release_)(nil),
		(*ReadResponse_Commit_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ydb_persqueue_v0_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   31,
			NumExtensions: 1,
			NumServices:   1,
		},
		GoTypes:           file_ydb_persqueue_v0_proto_goTypes,
		DependencyIndexes: file_ydb_persqueue_v0_proto_depIdxs,
		EnumInfos:         file_ydb_persqueue_v0_proto_enumTypes,
		MessageInfos:      file_ydb_persqueue_v0_proto_msgTypes,
		ExtensionInfos:    file_ydb_persqueue_v0_proto_extTypes,
	}.Build()
	File_ydb_persqueue_v0_proto = out.File
	file_ydb_persqueue_v0_proto_rawDesc = nil
	file_ydb_persqueue_v0_proto_goTypes = nil
	file_ydb_persqueue_v0_proto_depIdxs = nil
}
